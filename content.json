{"meta":{"title":"DK-Blog","subtitle":"子标题","description":"记录开发过程中的各种问题","author":"金河","url":"http://www.lvhejin.cn","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2024-01-05T17:32:17.599Z","updated":"2024-01-05T17:32:17.599Z","comments":false,"path":"/404.html","permalink":"http://www.lvhejin.cn/404.html","excerpt":"","text":""},{"title":"关于","date":"2024-01-05T17:32:17.655Z","updated":"2024-01-05T17:32:17.655Z","comments":false,"path":"about/index.html","permalink":"http://www.lvhejin.cn/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"书单","date":"2024-01-05T17:32:17.655Z","updated":"2024-01-05T17:32:17.655Z","comments":false,"path":"books/index.html","permalink":"http://www.lvhejin.cn/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2024-01-05T17:32:17.655Z","updated":"2024-01-05T17:32:17.655Z","comments":false,"path":"categories/index.html","permalink":"http://www.lvhejin.cn/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2024-01-05T17:32:17.655Z","updated":"2024-01-05T17:32:17.655Z","comments":true,"path":"links/index.html","permalink":"http://www.lvhejin.cn/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2024-01-05T17:32:17.655Z","updated":"2024-01-05T17:32:17.655Z","comments":false,"path":"repository/index.html","permalink":"http://www.lvhejin.cn/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2024-01-05T17:32:17.655Z","updated":"2024-01-05T17:32:17.655Z","comments":false,"path":"tags/index.html","permalink":"http://www.lvhejin.cn/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"npm install时遇到错误\"error:0308010C:digital envelope routines::unsupported\"的解决办法","slug":"NodeJS/NPM/npm install时遇到错误0308010C的解决办法","date":"2024-01-06T01:13:12.000Z","updated":"2024-01-05T17:32:17.643Z","comments":true,"path":"2024/01/06/NodeJS/NPM/npm install时遇到错误0308010C的解决办法/index.html","link":"","permalink":"http://www.lvhejin.cn/2024/01/06/NodeJS/NPM/npm%20install%E6%97%B6%E9%81%87%E5%88%B0%E9%94%99%E8%AF%AF0308010C%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/index.html","excerpt":"","text":"今天早上打开电脑，更新了日常工作的github仓库，然后就是习惯性地执行了”npm install”，发现报了下面这个错误： Errornpm install时遇到错误”error:0308010C:digital envelope routines::unsupported”的解决办法](https://www.cnblogs.com/jaxu/p/171712: error:0308010C:digital envelope routines::unsupported 顺便看了一下错误堆栈，发现是一个Node的内核文件抛出来的错误，我的第一反应这个错误应该是和Node的版本有关（前几天刚刚升级过Node），所以理所当然地降低Node的版本应该可以解决这个问题。或者使用nvm（Windows平台上也可以使用nvm-windows）安装多个不同的Node版本。 除了切换Node的版本来解决这个问题外，其实还可以尝试启用legacy OpenSSL provider来解决这个问题，通过下面的命令行操作起来更容易： Unix (Linux, macOS, Git bash等) export NODE_OPTIONS=--openssl-legacy-provider Windows set NODE_OPTIONS=--openssl-legacy-provider PowerShell $env:NODE_OPTIONS = &quot;--openssl-legacy-provider&quot; 另外一个方法是在项目的package.json文件里将 &quot;start&quot;: &quot;react-scripts start&quot; 替换成： &quot;start&quot;: &quot;react-scripts --openssl-legacy-provider start&quot; 不过这个方法我没有试过。 转载：https://www.cnblogs.com/jaxu/p/17171211.html","categories":[{"name":"NodeJS","slug":"NodeJS","permalink":"http://www.lvhejin.cn/categories/NodeJS/"},{"name":"NPM","slug":"NodeJS/NPM","permalink":"http://www.lvhejin.cn/categories/NodeJS/NPM/"}],"tags":[{"name":"NodeJS","slug":"NodeJS","permalink":"http://www.lvhejin.cn/tags/NodeJS/"},{"name":"NPM","slug":"NPM","permalink":"http://www.lvhejin.cn/tags/NPM/"}]},{"title":"《腾讯之道》-产、研、运","slug":"互联网/管理/《腾讯之道》-产、研、运","date":"2023-12-22T15:39:02.000Z","updated":"2024-01-05T17:32:17.651Z","comments":true,"path":"2023/12/22/互联网/管理/《腾讯之道》-产、研、运/index.html","link":"","permalink":"http://www.lvhejin.cn/2023/12/22/%E4%BA%92%E8%81%94%E7%BD%91/%E7%AE%A1%E7%90%86/%E3%80%8A%E8%85%BE%E8%AE%AF%E4%B9%8B%E9%81%93%E3%80%8B-%E4%BA%A7%E3%80%81%E7%A0%94%E3%80%81%E8%BF%90/index.html","excerpt":"","text":"在腾讯内部，产品策划团队像是产品的爸爸，是产品创作的源泉、想法的起点；产品研发团队像是产品的妈妈，通过辛勤孕育，创造质量合格的产品；产品运营团队像是产品的奶妈，在产品交付给用户之后持续运营，努力让用户用得更好，体现出产品的价值。 由这三者组成的完整闭环，让整个团队进入高效运作的状态，各司其职、各有侧重，又交叉重叠、团结协作。 在管理200人或者更大规模团队时，驾轻就熟地按照产、研、运的组织结构进行复制。把一个200人的团队拆分为10个20人的团队，或20个10人的团队，分别负责产品的子模块。在这些子团队里面，还是由产、研、运“三驾马车”组成，独立工作，具备交付功能，为子目标努力，再通过彼此之间的协作，完成整个大产品的研发和交付。 产品团队关系和如何协同: 爸爸、妈妈、奶妈和宝宝(产品)是一家人，爸爸负责策划要生一个什么样的宝宝，是男是女，容貌几何；妈妈负责生产；奶妈负责养育。整个产品的协同是关键:家，是家庭关系，爸爸妈妈结婚组建家庭，整个产品向家庭一样运作，一起挣钱、财产透明共享。 我们的产品团队是一家人吗？哪些地方不是？哪里需要调整？这是我的思考。 极速研发团队: 创造“极速”需要全功能小团队 一键发布 健全的监控 与用户无门槛的反馈沟通系统 由极速设计、极速研发、极速上线等几部分构建而成。 在这个模型中，用户对于产品的需求都被存放在需求池当中，包括即将开发的新特性、用户反馈等，而且这些信息被进行了优先级排序，保证产品团队在制订计划的时候始终优先从事最重要的工作。 六大支撑模块：产品管理、项目管理、技术管理、质量管理、发布管理和基础平台建设。 在产品管理模块里，需要先行建立一个需求池，是一个相对完整且有一定余量的需求池。产品团队需要在每个迭代后快速动态地对需求池内容进行优先级调整，保证自己始终在满足优先级最高的需求。明确优先级最高的需求之后，还要对其进行拆分，把每个特性拆分为小的特性，直至让每个小的特性都由若干个功能或任务组成，实现最小单位上的完整闭环。之后，产品团队会让这些功能点进入从设计到开发，再到快速测试、验收的整个过程，使其在最短的周期内被快速验证。 项目管理模块里面包括了很多能够支撑整个运转过程的关键因素，通过这些细微的管理方法把多个角色和机制联系到一起，进行有节奏的快速运转，实现整个团队的极速研发。 技术管理模块需要一整套设计评审机制和设计文档沉淀并要建立代码管理机制，让代码在每一次开发重构中都保持健康的状态，从源头上保证产品质量。 质量管理模块需要采用自动化测试和分层测试的方式，让产品以最低成本进行质量验收。 在发布管理模块里面，还有一个很重要的子模块，就是发布演进流程。腾讯采用灰度的方式逐渐把产品发布给用户，在灰度过程中会有一系列的评审环节：发布前，由各个相关角色组成的评审委员会对产品进行风险评估，通过之后才能被正式发布上线；在发布上线之后，相关产品人员和测试人员会对线上产品进行持续跟进，研发人员要在产品上线后至少留守两个小时，以便在出现问题后能快速解决。 至于基础平台建设模块，是支撑以上五个方面工作的基础。其中的项目管理工具是腾讯耗费大量的人力和时间才得以研发并实现的。例如，腾讯自己开发的敏捷项目管理工具TAPD；再如，腾讯的持续集成平台，实现了产品之间，特别是大型产品之间每时每刻的快速集成；又如，用户反馈平台能让每个员工随时查看。 转载：https://www.jianshu.com/p/8e9c42f9194c","categories":[{"name":"互联网","slug":"互联网","permalink":"http://www.lvhejin.cn/categories/%E4%BA%92%E8%81%94%E7%BD%91/"},{"name":"管理","slug":"互联网/管理","permalink":"http://www.lvhejin.cn/categories/%E4%BA%92%E8%81%94%E7%BD%91/%E7%AE%A1%E7%90%86/"}],"tags":[{"name":"管理","slug":"管理","permalink":"http://www.lvhejin.cn/tags/%E7%AE%A1%E7%90%86/"}]},{"title":"查看Windows系统中所有当前已占用的快捷键","slug":"Windows/查看Windows系统中所有当前已占用的快捷键","date":"2023-12-18T12:09:45.000Z","updated":"2024-01-05T17:32:17.651Z","comments":true,"path":"2023/12/18/Windows/查看Windows系统中所有当前已占用的快捷键/index.html","link":"","permalink":"http://www.lvhejin.cn/2023/12/18/Windows/%E6%9F%A5%E7%9C%8BWindows%E7%B3%BB%E7%BB%9F%E4%B8%AD%E6%89%80%E6%9C%89%E5%BD%93%E5%89%8D%E5%B7%B2%E5%8D%A0%E7%94%A8%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/index.html","excerpt":"","text":"前言Windows 系统作为商业闭源系统，其出厂自带了大量与 Windows 服务项捆绑的快捷键，但如你所见市面上大多数文章、视频都停留在告诉你如何使用这些快捷键的阶段，这让所有系统自带的快捷键的使用与否都呈现出单项选择题的模式。 另外，若有更进一步涉及到快捷键自定义的需求，Windows 10 自身强制占用某些快捷键也是非常恼人的存在，虽然很多常用软件或多或少都会自带修改快捷键的功能，例如 Listary、uTools 快速启动的快捷键都可自定义的，但只要涉及到已经被 Windows 系统本身强制占用的键位，这些软件通常为了避开冲突也会拒绝被修改。 授人以鱼不如授人以渔，所以这篇文章旨在让大家如何快速查看 Windows 当前系统环境中所有已占用的快捷键，一方面可以让你快速了解究竟你的电脑上用多少快捷键是能使用，另外一方面能最大程度上让各种修改快捷键后所产生的操作环境污染与软件冲突的可能性降到最低。 正文材料与准备我们需要借助一款第三方的开源软件 OpenArk 官方下载地址：https://github.com/BlackINT3/OpenArk/releases/ 通常情况下请找到 OpenArk64.exe 并下载即可，国内用户若网络环境不允许可从以下镜像地址中下载（为确保数据安全，有条件仍建议直接访问 Github 下载） 国内镜像地址1 / 国内镜像地址2 / 国内镜像地址3 注意： 截止于 2021 年 4 月 13 日，OpenArk 目前最新版已支持 Windows 10 20H2 版本。 由于软件涉及内核注入，Windows insider 用户请谨慎使用，普通用户请忽视这一条。 OpenArk32.exe 仅供于 32 位系统使用，非特殊用途不建议优先使用。 Scoop 用户可直接在 Extras Bucket 中安装 OpenArk：scoop install extras/openark 基本教程 启动 OpenArk64.exe 软件默认为英文界面，有中文需求可在顶部菜单栏 Options &gt; Languages &gt; 简体中文 以下教程将以简体中文界面作为说明，契合本文撰写所采用的语言。 主页面中依次选择 内核 &gt; 系统热键 &gt; 进入内核模式 进入内核模式后，即可在当前页面看到当前系统中所有已运行的软件所占用的全局快捷键 我们可以通过点击名称，让所有应用按照字母表 a-z 顺序查看，也方便应用自动归类。 基本教程结束 注意： 软件查看到的快捷键为 当前正在运行的软件 所占用的 全局快捷键 若需要查看更多软件的全局快捷键，请在启动对应的软件后，再次进入内核模式即可查看。 内核模式稳定性一般，有蓝屏的风险，因此建议在不使用的时候点击「退出内核模式」，避免不必要的蓝屏与数据丢失。 OpenArk 内含大量强大的功能，若尝试折腾建议先备份系统或手动生成系统还原点，避免不必要的数据丢失。 逆向工具菜单中的软件会从对应软件的官网进行下载，下载失败请自备访问 Google、Youtube 的手段。 延伸内容由于进入内核模式后会查看到所有当前正在运行的软件或服务项所占用的快捷键，而 Windows 系统的软件与服务项均为开机自动启动，因此通常情况只要进入内核模式都可以把 Windows 系统自身所有已占用的快捷键展示出来。 正如本文 前言 中所说，我们修改快捷键的同时，也希望修改后的快捷键不会影响到系统中某些软件的运作，这样有目的、有依据地修改能减少潜在的风险与出错。即使我们后续用第三方的软件修改了大量的快捷键，一旦出现问题也可以知道冲突来源。这也是为什么我不直接第一时间就使用改键软件进行改键，而优先使用 OpenArk 先了解有多少全局快捷键的原因。 全局改键软件推荐 仅仅是推荐，不包含使用教程教学，课程教学估计需要写好几篇文章。 目前我认为靠得住的改键软件，暂时只有两个，很幸运的是，两款软件均为免费开源的产品： AutoHotkey PowerToys AutoHotKeyAutoHotkey 对于普通用户而言，优点如下： 系统资源占用非常低，绿色干净。 可扩展性极强，更有甚者会用来制作 输入法。 对于 Windows 系统自带的快捷键，可以几乎没有冲突地修改。 即使遇到冲突，也可以随时暂停脚本。 缺点大概是看起来上手难度比较高，主要原因是没有图形设置界面，但网上可以搜索到的中文资源文档很多，非常容易就可以上手编写自己的修改脚本。我个人也推荐比较好用的资源： AutoHotKey 積木語法產生器：点击打开 AutoHotKey 初学者中文向导：点击打开 现成的 AutoHotKey 方案：CapsLock + uTools 中有一个插件叫「AHK 文档」，可以一键快速查看，进阶时参考可用。 PowerToysPowerToys 相比起 AHK，优势在于最新版自带中文，拥有图形界面的设置，这两个优点对于普通用户会更友好一些。另外由于是微软自己的产品，这一先天优势也让其兼容性得到了保证。 缺点就是可扩展性一般，虽然 PowerToys 本身也自带了很多有趣的实用功能，但是仅针对于改键本身，自由度是低于 AHK 的，不过只需要几分钟就可以设置一下需要的按键，体验好确实毋庸置疑。 PowerToys 设置界面 后记：对键位有效利用的想象如何把一个键位更好地有效利用也涉及到了想象力与创造。举几个例子，如果以正常键盘输入的姿势，按 Ctrl 键对于小指的弯曲的压力比较大，那假如我把 Ctrl 改键到 CapsLock 键，是否就很大程度上解放了小指的压力了呢？ 另外，如果想要在 Windows 中实现 CapsLock 切换中英文，长按 CapsLock 才是触发切换大小写，是否也让这个键位更灵活了呢？ 在获知 Windows 自身快捷键有多少后，在这个基础上利用各种利器发挥自己的创造力与想象力，是多么有趣的事情呀 :P 转载：https://www.seekhue.com/posts/2021/view-all-shortcuts-in-windows/","categories":[{"name":"Windows","slug":"Windows","permalink":"http://www.lvhejin.cn/categories/Windows/"}],"tags":[{"name":"快捷键","slug":"快捷键","permalink":"http://www.lvhejin.cn/tags/%E5%BF%AB%E6%8D%B7%E9%94%AE/"},{"name":"Windows","slug":"Windows","permalink":"http://www.lvhejin.cn/tags/Windows/"},{"name":"软件推荐","slug":"软件推荐","permalink":"http://www.lvhejin.cn/tags/%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90/"}]},{"title":"GO语言图找图加鼠标双击","slug":"Go/桌面机器人/GO语言图找图加鼠标双击","date":"2023-12-05T19:33:31.000Z","updated":"2024-01-05T17:32:17.619Z","comments":true,"path":"2023/12/05/Go/桌面机器人/GO语言图找图加鼠标双击/index.html","link":"","permalink":"http://www.lvhejin.cn/2023/12/05/Go/%E6%A1%8C%E9%9D%A2%E6%9C%BA%E5%99%A8%E4%BA%BA/GO%E8%AF%AD%E8%A8%80%E5%9B%BE%E6%89%BE%E5%9B%BE%E5%8A%A0%E9%BC%A0%E6%A0%87%E5%8F%8C%E5%87%BB/index.html","excerpt":"","text":"GO语言图找图，加鼠标双击123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121package mainimport ( &quot;fmt&quot; &quot;github.com/go-vgo/robotgo&quot; &quot;github.com/kbinani/screenshot&quot; &quot;gocv.io/x/gocv&quot; &quot;image&quot; &quot;image/color&quot; &quot;image/png&quot; &quot;os&quot;)// captureScreen 从主显示器中截取屏幕图像func captureScreen() (*image.RGBA, error) &#123; // 设置截图区域 bounds := image.Rect(800, 600, 0, 0) // 截取屏幕图像 img, err := screenshot.CaptureRect(bounds) if err != nil &#123; return nil, fmt.Errorf(&quot;无法截取屏幕图像: %v&quot;, err) &#125; // 转换成RGBA格式图像 return toRGBA(img), nil&#125;// toRGBA 将图像转换为RGBA格式func toRGBA(img image.Image) *image.RGBA &#123; bounds := img.Bounds() rgba := image.NewRGBA(bounds) for x := bounds.Min.X; x &lt; bounds.Max.X; x++ &#123; for y := bounds.Min.Y; y &lt; bounds.Max.Y; y++ &#123; c := img.At(x, y) r, g, b, a := c.RGBA() rgba.SetRGBA(x, y, color.RGBA&#123;uint8(r &gt;&gt; 8), uint8(g &gt;&gt; 8), uint8(b &gt;&gt; 8), uint8(a &gt;&gt; 8)&#125;) &#125; &#125; return rgba&#125;// saveImage 将图像保存为PNG格式文件func saveImage(img image.Image, filename string) error &#123; file, err := os.Create(filename) if err != nil &#123; return err &#125; defer file.Close() err = png.Encode(file, img) if err != nil &#123; return err &#125; return nil&#125;// findImageInScreen 在屏幕上寻找目标图片，并返回其坐标func findImageInScreen(targetImagePath string) (image.Point, error) &#123; // 截取屏幕图像 screenImg, err := captureScreen() if err != nil &#123; return image.Point&#123;&#125;, fmt.Errorf(&quot;无法截取屏幕图像: %v&quot;, err) &#125; // 保存图像到临时文件 tmpFilename := &quot;images\\\\search.png&quot; // 修改为实际路径和文件名 err = saveImage(screenImg, tmpFilename) if err != nil &#123; return image.Point&#123;&#125;, fmt.Errorf(&quot;无法保存截图：%v&quot;, err) &#125; defer os.Remove(tmpFilename) // 加载目标图片 targetImage := gocv.IMRead(targetImagePath, gocv.IMReadColor) if targetImage.Empty() &#123; return image.Point&#123;&#125;, fmt.Errorf(&quot;无法读取目标图片&quot;) &#125; defer targetImage.Close() // 加载待搜索的图片 searchImage := gocv.IMRead(tmpFilename, gocv.IMReadColor) if searchImage.Empty() &#123; return image.Point&#123;&#125;, fmt.Errorf(&quot;无法读取搜索图片&quot;) &#125; defer searchImage.Close() result := gocv.NewMat() defer result.Close() // 在搜索图片中寻找目标图片 gocv.MatchTemplate(searchImage, targetImage, &amp;result, gocv.TmCcoeffNormed, gocv.NewMat()) _, _, _, maxLoc := gocv.MinMaxLoc(result) return maxLoc, nil&#125;func main() &#123; // 加载目标图片的路径 targetImagePath := &quot;images\\\\target.png&quot; // 修改为实际路径和文件名 // 在屏幕上寻找目标图片 loc, err := findImageInScreen(targetImagePath) if err != nil &#123; fmt.Println(&quot;无法在屏幕上寻找目标图片:&quot;, err) return &#125; // 打印目标图片在屏幕上的坐标 fmt.Printf(&quot;目标图片在屏幕上的坐标：(X:%d, Y:%d)\\n&quot;, loc.X, loc.Y) // 将鼠标移动到目标图片所在的位置，并执行鼠标双击操作 robotgo.MoveMouse(loc.X, loc.Y) robotgo.MouseClick(&quot;left&quot;, true) fmt.Println(&quot;鼠标已经双击&quot;)&#125; 转载：https://blog.51cto.com/dxbp/7908172","categories":[{"name":"Go","slug":"Go","permalink":"http://www.lvhejin.cn/categories/Go/"},{"name":"桌面机器人","slug":"Go/桌面机器人","permalink":"http://www.lvhejin.cn/categories/Go/%E6%A1%8C%E9%9D%A2%E6%9C%BA%E5%99%A8%E4%BA%BA/"}],"tags":[{"name":"机器人","slug":"机器人","permalink":"http://www.lvhejin.cn/tags/%E6%9C%BA%E5%99%A8%E4%BA%BA/"}]},{"title":"Go语言：屏幕操作（go-vgo/robotgo）","slug":"Go/桌面机器人/Go语言屏幕操作","date":"2023-12-05T18:39:24.000Z","updated":"2024-01-05T17:32:17.619Z","comments":true,"path":"2023/12/05/Go/桌面机器人/Go语言屏幕操作/index.html","link":"","permalink":"http://www.lvhejin.cn/2023/12/05/Go/%E6%A1%8C%E9%9D%A2%E6%9C%BA%E5%99%A8%E4%BA%BA/Go%E8%AF%AD%E8%A8%80%E5%B1%8F%E5%B9%95%E6%93%8D%E4%BD%9C/index.html","excerpt":"","text":"李大钊：我们要八小时工作！八小时睡觉！另外的八小时留给自己！ ▌前置安装：1go get github.com/go-vgo/robotgo ▌代码实例：1234567891011121314151617181920212223242526272829package mainimport ( &quot;github.com/go-vgo/robotgo&quot;)func main() &#123; // 获取屏幕上一个像素的颜色（十六进制颜色，不带 #） // 第1、2个参数：像素的座标 color := robotgo.GetPixelColor(800, 400) println(`颜色：`, color) // 获取屏幕大小 width, height := robotgo.GetScreenSize() println(`宽：`, width, ` 高：`, height) // 屏幕截图 // 第1、2个参数：截图的座标 // 第3、4个参数：截图的宽高 bitmap := robotgo.CaptureScreen(0, 0, 800, 400) // 全屏截图 // bitmap := robotgo.CaptureScreen(0, 0, width, height) // 保存截图 // 第1个参数：截图数据 // 第2个参数：保存的文件名，不支持UTF-8字符的文件名字（例如：中文） robotgo.SaveBitmap(bitmap, `screen.png`)&#125; 转载：https://zhuanlan.zhihu.com/p/140482402","categories":[{"name":"Go","slug":"Go","permalink":"http://www.lvhejin.cn/categories/Go/"},{"name":"桌面机器人","slug":"Go/桌面机器人","permalink":"http://www.lvhejin.cn/categories/Go/%E6%A1%8C%E9%9D%A2%E6%9C%BA%E5%99%A8%E4%BA%BA/"}],"tags":[{"name":"机器人","slug":"机器人","permalink":"http://www.lvhejin.cn/tags/%E6%9C%BA%E5%99%A8%E4%BA%BA/"}]},{"title":"Go语言：模拟按键操作（go-vgo/robotgo）","slug":"Go/桌面机器人/Go语言模拟按键操作","date":"2023-12-05T18:37:15.000Z","updated":"2024-01-05T17:32:17.619Z","comments":true,"path":"2023/12/05/Go/桌面机器人/Go语言模拟按键操作/index.html","link":"","permalink":"http://www.lvhejin.cn/2023/12/05/Go/%E6%A1%8C%E9%9D%A2%E6%9C%BA%E5%99%A8%E4%BA%BA/Go%E8%AF%AD%E8%A8%80%E6%A8%A1%E6%8B%9F%E6%8C%89%E9%94%AE%E6%93%8D%E4%BD%9C/index.html","excerpt":"","text":"李大钊：我们要八小时工作！八小时睡觉！另外的八小时留给自己！ ▌前置安装：1go get github.com/go-vgo/robotgo ▌键盘按下：1234567891011121314package mainimport ( &quot;github.com/go-vgo/robotgo&quot;)func main() &#123; // 模拟按下1个键：打开开始菜单（win） robotgo.KeyTap(`command`) // 模拟按下2个键：打开资源管理器（win + e） robotgo.KeyTap(`e`, `command`) // 模拟按下3个键：打开任务管理器（Ctrl + Shift + ESC） robotgo.KeyTap(`esc`, `control`, `shift`)&#125; ▌按住不放：123456789101112package mainimport ( &quot;github.com/go-vgo/robotgo&quot;)func main() &#123; // 一直按住 A键不放 robotgo.KeyToggle(`a`, `down`) // 解除按住 A键 robotgo.KeyToggle(`a`, `up`)&#125; ▌备注： 非字母数字的功能键要放置于字母键或者数字键之前 键值文档中文版（https://gitee.com/HeyDon/RobotgoChineseKeyValueDocument） 转载：https://zhuanlan.zhihu.com/p/140445455","categories":[{"name":"Go","slug":"Go","permalink":"http://www.lvhejin.cn/categories/Go/"},{"name":"桌面机器人","slug":"Go/桌面机器人","permalink":"http://www.lvhejin.cn/categories/Go/%E6%A1%8C%E9%9D%A2%E6%9C%BA%E5%99%A8%E4%BA%BA/"}],"tags":[{"name":"机器人","slug":"机器人","permalink":"http://www.lvhejin.cn/tags/%E6%9C%BA%E5%99%A8%E4%BA%BA/"}]},{"title":"Go语言：模拟鼠标操作（go-vgo/robotgo）","slug":"Go/桌面机器人/Go语言模拟鼠标操作","date":"2023-12-05T18:25:23.000Z","updated":"2024-01-05T17:32:17.619Z","comments":true,"path":"2023/12/05/Go/桌面机器人/Go语言模拟鼠标操作/index.html","link":"","permalink":"http://www.lvhejin.cn/2023/12/05/Go/%E6%A1%8C%E9%9D%A2%E6%9C%BA%E5%99%A8%E4%BA%BA/Go%E8%AF%AD%E8%A8%80%E6%A8%A1%E6%8B%9F%E9%BC%A0%E6%A0%87%E6%93%8D%E4%BD%9C/index.html","excerpt":"","text":"李大钊：我们要八小时工作！八小时睡觉！另外的八小时留给自己！ ▌前置安装：1go get github.com/go-vgo/robotgo ▌按键操作：12345678910111213141516171819202122package mainimport ( &quot;github.com/go-vgo/robotgo&quot;)func main() &#123; // 向上滚动：3行 robotgo.ScrollMouse(3, `up`) // 向下滚动：2行 robotgo.ScrollMouse(2, `down`) // 按下鼠标左键 // 第1个参数：left(左键) / center(中键，即：滚轮) / right(右键) // 第2个参数：是否双击 robotgo.MouseClick(`left`, false) // 按住鼠标左键 robotgo.MouseToggle(`down`, `left`) // 解除按住鼠标左键 robotgo.MouseToggle(`up`, `left`)&#125; ▌位置操作：123456789101112131415161718package mainimport ( &quot;github.com/go-vgo/robotgo&quot;)func main() &#123; // 将鼠标移动到屏幕 x:800 y:400 的位置（闪现到指定位置） robotgo.MoveMouse(800, 400) // 将鼠标移动到屏幕 x:800 y:400 的位置（模仿人类操作） robotgo.MoveMouseSmooth(800, 400) // 将鼠标移动到屏幕 x:800 y:400 的位置（模仿人类操作） // 第3个参数：纵坐标x 的延迟到达时间 // 第4个参数：横坐标y 的延迟到达时间 robotgo.MoveMouseSmooth(800, 400, 20.0, 200.0)&#125; ▌组合操作：12345678910package mainimport ( &quot;github.com/go-vgo/robotgo&quot;)func main() &#123; // 移动鼠标到 x:800 y:400 后，双击鼠标左键 robotgo.MoveClick(800, 400, `left`, true)&#125; ▌所在位置：1234567891011package mainimport ( &quot;github.com/go-vgo/robotgo&quot;)func main() &#123; // 获取当前鼠标所在的位置 x, y := robotgo.GetMousePos() println(`x：`, x, ` y：`, y)&#125; 转载：https://zhuanlan.zhihu.com/p/140445455","categories":[{"name":"Go","slug":"Go","permalink":"http://www.lvhejin.cn/categories/Go/"},{"name":"桌面机器人","slug":"Go/桌面机器人","permalink":"http://www.lvhejin.cn/categories/Go/%E6%A1%8C%E9%9D%A2%E6%9C%BA%E5%99%A8%E4%BA%BA/"}],"tags":[{"name":"机器人","slug":"机器人","permalink":"http://www.lvhejin.cn/tags/%E6%9C%BA%E5%99%A8%E4%BA%BA/"}]},{"title":"Golang使用正则表达式","slug":"Go/学习笔记/Golang使用正则表达式","date":"2023-12-05T14:21:04.000Z","updated":"2024-01-05T17:32:17.619Z","comments":true,"path":"2023/12/05/Go/学习笔记/Golang使用正则表达式/index.html","link":"","permalink":"http://www.lvhejin.cn/2023/12/05/Go/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Golang%E4%BD%BF%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/index.html","excerpt":"","text":"Go语言：检验身份证（包含15、18位身份证） 可以加强一下检验：https://travel.sohu.com/a/673108238_113213 123456789101112131415161718192021222324252627282930313233package mainimport &quot;regexp&quot;func main() &#123; isIdentityCard(`123456789012345`) isIdentityCard(`12345678901234567X`)&#125;// 识别身份证func isIdentityCard(identityCard string) &#123; switch len(identityCard) &#123; case 15: // 15位身份证号码：15位全是数字 result, _ := regexp.MatchString(`^(\\d&#123;15&#125;)$`, identityCard) msgIdentityCard(result, `位数：15位`) case 18: // 18位身份证：前17位为数字，第18位为校验位，可能是数字或X result, _ := regexp.MatchString(`^(\\d&#123;17&#125;)([0-9]|X|x)$`, identityCard) msgIdentityCard(result, `位数：18位`) default: msgIdentityCard(false, `身份证位数应该为：15位 与 18位`) &#125;&#125;// 自定义身份证提示信息func msgIdentityCard(result bool, msg string) &#123; if result &#123; println(`正确的身份证`, msg) &#125; else &#123; println(`错误的身份证`, msg) &#125;&#125; Go语言：检验是不是一个手机号码12345678910111213141516171819package mainimport ( &quot;regexp&quot;)func main() &#123; isMobile(`13200000000`)&#125;// 识别手机号码func isMobile(mobile string) &#123; result, _ := regexp.MatchString(`^(1[3|4|5|8][0-9]\\d&#123;4,8&#125;)$`, mobile) if result &#123; println(`正确的手机号`) &#125; else &#123; println(`错误的手机号`) &#125;&#125; Go语言：检验一段话含有中文123456789101112131415161718192021package mainimport ( &quot;regexp&quot;)func main() &#123; containsChinese(`hello world!`) containsChinese(`你好世界`)&#125;// 识别含有中文func containsChinese(str string) &#123; result, _ := regexp.MatchString(`[\\x&#123;4e00&#125;-\\x&#123;9fa5&#125;]+`, str) if result &#123; println(`这段话含有中文`) &#125; else &#123; println(`这段话没有中文`) &#125;&#125; Go语言：检验是不是一个邮箱12345678910111213141516171819package mainimport ( &quot;regexp&quot;)func main() &#123; isEmail(`123-abc@outlook.com`)&#125;// 识别电子邮箱func isEmail(email string) &#123; result, _ := regexp.MatchString(`^([\\w\\.\\_\\-]&#123;2,10&#125;)@(\\w&#123;1,&#125;).([a-z]&#123;2,4&#125;)$`, email) if result &#123; println(`正确的邮箱`) &#125; else &#123; println(`不是邮箱`) &#125;&#125; 正则表达式列表（待续…）","categories":[{"name":"Go","slug":"Go","permalink":"http://www.lvhejin.cn/categories/Go/"},{"name":"学习笔记","slug":"Go/学习笔记","permalink":"http://www.lvhejin.cn/categories/Go/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"正则表达式","slug":"正则表达式","permalink":"http://www.lvhejin.cn/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"}]},{"title":"Golang怎么调试","slug":"Go/学习笔记/Golang怎么调试","date":"2023-11-18T00:55:44.000Z","updated":"2024-01-05T17:32:17.619Z","comments":true,"path":"2023/11/18/Go/学习笔记/Golang怎么调试/index.html","link":"","permalink":"http://www.lvhejin.cn/2023/11/18/Go/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Golang%E6%80%8E%E4%B9%88%E8%B0%83%E8%AF%95/index.html","excerpt":"","text":"goland中调试的方法：1、golang软件并新建一个项目；2、编写一个完整的go代码；3、使用鼠标在代码前点击插入断点；4、右键选中新建的goland项目；5、选择“Debug”→“go build goexample”；6、最后使用【F7】进行调试即可。 具体操作步骤：1、打开golang软件，新建一个goland项目。2、在goland项目中编写一个完整的go代码。3、在每行代码前用鼠标点击插入断点。4、使用鼠标右键选中新建的goland项目。5、选中“Debug”菜单中的“go build goexample”选项。6、最后可通过键盘上的【F7】进行调试即可。 Version of Delve is too old for this version of Go【Goland Debug】报错在项目的控制台输入：go get -u github.com/go-delve/delve/cmd/dlv go install github.com/go-delve/delve/cmd/dlv 最近升级了 Go 到 1.14，发现使用 Goland debug 程序的时候报错了。完整的报错信息如下。 1234API server listening at: 127.0.0.1:53951Version of Delve is too old for this version of Go (maximum supported version 1.13, suppress this error with --check-go-version=false)Debugger finished with exit code 1 错误信息提示的很明显，也就是现在 Goland 使用的 dlv，不支持 Go &gt; 1.13 的版本，所以实际上，升级一下 dlv，然后将 Goland 使用的 dlv 路径重新指定一下就好了。 操作路径：Goland -&gt; Help -&gt; Edit Custom Properties… 重新指定： 填入：dlv.path=/Users/youName/go/bin/dlv","categories":[{"name":"Go","slug":"Go","permalink":"http://www.lvhejin.cn/categories/Go/"},{"name":"学习笔记","slug":"Go/学习笔记","permalink":"http://www.lvhejin.cn/categories/Go/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"常见问题","slug":"常见问题","permalink":"http://www.lvhejin.cn/tags/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"}]},{"title":"PHP递归统计目录下所有子目录文件大小的函数","slug":"PHP/PHP递归统计目录下所有子目录文件大小的函数","date":"2023-11-10T23:18:02.000Z","updated":"2024-01-05T17:32:17.643Z","comments":true,"path":"2023/11/10/PHP/PHP递归统计目录下所有子目录文件大小的函数/index.html","link":"","permalink":"http://www.lvhejin.cn/2023/11/10/PHP/PHP%E9%80%92%E5%BD%92%E7%BB%9F%E8%AE%A1%E7%9B%AE%E5%BD%95%E4%B8%8B%E6%89%80%E6%9C%89%E5%AD%90%E7%9B%AE%E5%BD%95%E6%96%87%E4%BB%B6%E5%A4%A7%E5%B0%8F%E7%9A%84%E5%87%BD%E6%95%B0/index.html","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950&lt;?php //phpinfo(); /** * 统计目录文件大小的函数 * @param $dir 文件路径 */function dirsize($dir)&#123; @$dh = opendir($dir); $size = 0; while($file = @readdir($dh)) &#123; if($file != &quot;.&quot; and $file != &quot;..&quot;) &#123; $path = $dir . &quot;/&quot; . $file; if(is_dir($path)) &#123; $size += dirsize($path); &#125; elseif(is_file($path)) &#123; $size += filesize($path); &#125; &#125; &#125; @closedir($dh); return $size; &#125; function add($a, $b) &#123; return $a + $b; &#125; $result = add(2, 3); echo &quot;The result of 2 + 3 is: $result&quot;; echo &quot;&lt;br&gt;&quot;; $result = call_user_func(add, 2, 3); echo &quot;The result of 2 + 3 is: &quot; . $result; echo &quot;&lt;br&gt;&quot;;echo dirsize(&quot;./&quot;);?&gt;","categories":[{"name":"PHP","slug":"PHP","permalink":"http://www.lvhejin.cn/categories/PHP/"}],"tags":[{"name":"实例代码","slug":"实例代码","permalink":"http://www.lvhejin.cn/tags/%E5%AE%9E%E4%BE%8B%E4%BB%A3%E7%A0%81/"},{"name":"统计目录大小","slug":"统计目录大小","permalink":"http://www.lvhejin.cn/tags/%E7%BB%9F%E8%AE%A1%E7%9B%AE%E5%BD%95%E5%A4%A7%E5%B0%8F/"}]},{"title":"短短七言，把人生说透了！（精辟）","slug":"教育/人生感悟/短短七言，把人生说透了！（精辟）","date":"2023-06-13T18:47:35.000Z","updated":"2024-01-05T17:32:17.651Z","comments":true,"path":"2023/06/13/教育/人生感悟/短短七言，把人生说透了！（精辟）/index.html","link":"","permalink":"http://www.lvhejin.cn/2023/06/13/%E6%95%99%E8%82%B2/%E4%BA%BA%E7%94%9F%E6%84%9F%E6%82%9F/%E7%9F%AD%E7%9F%AD%E4%B8%83%E8%A8%80%EF%BC%8C%E6%8A%8A%E4%BA%BA%E7%94%9F%E8%AF%B4%E9%80%8F%E4%BA%86%EF%BC%81%EF%BC%88%E7%B2%BE%E8%BE%9F%EF%BC%89/index.html","excerpt":"","text":"开篇人生，就是一场历练， 经历风雨，体验百态。 在这短暂的人生中， 很多事，无能为力， 我们只能坦然接受。 对于人生，顺其自然， 以下短短七言，把人生说透了， 打开看看，受益终生！ 第1言：生命，是无价的财富 人的命，不是花草， 还有来年。 仅此一次，不会再有。 一旦命没了，就长眠不醒， 世间一切，再无关系。 拥有再多，享受不到。 所以一定要珍惜自己的生命， 有命在，一切都在， 能顺利活到终老，就是无价之宝。 第2 言：健康，是一切的本钱 健康，是活着的基础， 健康，是一切的本钱。 唯有身体健康， 才能工作上班，创业赚钱。 若是没有了健康， 终日卧在病榻，与药物为伴， 无法赚钱生活，财富也会花光。 唯有守住健康，才能留住财富。 第3言：平安，是活着的保障 生命脆弱，世事无常， 天灾人祸，无法预料。 我们只是凡人，不会未卜先知， 谁也不知道明天会发生什么。 有些人，因为灾祸失去生命， 有些人，因为意外结束人生。 此生，不求大富大贵， 能避开灾祸，平安活着， 便是此生最好的福报。 第4言：心宽，是最大的快乐 心宽，就不会斤斤计较， 心宽，就不会生气动怒。 心宽能治愈痛苦，消除烦恼。 做一个心胸宽广的人， 不计较不记仇，人缘好， 不争执不吵架，心情好。 心放宽了， 纷争少了，烦恼没了， 快乐也就越来越多了。 第5言：知足，是最好的活法 人生在世，要想活好， 就要减少欲望，学会知足。 知足的人，不贪图， 知足的人，最轻松。 能看淡得失，能看轻物质， 对钱财房车，没有太多追求。 只要身体健康，家庭和睦， 工作稳定，钱财够用，就行。 第6言：珍惜，是最暖的幸福 活在世上，要想幸福， 就要学会珍惜。 珍惜时间，不挥霍； 珍惜感情，不辜负； 珍惜拥有，不攀比。 唯有好好珍惜， 才能减少遗憾和亏欠， 拥有更多，幸福更久。 第7言：活着，是最大的福气 有句话说： “不要炫耀你有多少钱， 要看你还能活多少年”。 一个人真正的成功， 并不是事业辉煌，钱财无数， 而是安然无恙的活在世上， 有机会享受生活，体验人生， 当白发苍苍之时， 身体硬朗，意识清楚， 依然活着，还在世上， 便是千金难买的福气！ 总结短短七言，句句真实， 说透了人生，了解了人生。 希望我们每一个人， 都能做到以上的七言， 把这短暂的一生， 过得无悔无憾，活得幸福圆满！ 来源：唐诗宋词古诗词","categories":[{"name":"教育","slug":"教育","permalink":"http://www.lvhejin.cn/categories/%E6%95%99%E8%82%B2/"},{"name":"人生感悟","slug":"教育/人生感悟","permalink":"http://www.lvhejin.cn/categories/%E6%95%99%E8%82%B2/%E4%BA%BA%E7%94%9F%E6%84%9F%E6%82%9F/"}],"tags":[{"name":"人生感悟","slug":"人生感悟","permalink":"http://www.lvhejin.cn/tags/%E4%BA%BA%E7%94%9F%E6%84%9F%E6%82%9F/"}]},{"title":"解决运行Hexo报错hexo：无法加载文件hexo.ps1，因为在此系统上禁止运行脚本","slug":"Hexo/常见问题/基解决运行Hexo报错hexo：无法加载文件ps1，因为在此系统上禁止运行脚本","date":"2023-06-01T22:57:01.000Z","updated":"2024-01-05T17:32:17.619Z","comments":true,"path":"2023/06/01/Hexo/常见问题/基解决运行Hexo报错hexo：无法加载文件ps1，因为在此系统上禁止运行脚本/index.html","link":"","permalink":"http://www.lvhejin.cn/2023/06/01/Hexo/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E5%9F%BA%E8%A7%A3%E5%86%B3%E8%BF%90%E8%A1%8CHexo%E6%8A%A5%E9%94%99hexo%EF%BC%9A%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E6%96%87%E4%BB%B6ps1%EF%BC%8C%E5%9B%A0%E4%B8%BA%E5%9C%A8%E6%AD%A4%E7%B3%BB%E7%BB%9F%E4%B8%8A%E7%A6%81%E6%AD%A2%E8%BF%90%E8%A1%8C%E8%84%9A%E6%9C%AC/index.html","excerpt":"","text":"无法加载文件 D:\\node\\node-v12.13.1-win-x64\\node-v12.13.1-win-x64\\hexo.ps1，因为在此系统上禁止 运行脚本。有关详细信息，请参阅 https:/go.microsoft.com/fwlink/?LinkID=135170 中的 about_Execution_Pol icies。 所在位置 行:1 字符: 1 set-executionpolicy remotesigned 加油，愿被这世界温柔以待 ^_^ 项目描述使用如下命令安装 Hexo 后运行报错： 1npm install hexo-cli -g 问题描述12345678PS C:\\Users\\87897\\Desktop\\xavierjiezou.github.io&gt; hexo shexo : 无法加载文件 C:\\Users\\87897\\AppData\\Roaming\\npm\\hexo.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 https:/go.microsoft.com/fwlink/?LinkID=135170 中的 about_Execution_Policies。所在位置 行:1 字符: 1+ hexo s+ ~~~~ + CategoryInfo : SecurityError: (:) []，PSSecurityException + FullyQualifiedErrorId : UnauthorizedAccess 解决方案设置-&gt;隐私和安全性-&gt;开发者选项-&gt;允许本地PowerShell脚本在为签名的情况下运行 引用参考:https://www.cnblogs.com/liruilong/p/14934788.htmlhttps://blog.csdn.net/qq_42951560/article/details/123678786","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://www.lvhejin.cn/categories/Hexo/"},{"name":"常见问题","slug":"Hexo/常见问题","permalink":"http://www.lvhejin.cn/categories/Hexo/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"}],"tags":[{"name":"常见问题","slug":"常见问题","permalink":"http://www.lvhejin.cn/tags/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"},{"name":"Hexo","slug":"Hexo","permalink":"http://www.lvhejin.cn/tags/Hexo/"}]},{"title":"互联网公司晋升必备的高级词汇","slug":"互联网/基本功/互联网公司晋升必备的高级词汇","date":"2023-06-01T19:24:49.000Z","updated":"2024-01-05T17:32:17.651Z","comments":true,"path":"2023/06/01/互联网/基本功/互联网公司晋升必备的高级词汇/index.html","link":"","permalink":"http://www.lvhejin.cn/2023/06/01/%E4%BA%92%E8%81%94%E7%BD%91/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E4%BA%92%E8%81%94%E7%BD%91%E5%85%AC%E5%8F%B8%E6%99%8B%E5%8D%87%E5%BF%85%E5%A4%87%E7%9A%84%E9%AB%98%E7%BA%A7%E8%AF%8D%E6%B1%87/index.html","excerpt":"","text":"近日，张一鸣讽刺“互联网八股文”，引起网友们热议： 问： 你的方案底层逻辑是什么？顶层设计在哪里？最终交付价值是什么？过程的抓手在哪里？如何保证结果闭环？和别人比你的亮点在哪里？优势在哪里？你的思考和沉淀在哪里？你有形成自己的方法论吗？换成别人不一样吗？ 答： 我们这款产品的底层逻辑是打通信息屏障，创建行业新生态。顶层设计是聚焦用户感知赛道，通过差异化和颗粒度达到引爆点。交付价值是在垂直领域采用复用打法达成持久收益。抽离透传归因分析作为抓手为产品赋能，体验度量作为闭环的评判标准。亮点是载体，优势是链路。思考整个生命周期，完善逻辑，考虑资源倾斜。方法论是组合拳达到平台化标准。 互联网行业中，有些词看似很通俗，但用起来就会让你显得逼格满满，号称“互联网八股文”，褒义称为“互联网行话”，贬义称为“互联网黑话”。阿里的员工亲切地将这些词形容成“阿里味”。 根据我在互联网公司工作多年的实际经验来看，这些词确实是日常工作中经常谈到的，屡见不鲜，早就习以为常。如果你善于灵活运用这些词，理解其中的深刻含义，洞察背后的底层逻辑，势必可以作为升值加薪的利器，提升竞争力，凸显不可替代性，完成自我价值的实现，最终找到自己的方法论。 下面的这些词汇是按照动词、形容词、名词进行分类的，你可以将它们进行自由组合，达到意想不到的功效，比如： 生命周期是发力快速响应，赋能行业引爆点。商业模式是细分载体体验度量，通过平台化和便捷性达到短平快。底层逻辑是采用玩法升级达成强化认知。复用打法进行资源倾斜为产品赋能，信息屏障作为体系的评判标准。亮点是维度，优势是闭环。聚焦整个顶层设计，扩展规模深入垂直领域。方法论是组合拳达到平台化标准。 再比如： 公司正处在变革的关键时期，需要强化集团战略，深入服务产业，加强团队协作，形成战略合力，为公司业务发展、为用户客户、为行业发展创造价值。规划加速增长的发展路径，明确一个制胜战略，提升两大实力，打赢三大必赢之战（全渠道、下沉新兴市场、平台生态），深化四大中台建设。 高级词汇二字动词落地、沉淀、给到、响应、同步、对齐、对标、迭代、优化、跟进、升级、交付、聚焦、倒逼、复盘、梳理、输出、提炼、包装、上升、 方案、摸索、踩坑、填坑、报备、串联、协同、联动、透传、打通、打平、抹平、发力、兼容、量化、细分、重塑、蓄能、引爆、挖掘、 背书、背锅、支持、支撑、协调、支援、加持、加速、共建、共创、融合、拉通、拉升、洞察、渗透、咬合、穿梭、辐射、扩展、开拓、 兜底、降级、容错、容灾、解耦、耦合、复用、封装、抽象、聚合、集成、拆解、抓包、观察、监控、上报、捕获、分发、分层、迁移、 回溯、回归、回流、回跳、赋能、通晒、吃透、死磕、树立、跨界、共情、演绎、画饼、打造、反哺、输血、造血、造势、造市、造事、 下沉、拉新、转化、留存、促活、付费、营收、盈利、获客、邀请、助力、激励、激活、推广、投放、导流、覆盖、曝光、裂变、增长、 优秀、感恩、比心、笔芯、下跪、致敬、订阅、认证、推送、唤醒、流失、召回、授权、接入、铸造、构筑、构建、搭建、布局、组局、 摸鱼、划水、众筹、收割、共享、重组、收口、转型、围绕、出击、证言、确认、明确、评估、评审、务实、夯实、预判、预言、变迁、 返佣、深入、打磨、攻坚、击穿、破冰、破题、解题、破圈、破局、定量、定性、制约、约束、触及、触达、触发、操盘、思考、反思、 精简、深耕、突围、补位、抽离、履约、进化、进军、起飞、all in。 二字形容词皮实、本分、重磅、垂直、真香、自洽、精准、持续、灵活、稳定、可控、活跃。 二字名词抓手、漏斗、中台、平台、闭环、风口、打法、玩法、矩阵、纽带、刺激、规模、场景、渠道、入口、维度、格局、形态、生态、体系、 认知、体感、感知、心智、调性、战役、合力、心力、赛道、基石、基因、因子、模型、通道、链路、水位、水准、姿态、卡点、卡位、 头部、腰部、踝部、痛点、爽点、痒点、全域、公域、私域、本我、自我、超我、蓝海、红海、纵向、横向、上限、下限、上游、下游、 阈值、场域、架构、系统、标配、长尾、态势、锚点、标杆、壁垒、变量、期权、边界、品牌、阵地、高地、洼地、高空、革命、变革、 内卷、外包、福报、脑暴、脑洞、圈层、层级、段位、环节、困局、话术、文案、议程、公关、PR稿、配称、力场、魔方、触点、势能、 流量、资源、排期、延期、弹窗、浮层、引导、蒙层、幕帘、遮罩、埋点、坑位、楼层、按钮、推送、红包、峰值、漏洞、风险、瓶颈、 策略、价值、成本、复利、人性、利器、深度、玩家、小白、韭菜、羊毛、福利、套路、情怀、标准、规范、报备、社群、产业、载体、 服务、粘性、属性、地域、终端、版本、口碑、指标、年框、试点、母体、空白、银弹。 三字动词对一下/碰一下/过一下、抢品类/卡认知/占场景、观行业/明竞争/洞自身、开场子/提调子、冷启动、秀肌肉、借东风、断舍离、 薅羊毛、砍一刀、走出去、讲故事。 三字形容词扁平化、差异化、平台化、结构化、精细化、短平快、常态化、强依赖、不可控、有风险。 三字名词感知度、颗粒度、方法论、组合拳、引爆点、护城河、影响力、资源位、优先级、制高点、 可用性、易用性、稳定性、便捷性、耦合性、一致性、系统性、端到端、点对点、点线面、 上半场、下半场、主战场、人货场、基本面、基本盘、操盘手、进化论、解释权、最优解、 执行力、驱动力、鄙视链、生态链、生态圈、生态位、全场景、全渠道、全方位、全媒体、 流量池、天花板、传话筒、转化率、活跃度、颗粒感、登云梯、冲击力、视觉锤、孵化器、 新零售、新物种、新品牌、新篇章、新局势、新赛道、新势能、新国货、新国潮、新动力、 同理心、气氛组、竞争力、存在感、认同感、参与感、归属感、使命感、价值观、忠诚度、 预热期、高峰期、高潮期、上升期、瓶颈期、大数据、云计算、区块链、比特币、虚拟币、 天使轮、自媒体、新媒体、价格门、超预期、小前台、大中台、凝聚力、向心力。 四字动词支棱起来、快速响应、小步快跑、价值转化、强化认知、资源置换、资源倾斜、资源配置、完善逻辑、去中心化、 渠道下沉、用户下沉、降维打击、体验度量、高频触达、快速迭代、持续迭代、持续集成、持续交付、持续观察、 躬身入局、顺势而为、打破结界、升维定位、有机结合、起承转合、存量维持、增量博弈、心智角逐、抽离透传、 拨冗参会、反复确认、综合评估、刻意练习、打破制约、绝境求生、品牌露出、拥抱变化、重新定义、借势营销、 内容创业、归因分析、逻辑推理、建立范式、总结沉淀、解决问题、占领心智、高举高打、高开低走、高台跳水、 深入产业、拉齐水位、全情投入、如何收口、全面封锁、协同作战、剑走偏锋、弹射起飞。 四字形容词结果导向、业务导向、资源紧张、人力不足、体感不好、风险可控、逻辑自洽、品效合一、全球领先、 人无我有/人有我优/人优我变、势如破竹、势不可挡、石破天惊。 四字名词生命周期、复用打法、商业模式、平台战略、集团战略、战略引擎、关键路径、决策路径、天使投资、盈利模式、 底层逻辑、顶层设计、饥饿营销、行业壁垒、下沉市场、消费认知、人工智能、赛博朋克、智慧城市、解决方案、 知识付费、私域流量、交付价值、时间价值、共享经济、通证经济、中央厨房、先发优势、真实场景、临门一脚、 真香定律、正态分布、幂律分布、二八定律、长尾理论、叠加效应、马太效应、沉没成本、边际成本、机会成本、 偏好植入、蚂蚁市场、场景占位、产业集群、产业服务、标杆市场、心动情境、利基市场、第二曲线、垂直领域、 可持续性、可替代性、认知优势、新增长点、颠覆态势、最高规制、三位一体、资深玩家、不破不立、精神SPA、 用户心智、用户粘性、用户体验、用户认知、用户画像、用户调研、重度用户、沉默用户、活跃用户、用户黏性、 千人千面、千人一面、信息茧房、流量红利、流量为王、价格歧视、意识形态、心理账户、情绪G点、品牌势能、 服务产业、关键时期、沟通协作、战略合力、品牌航母、品类战舰、行军路线、产品尖兵、拳头产品、超级符号、 挽留弹窗、时间窗口、定性定量、战略支点、声音印记、社交货币、付费社群、神交已久、财务自由。 五字动词大数据分析、大数据杀熟、延迟满足感、地毯式轰炸、饱和式攻击、四两拨千斤、开辟新路径、建立新习惯。 五字形容词用户无感知、叫好又叫座、优先级很高、拉新成本高、打开率高、留存率高、活跃度高。 五字名词颠覆式创新、连续创业者、投入产出比、互联网思维、互联网红利、国民总时间、最后一公里、海豚湾模式、最大公约数、现象级事件、 沉浸式体验、用户忠诚度、自媒体矩阵、病毒式营销、风口上的猪、战略性投资、战略性亏损、系统性风险。 六字动词不跟风要造风、多维矩阵闭环、打开销售通路。 六字名词天时地利人和、品牌记忆系统、心智切割利器。 互联网岗位的口头禅各个岗位的口头禅 产品岗：没排上期、下个版本。 设计岗：别戳屏幕。 研发岗：实现不了。 测试岗：醒醒，有bug。 数据岗：你们要这个干啥？ 运维岗：磁盘满了、网络抖动。 程序员终极大法：删库跑路。 法务岗：这个有风险。 公关岗：建议别做。 品牌岗：预算多少？ 财务岗：还没到你。 采购岗：按流程走。 策划：客户不接受。 行政岗：我去问问那谁。 客服岗：刚遇到一傻X。 市场运营岗：辛苦辛苦、好的收到、求求你啦、谢谢爸爸、感恩的心、给大佬们下跪。 吉祥三宝 产品有三宝：弹窗、浮层加引导。 设计有三宝：透明、阴影加圆角。 运营有三宝：短信、推送加红包。 程序员有一宝：这个做不了。 程序员的口头禅 这个做不了。 技术上实现不了。 又不是不能用。 再刷新下试试。 重启试试。 你忘记清缓存了兄弟。 在我电脑上是正常的啊。 我这儿没问题啊。 这不是BUG。是配置问题，要不就是网络问题。 卧槽这个好NB，我研究一下。 只是改一行代码，不会对程序产生影响的，放心。 程序没问题，你是不是改什么了？重演一下我康康。 卧槽，还有这种操作？！ 这个数据库是TM谁设计的啊？ 不用担心，这次肯定没问题了。 已经做好了，但还有些细节要调整下（其实还有一半没做）。 这个功能下个版本再做吧。 这个不用改。 这个影响不大，不改。 这个风险太大，不改。 卧槽！为啥这个程序跑起来了？ 卧槽！为啥这个程序跑不起来？ 遇到bug时：”咦，这不科学啊！” 解决bug之后：”我TM真是个天才！” 小红：“我电脑出问题了，帮我看看好吗？”。程序员：“好。回到桌面，打开我的电脑。”小红：“你的电脑，我怎么打开？” 程序员：“我去相亲网站找女朋友了”。小明：“找到了吗？”程序员：“找到了他们页面的一个bug”。 产品经理：“这个什么时候能做好？”程序员：“今天下班前做好”。第二天早上。产品经理问：“这个怎么还没做好？”程序员：“我还没下班呢！” 各种称呼和头衔各种称呼小白、大牛、大佬、巨佬、基佬、老板、各位同学、小伙伴们、老师、师傅、靓仔、靓女、小哥哥、小姐姐、宝宝、亲爱的、亲、亲亲、宝贝。 各种头衔（title） 首席XX官：子虚乌有，凭空捏造。 XX产品负责人：其实是个小小的产品岗。 XX业务负责人：其实是个小小的运营岗。 新人：我是小白，啥都不懂。搞砸了别怪我。 资深开发工程师：其实是个老油条。 架构师：平时不写代码。 专家：自封的砖家。 委员会主席：光杆司令。 Python 教父：方便卖课。 布道师：到处演讲，跟传销似的。 互联网人的焦虑词汇搞副业、搞钱、做微商、斜杠青年、知识付费、收智商税、割韭菜、交学费、这碗鸡汤我干了、睡后收入、如何实现财务自由？ 互联网黑话大全互联网招聘和加班黑话 能承受较大的工作压力：加班。 抗压能力强：加班+背锅。 有强烈的责任心：活没干完不准走。 工作有激情：自觉加班还要特美。 有强烈的上进心：干完工作就加班去干其他工作。 喜欢有挑战性的工作：加班，前人留的坑不少。 从底层做起：螺丝钉工作，搬砖。 弹性工作制：无偿加班。 期权：发不起工资，画个饼。 我们每周都有果盘：可能是公司唯一的福利了。 工资面议：工资太低，不好意思写上去。 核心团队来自 BAT：你不是BAT的，所以你不是核心。 本分：老实加班。 双休：工作日加班。 团队氛围好：大家一起加班。 大小周：一周单休，一周双休。 PDD重新定义大小周：小周996，大周007。 不提倡加班：该加还得加，加班是因为你工作效率低，不是安排工作多。 不强制加班：别人都没走，我也不能走。 阶段性加班：有时候会加得很猛。 偶尔会忙：以后忙了你别抱怨，提醒过了。 领导安排的其他任务：我叫你干啥你就干啥。 上不封顶：下不保底。 上升空间大：薪资起点低。 高提成：无底薪。 提供住宿：公司在信号都不稳定的荒郊野岭。 我们是扁平化管理：公司没几个人。 团队年轻有活力：都没啥工作经验。 新员工培训：入职后的第一次洗脑。 军训：身体和灵魂的双重摧残。 薪酬管理：算考勤、算工资、做核对、发工资。 年底双薪：13 薪。 13 薪起：别想了，就是13 薪。 结果导向：只看KPI。 OKR：KPI做不好的借口。 人员优化：大裁员。 人才盘点：末位淘汰。 互联网公司老板黑话 你来我办公室一下：老子又想到了绝妙的idea。 得专注用户体验：界面画的好看点。 产品气质不够年轻：饱和度通通调最高。 产品气质不够成熟：界面通通做成黑的。 产品不够大气：我也不知道哪不好反正就是不好。 要精致的感觉：抄苹果。 要利用用户的固有习惯：抄同行。 要追求流行设计趋势：抄微信/淘宝/拼多多… 你说的这是另一个问题：我说的才是对的。 你说的跟我是一个意思：我说的才是对的。 我们讨论的是两件事情：我说的才是对的。 我们是弹性工作制：加班不给钱。 all in：永无止境地加班，007加班。 扁平化管理：领导和你坐一屋，盯着你干活。 我们会给你很多期权：不会给你很多工资。 当务之急是抢占市场：赶紧狂发补贴。 快速建立用户群体的壁垒：快拉他们进微信群。 要让用户产生自发传播：快让他们转发朋友圈。 为了健康发展我们要启动下轮融资：公司没钱了。 我们辞退了一些跟不上公司发展的同事：公司没钱了。 打补贴战其实不符合我们公司的理念：公司没钱了。 我们已经建立了客户基础：我们拉了个微信群。 我们已经建立了庞大的客户基础：一个群装不下，我们有两个微信群。 已经实现了O2O模式：我们有几个送外卖的。 从细分市场干起：我们的外卖只送这一片。 采用了大数据技术：日志没清空过，都攒着呢，有什么用我不知道。 采用了云技术：在机房租了几台服务器。 我们在寻找合伙人：就差一个程序员了。 我们市场前景巨大：就差一个产品经理了。 我们有绝妙的idea：就差一个设计了。 我们已经准备好了：就差风投来撒钱了。 我们正在全力占领市场：压根没想过怎么盈利。 我们非常欣赏您的投资理念：风投你该来B轮了。 互联网产品黑话 快速迭代：边做边改。 快速响应：立即回复”好的，收到“。 打磨：反复修改。 体感不好：印象很差。 用户无感知：感觉不到，毫无水花，一片寂静。 解决用户痛点：加个按钮。 延迟满足感：这项目不赚钱。 场景：给产品编几个借口。 对齐：项目成员之间的信息同步（最好听我的）。 拉起水位：保持一致标准。 玩法：方案。 玩家：方案要忽悠的对象。 打法：想个招。 升级：涨价。 中央厨房：我啥都能做，但啥也做不好。 上升高度：问题升级，找老板谈。 聚焦：钱只够干一件事，多了没有。 落地：缩水执行PPT上画的饼。 高空：饼画得太大，没法执行。 人人都是产品经理：是个人就能当产品经理。 人人都是产品经理：谁都能指手画脚。 人人都是产品经理：一个能打的都没有。 产品经理黑话 这周没有申请到资源位：这个暂时不做了。 这是老板们要求的：我只是个传话筒。 老板明确说要这么做：我不这么说，你能听我的吗？ 这个需求很简单：怎么实现我不管。 怎么实现我不管：明天上线。 产品设计应该大道至简：复杂的我也不会。 用户都应该用完即走：回不回来我不管。 这是常规的典型的做法：我抄的微信/淘宝/滴滴… 需求要抓住人性：多放美女照片。 要考虑用户的使用场景：加个夜间模式。 商业模式要形成闭环：放东西线上卖。 要搭建完善的用户运营体系：做个积分商城。 要有社交元素促进活跃度：塞一个IM。 没有用户是因为没有做好运营：不是我的锅。 体验不好是因为技术实现问题：不是我的锅。 界面难看是因为设计水平不行：反正都不是我的锅。 在吗：要改需求了。 小哥哥最近累吗？要不要喝奶茶：要改需求了。 下次肯定不改了：这次先改了再说。 你的建议很好我们已经想到了：我擦，说得真有道理赶紧提需求。 你的建议我们会考虑的：这建议好像有点蠢。 你的建议很有启发性：哈哈哈，什么玩意儿。 互联网运营、营销黑话 助力：帮忙砍一刀。 拉新成本高：实在刷不动粉了。 资源置换：东西随便拿，就是没钱。 私域流量：朋友圈。 社群：拉群，打广告。 联动：三个号以上相互@。 话术：沟通前提前写好脚本。 降维打击：无限变low，没有底线。 下沉：开拓农村市场，刷墙、拉横幅。 抓手：切入点。 年框：你是对方一整年的爸爸。 公关：请客送礼。 不予置评：我默认了。 背书：找KOL发广告。 KOC：普通人，2块钱就能发广告。 头部：处于行业鄙视链上游、百万预算才敢请的KOL。 腰部：处于行业鄙视链下游、30w预算才敢请的KOL。 裸部：行业里没人知道的、以资源置换为主的KOL。 策略：大型PPT前10页的吹牛阶段。 关键路径：重点搞定。 程序员黑话 透传：啥都不做，只负责原封不动地转发。 是我这边做：是我们团队做，但不是我做。 全栈工程师：全干工程师。 你这个需求不清晰：我不想做。 目前技术实现不了：我不想做。 现在服务器性能跟不上：我不想做。 我的排期排满了：我不想做。 我有优先级更高的任务：我不想做。 我今晚有事：我今天不想加班。 我回去评估一下技术难度：先拖两天。 下个版本再做吧：根本就不想做。 去找老板/项目经理排期：我不想做。 你怎么老改需求啊：X了个X。 你怎么设计得这么复杂啊：X了个X。 怎么就给这么短时间啊：X了个X。 需求文档没写这个啊：你怎么又改需求？ 在吗：要延期了。 下次肯定不延期了：这次先应付了再说。 你退后点说话：口水别喷到我机械键盘上。 你告诉我，我自己输入：你别用脏手碰我的机械键盘。 那个bug没问题啊，你再试试：刚偷偷改完这个bug。 你再刷新下试试：刚偷偷改完这个bug。 正在改：忘了有这回事了。 需求太不合理：这逻辑不好做。 别人家的实现机制不一样：我不会做。 已经做好了，但还有些细节要调整下：其实还有一半做。 产品逻辑不对：傻X，还不如我上。 最近老加班：老板该加工资了。 你确定有这个需求吗：做出来没人用，老子跟你拼了。 我这儿没问题啊：到底会不会用我的程序啊。 我测试没问题啊：到底会不会用我的程序啊。 我在调试程序：我没时间理你。 你怎么还在自学Python啊：PHP才是最好的语言。 你怎么还用 Word 啊：Markdown 才是最好的写作格式。 你怎么还在用 ThinkPad 啊：Mac 才是最好的电脑。 新媒体、新职业黑话 自媒体：开公众号。 内容创业：写公众号。 进军移动互联网：注册订阅号。 全媒体：开了公众号和微博，也当了UP主，但就是没人看。 致敬：抄袭。 自由职业：无业游民。 数字游民：在家玩电脑。 交学费：赔钱。 跨界：不务正业。 经济金融、电子商务黑话 割韭菜：交钱。 收智商税：交钱。 交学费：交钱。 P2P：高利贷。 通证经济：发代币、发电子代金券，跟Q币差不多。 做微商：微信群、朋友圈里带货。 新零售：开网店。 B2C：开淘宝店。 P2C：厂家直销、工厂直供。 C2C：没有营业执照，自己卖点东西。 B2B：不卖东西给个人，只卖给公司。 Sass：给企业做软件。比如：ERP系统（企业资源管理）、OA系统（办公自动化系统）、CRM系统（客户关系管理系统）。 价格歧视：你买东西比别人贵。 创业、行业黑话 互联网思维：忽悠思维，把牛逼吹上天。 智慧城市：路口装摄像头。 人工智能：自动回复。 大数据分析：收集用户隐私。 社区团购：网上买菜，第二天去楼下小卖部自提。 闭环：逻辑自洽，骗不了自己，但骗得了投资人。 变革：再次折腾。 转型：快不行了。 上半场：还没开始呢。 下半场：也快不行了。 共享经济：分时租赁。 连续创业者：多次创业失败。 联合创始人：老员工。 颠覆式创新：捣乱。 新三板：在国内上市。 传统企业转型：被忽悠。 发力：开始烧钱。 赋能：扶你一把。 众筹：水滴筹。 情怀：装逼。 孵化器：办公室是租的。 路演：到处展示PPT里画的饼。 O2O闭环：卖煎饼扫码付款。或者开个淘宝店，在农民房楼下还有个小卖部。 天使投资：借钱。 风险投资：借钱不还。 风口：最容易骗到的投资。 垂直领域：业务很小众。 盈利模式：其实赚不到钱但听上去可以赚钱的方法。 新物种：以前的模式没成功，换个新名字再搞一遍。 知识付费：缓解焦虑。 不吃你这一套：我知道，你也不吃我这一套。 为什么感觉每次团建过后都有很多人离职？时间：一般选在周末等非工作时间。 地点：市内或就近不超过两百公里的邻近城市，甚至乡村农家乐乃至山里。 内容：顶着大太阳玩大学生军训破冰那套。 住宿：当天来回，或住一天快捷酒店（帐篷也是有可能的）。 伙食：普遍为自己采购材料的烧烤，吃完还得拉一天肚子。 性质：虽然是做公司的事，但没有产生实际工作量，所以依然算放假。 请假：不允许。 员工A感受：团建还要在外地远程加班，还不如直接回公司。 员工B感受：公司的加班制度本来就是大小周，那团建就导致了持续单休。实在没时间。 员工C感受：花这么多冤枉钱，还不如直接加薪。别整这些花里胡哨的。 老板期待效果：公司内部大团结，生产力极大的提高，用人成本极大的降低，免费996向义务007过渡。 实际效果：加速了员工的离职计划，激活部分没有离职计划的员工开启离职计划。 员工结论：实在受不了。 老板结论：下次继续。 互联网日常沟通话术 好哒：草。 好的：我整个人都不好了。 收到：沙雕半夜发通知。 欢迎：又新来一个sb。 谢谢：md，下次赶紧自己发给我，别让老子亲自来要。 在吗：又来活了。 在：有话赶紧说。 稍等哈：现在没空理你。 哈哈：不知道该回复什么。 哈哈哈哈哈：你这话我没法接。 我和xx沟通一下：就知道和你沟通没用。 加油你可以的：我觉得你不行。 咱们拉个群吧：和你沟通真费劲。 棒棒哒：这点小事搞这么久？ 我今天比较忙：我就是不想理你。 优秀：你做完我就不用做了，太好了。 过分优秀：随便夸一下你，别当真。 好的：现在不想和你说话。 收到：现在没空看。 一会儿看看：过会儿我就忘了。 争取今天搞定：加班！ 在做了：进度0％。 快搞完了：进度1%。 在路上了：还没出发。 对一下：开会。 碰一下：开会。 过一下：开会。 分享：开会/脑暴。 给到：给了，用不了不怪我。 咬合：撕逼。 同步：把资料发给一起干活的。 跟进（push）：催着同事出活儿。 反向push：先一步催促那些催你的同事。 整合：东拼西凑。 输出：交一份文档。 给到：给了，如果出事，那可不怪我。 交付：都交接给你，我不用管了。 方法论：过往经验总结的套路。 接地气：别太洋气。 水位：标准。 通晒：公布给大家看。 有案例可以参考吗：有现成的可以抄吗？ 我建议不改：你行你上啊。 不要再改了：你到底行不行啊？ 你是专业的：终于把锅甩出去了。 领导很重视：打死都得做出来。 你可以提意见：你说的对，但是我不会听。 我没啥意见：你开心就好。 这个选题可以先放一放：八成要凉，别想做了。 这个我回去再确认一下：别说了，老子没想到。 我再看看：是我的问题，但我不想承认。 这个是已知问题：我早就知道这个问题，但就是不想改。 这个是历史遗留问题：不是我的锅，我接手之前就有这个问题。 我有个疑问：你说的是什么辣鸡玩意？ 最近挺忙的：休想甩锅给我。 我有个想法：虽然我说的不一定是对的，但是你别bb，照这样做就好了。 预算不多：对不起其实根本就没预算。 你先做吧：虽然我不知道要做什么，但是你做出来之后我就知道自己不想要了。 差点感觉：怎么看都觉得缺了点东西，具体什么我也说不出，反正你改就是了。 就这样吧：虽然我很不满意，但是你改了这么多次，内心过意不去。 辛苦了：看着是关切的话，一方面是假装的问候，另一方面是想让你继续更辛苦地听我使唤。 财务不在：我有拖延症，根本就没走到财务那个流程。 通哈膨胀 哈：无语。 哈哈：老年人。 哈哈哈：敷衍。 哈哈哈哈：整数强迫症。 哈哈哈哈哈：你这话我没法接。 哈哈哈哈哈哈：是朋友。 哈哈哈哈哈哈哈：念诗。 哈哈哈哈哈哈哈哈：觉得有趣。 哈哈哈哈哈哈哈哈哈：喜欢你。 哈哈哈哈哈哈哈哈哈哈：是真爱。 哈哈哈哈哈哈哈哈哈哈哈：有求于你。 哈哈哈哈哈哈哈哈哈哈哈哈：沙雕。 最后一段欢迎留言补充。 可以看出，使用越来越抽象和高级的词汇，是一种寻求方法论的倾向。但实际上，我们的很多重要决策并不需要那么复杂的描述。很多重要的判断是通过对用户和事实的观察做出的，保持敏感的同理心和开阔的想象力更重要。 也正如张小龙所说： 第一，需求不来自调研；第二，需求不来自分析；第三，需求不来自讨论；第四，需求不来自竞争对手。需求只来自你对用户的了解。 最后不要忘记：产品和需求不来自造词。 转载：https://zhuanlan.zhihu.com/p/154331284","categories":[{"name":"互联网","slug":"互联网","permalink":"http://www.lvhejin.cn/categories/%E4%BA%92%E8%81%94%E7%BD%91/"},{"name":"基本功","slug":"互联网/基本功","permalink":"http://www.lvhejin.cn/categories/%E4%BA%92%E8%81%94%E7%BD%91/%E5%9F%BA%E6%9C%AC%E5%8A%9F/"}],"tags":[{"name":"开心一刻","slug":"开心一刻","permalink":"http://www.lvhejin.cn/tags/%E5%BC%80%E5%BF%83%E4%B8%80%E5%88%BB/"}]},{"title":"体验而已","slug":"教育/人生感悟/体验而已","date":"2023-06-01T19:15:30.000Z","updated":"2024-01-05T17:32:17.651Z","comments":true,"path":"2023/06/01/教育/人生感悟/体验而已/index.html","link":"","permalink":"http://www.lvhejin.cn/2023/06/01/%E6%95%99%E8%82%B2/%E4%BA%BA%E7%94%9F%E6%84%9F%E6%82%9F/%E4%BD%93%E9%AA%8C%E8%80%8C%E5%B7%B2/index.html","excerpt":"","text":"今晚刷抖音，一则视频告诉我，人在遇到坎坷的时候需要念一句咒语，叫做“体验而已” 你成功了（体验而已）你失败了（体验而已） 你结婚了（体验而已）你离婚了（体验而已） 你再婚了（体验而已）你又离了（体验而已） 是不是这样想就感觉通透了？ 人生在世不称意十有八九，生不带来，死不带去，活一辈子唯有体验而已。 所以吧，珍惜当下，好好生活。 转载：https://www.jianshu.com/p/3d28c7ef1d3b","categories":[{"name":"教育","slug":"教育","permalink":"http://www.lvhejin.cn/categories/%E6%95%99%E8%82%B2/"},{"name":"人生感悟","slug":"教育/人生感悟","permalink":"http://www.lvhejin.cn/categories/%E6%95%99%E8%82%B2/%E4%BA%BA%E7%94%9F%E6%84%9F%E6%82%9F/"}],"tags":[{"name":"人生感悟","slug":"人生感悟","permalink":"http://www.lvhejin.cn/tags/%E4%BA%BA%E7%94%9F%E6%84%9F%E6%82%9F/"}]},{"title":"Visual Studio Code 快捷键大全（最全）","slug":"VsCode/VisualStudioCode快捷键大全（最全）","date":"2023-03-24T19:15:46.000Z","updated":"2024-01-05T17:32:17.647Z","comments":true,"path":"2023/03/24/VsCode/VisualStudioCode快捷键大全（最全）/index.html","link":"","permalink":"http://www.lvhejin.cn/2023/03/24/VsCode/VisualStudioCode%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%A4%A7%E5%85%A8%EF%BC%88%E6%9C%80%E5%85%A8%EF%BC%89/index.html","excerpt":"","text":"使用vsCode配置Go开发环境 使用vsCode配置Go开发环境 Visual Studio Code 是一款优秀的编辑器，对于开发前端带来了很多便利，熟悉快捷键的使用，能够起到事半功倍的作用，提高工作效率。下面就Visual Studio Code常用快捷键的一些介绍，若有不到之处请留言指出，我会及时纠正。 通用 General 按 Press 功能 Function Ctrl + Shift + P，F1 显示命令面板 Show Command Palette Ctrl + P 快速打开 Quick Open Ctrl + Shift + N 新窗口/实例 New window/instance Ctrl + Shift + W 关闭窗口/实例 Close window/instance 基础编辑 Basic editing 按 Press 功能 Function Ctrl+X 剪切行（空选定） Cut line (empty selection) Ctrl+C 复制行（空选定）Copy line (empty selection) Alt+ ↑ / ↓ 向上/向下移动行 Move line up/down Shift+Alt + ↓ / ↑ 向上/向下复制行 Copy line up/down Ctrl+Shift+K 删除行 Delete line Ctrl+Enter 在下面插入行 Insert line below Ctrl+Shift+Enter 在上面插入行 Insert line above Ctrl+Shift+\\ 跳到匹配的括号 Jump to matching bracket Ctrl+] / [ 缩进/缩进行 Indent/outdent line Home 转到行首 Go to beginning of line End 转到行尾 Go to end of line Ctrl+Home 转到文件开头 Go to beginning of file Ctrl+End 转到文件末尾 Go to end of file Ctrl+↑ / ↓ 向上/向下滚动行 Scroll line up/down Alt+PgUp / PgDown 向上/向下滚动页面 Scroll page up/down Ctrl+Shift+[ 折叠（折叠）区域 Fold (collapse) region Ctrl+Shift+] 展开（未折叠）区域 Unfold (uncollapse) region Ctrl+K Ctrl+[ 折叠（未折叠）所有子区域 Fold (collapse) all subregions Ctrl+K Ctrl+] 展开（未折叠）所有子区域 Unfold (uncollapse) all subregions Ctrl+K Ctrl+0 折叠（折叠）所有区域 Fold (collapse) all regions Ctrl+K Ctrl+J 展开（未折叠）所有区域 Unfold (uncollapse) all regions Ctrl+K Ctrl+C 添加行注释 Add line comment Ctrl+K Ctrl+U 删除行注释 Remove line comment Ctrl+/ 切换行注释 Toggle line comment Shift+Alt+A 切换块注释 Toggle block comment Alt+Z 切换换行 Toggle word wrap 导航 Navigation 按 Press 功能 Function Ctrl + T 显示所有符号 Show all Symbols Ctrl + G 转到行… Go to Line… Ctrl + P 转到文件… Go to File… Ctrl + Shift + O 转到符号… Go to Symbol… Ctrl + Shift + M 显示问题面板 Show Problems panel F8 转到下一个错误或警告 Go to next error or warning Shift + F8 转到上一个错误或警告 Go to previous error or warning Ctrl + Shift + Tab 导航编辑器组历史记录 Navigate editor group history Alt + ←/→ 返回/前进 Go back / forward Ctrl + M 切换选项卡移动焦点 Toggle Tab moves focus 搜索和替换 Search and replace 按 Press 功能 Function Ctrl + F 查找 Find Ctrl + H 替换 Replace F3 / Shift + F3 查找下一个/上一个 Find next/previous Alt + Enter 选择查找匹配的所有出现 Select all occurences of Find match Ctrl + D 将选择添加到下一个查找匹配 Add selection to next Find match Ctrl + K Ctrl + D 将最后一个选择移至下一个查找匹配项 Move last selection to next Find match Alt + C / R / W 切换区分大小写/正则表达式/整个词 Toggle case-sensitive / regex / whole word 多光标和选择 Multi-cursor and selection 按 Press 功能 Function Alt +单击 插入光标 Insert cursor Ctrl + Alt +↑/↓ 在上/下插入光标 Insert cursor above / below Ctrl + U 撤消上一个光标操作 Undo last cursor operation Shift + Alt + I 在选定的每一行的末尾插入光标 Insert cursor at end of each line selected Ctrl + I 选择当前行 Select current line Ctrl + Shift + L 选择当前选择的所有出现 Select all occurrences of current selection Ctrl + F2 选择当前字的所有出现 Select all occurrences of current word Shift + Alt + → 展开选择 Expand selection Shift + Alt + ← 缩小选择 Shrink selection Shift + Alt + （拖动鼠标） 列（框）选择 Column (box) selection Ctrl + Shift + Alt +（箭头键） 列（框）选择 Column (box) selection Ctrl + Shift + Alt + PgUp / PgDown 列（框）选择页上/下 Column (box) selection page up/down 丰富的语言编辑 Rich languages editing 按 Press 功能 Function Ctrl + 空格 触发建议 Trigger suggestion Ctrl + Shift + Space 触发器参数提示 Trigger parameter hints Tab Emmet 展开缩写 Emmet expand abbreviation Shift + Alt + F 格式化文档 Format document Ctrl + K Ctrl + F 格式选定区域 Format selection F12 转到定义 Go to Definition Alt + F12 Peek定义 Peek Definition Ctrl + K F12 打开定义到边 Open Definition to the side Ctrl + . 快速解决 Quick Fix Shift + F12 显示引用 Show References F2 重命名符号 Rename Symbol Ctrl + Shift + . /， 替换为下一个/上一个值 Replace with next/previous value Ctrl + K Ctrl + X 修剪尾随空格 Trim trailing whitespace Ctrl + K M 更改文件语言 Change file language 编辑器管理 Editor management 按 Press 功能 Function Ctrl+F4, Ctrl+W 关闭编辑器 Close editor Ctrl+K F 关闭文件夹 Close folder Ctrl+\\ 拆分编辑器 Split editor Ctrl+ 1 / 2 / 3 聚焦到第1，第2或第3编辑器组 Focus into 1st, 2nd or 3rd editor group Ctrl+K Ctrl+ ←/→ 聚焦到上一个/下一个编辑器组 Focus into previous/next editor group Ctrl+Shift+PgUp / PgDown 向左/向右移动编辑器 Move editor left/right Ctrl+K ← / → 移动活动编辑器组 Move active editor group 文件管理 File management 按 Press 功能 Function Ctrl+N 新文件 New File Ctrl+O 打开文件… Open File… Ctrl+S 保存 Save Ctrl+Shift+S 另存为… Save As… Ctrl+K S 全部保存 Save All Ctrl+F4 关闭 Close Ctrl+K Ctrl+W 关闭所有 Close All Ctrl+Shift+T 重新打开关闭的编辑器 Reopen closed editor Ctrl+K 输入保持打开 Enter Keep Open Ctrl+Tab 打开下一个 Open next Ctrl+Shift+Tab 打开上一个 Open previous Ctrl+K P 复制活动文件的路径 Copy path of active file Ctrl+K R 显示资源管理器中的活动文件 Reveal active file in Explorer Ctrl+K O 显示新窗口/实例中的活动文件 Show active file in new window/instance 显示 Display 按 Press 功能 Function F11 切换全屏 Toggle full screen Shift+Alt+1 切换编辑器布局 Toggle editor layout Ctrl+ = / - 放大/缩小 Zoom in/out Ctrl+B 切换侧栏可见性 Toggle Sidebar visibility Ctrl+Shift+E 显示浏览器/切换焦点 Show Explorer / Toggle focus Ctrl+Shift+F 显示搜索 Show Search Ctrl+Shift+G 显示Git Show Git Ctrl+Shift+D 显示调试 Show Debug Ctrl+Shift+X 显示扩展 Show Extensions Ctrl+Shift+H 替换文件 Replace in files Ctrl+Shift+J 切换搜索详细信息 Toggle Search details Ctrl+Shift+C 打开新命令提示符/终端 Open new command prompt/terminal Ctrl+Shift+U 显示输出面板 Show Output panel Ctrl+Shift+V 切换Markdown预览 Toggle Markdown preview Ctrl+K V 从旁边打开Markdown预览 Open Markdown preview to the side 调试 Debug 按 Press 功能 Function F9 切换断点 Toggle breakpoint F5 开始/继续 Start/Continue Shift+F5 停止 Stop F11 / Shift+F11 下一步/上一步 Step into/out F10 跳过 Step over Ctrl+K Ctrl+I 显示悬停 Show hover 集成终端 Integrated terminal 按 Press 功能 Function Ctrl+` 显示集成终端 Show integrated terminal Ctrl+Shift+` 创建新终端 Create new terminal Ctrl+Shift+C 复制选定 Copy selection Ctrl+Shift+V 粘贴到活动端子 Paste into active terminal Ctrl+↑ / ↓ 向上/向下滚动 Scroll up/down Shift+PgUp / PgDown 向上/向下滚动页面 Scroll page up/down Ctrl+Home / End 滚动到顶部/底部 Scroll to top/bottom 附Visual Studio Code官网快捷键参考： 转载：https://blog.csdn.net/dreaming317/article/details/103823950","categories":[{"name":"VsCode","slug":"VsCode","permalink":"http://www.lvhejin.cn/categories/VsCode/"}],"tags":[{"name":"VsCode","slug":"VsCode","permalink":"http://www.lvhejin.cn/tags/VsCode/"},{"name":"快捷键","slug":"快捷键","permalink":"http://www.lvhejin.cn/tags/%E5%BF%AB%E6%8D%B7%E9%94%AE/"}]},{"title":"go环境配置","slug":"Go/go环境配置","date":"2023-03-24T00:32:31.000Z","updated":"2024-01-05T17:32:17.619Z","comments":true,"path":"2023/03/24/Go/go环境配置/index.html","link":"","permalink":"http://www.lvhejin.cn/2023/03/24/Go/go%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/index.html","excerpt":"","text":"go环境配置GO111MODULE出现go: unknown environment setting GO111MODULE=xxx的解决办法当第一次设置GO111MODULE错误后，无论是查看go env状态还是重新设置GO111MODULE，都会报下面这个错误 123456&gt; go env -w GO111MODULE=gg&gt; go envgo: unknown environment setting G0111MODULE=gggo: arguments must be KEY=VALUE: invalid argument: GO111MODULE&gt; go env -w GO111MODULE=ongo: unknown environment setting G011110DULE=gg 解决办法：windows 平台：1set GO111MODULE=auto linux/mac平台：1export GO111MODULE=auto 转载：https://blog.csdn.net/xsy29000/article/details/103136698","categories":[{"name":"Go","slug":"Go","permalink":"http://www.lvhejin.cn/categories/Go/"},{"name":"go环境配置","slug":"Go/go环境配置","permalink":"http://www.lvhejin.cn/categories/Go/go%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"}],"tags":[{"name":"GO","slug":"GO","permalink":"http://www.lvhejin.cn/tags/GO/"},{"name":"go环境配置","slug":"go环境配置","permalink":"http://www.lvhejin.cn/tags/go%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"},{"name":"常见问题","slug":"常见问题","permalink":"http://www.lvhejin.cn/tags/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"}]},{"title":"Hexo配置sitemap以及设置keywords","slug":"Hexo/Hexo配置sitemap以及设置keywords","date":"2023-03-09T02:21:26.000Z","updated":"2024-01-05T17:32:17.619Z","comments":true,"path":"2023/03/09/Hexo/Hexo配置sitemap以及设置keywords/index.html","link":"","permalink":"http://www.lvhejin.cn/2023/03/09/Hexo/Hexo%E9%85%8D%E7%BD%AEsitemap%E4%BB%A5%E5%8F%8A%E8%AE%BE%E7%BD%AEkeywords/index.html","excerpt":"","text":"本文主要是对hexo搭建的博客进行简单的SEO，比如给每篇文章加上keywords，以及生成sitemap.xml文件，方便我们提交到各大搜索引擎。 sitemaphexo安装sitemapwindows用户可以在博客根目录下按shift键不放再鼠标右击，即可在此目录下运行CMD窗口，运行如下代码: 1npm install hexo-generator-sitemap --save 在博客根目录下找到_config.yml文件，添加如下代码: 12sitemap: path: sitemap.xml 执行hexo g生成静态页面，再然后执行hexo s启动服务。打开http://localhost:4000/sitemap.xml即可看到效果，弄好之后你就可以到各大搜索引擎提交sitemap站点地图了。 keywords默认情况下hexo博客及博客里的文章是没有keywords关键字的，需要我们手动添加。 设置hexo博客的关键字在博客根目录下找到_config.yml文件，在所示地方添加keywords: 关键字1,关键字2,关键字3…，采用英文逗号隔开，注意keywords与关键词之间的空格。 123456789# Sitetitle: 站点标题subtitle: 站点副标题description: 站点描述author: 站点作者language: zh-CNtimezone:keywords: 前端博客,JavaScript,html5,css3,Jquery,NodeJs,Ubuntu（#博客关键字） 设置文章的关键字1、打开theme/icarus/layout/common/head.ejs，这是我的head.ejs所在路径，不同主题可能不同，但一般来说都是head.ejs文件，添加如下代码: 12345&lt;% if (page.keywords)&#123; %&gt;&lt;meta name=&quot;keywords&quot; content=&quot;&lt;%= page.keywords %&gt;,&lt;%= config.keywords %&gt;&quot;&gt;&lt;% &#125; else if (config.keywords)&#123; %&gt;&lt;meta name=&quot;keywords&quot; content=&quot;&lt;%= config.keywords %&gt;&quot;&gt;&lt;%&#125; %&gt; 这段话的意思是如果页面有关键字，则用页面的关键字，否则使用配置文件的关键字 2、在文章里面加入keywords，如下所示： 1234567---title: ###date: ###categories: ###tags: ###keywords: ###--- 转载：https://opstrip.com/2017/03/12/hexo-sitemap-keywords/","categories":[{"name":"建站","slug":"建站","permalink":"http://www.lvhejin.cn/categories/%E5%BB%BA%E7%AB%99/"},{"name":"Hexo使用攻略","slug":"建站/Hexo使用攻略","permalink":"http://www.lvhejin.cn/categories/%E5%BB%BA%E7%AB%99/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5/"},{"name":"Github","slug":"建站/Hexo使用攻略/Github","permalink":"http://www.lvhejin.cn/categories/%E5%BB%BA%E7%AB%99/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5/Github/"}],"tags":[{"name":"SEO","slug":"SEO","permalink":"http://www.lvhejin.cn/tags/SEO/"},{"name":"keywords","slug":"keywords","permalink":"http://www.lvhejin.cn/tags/keywords/"},{"name":"sitemap","slug":"sitemap","permalink":"http://www.lvhejin.cn/tags/sitemap/"}]},{"title":"3500个常用汉字（注音版）","slug":"教育/语文/3500个常用汉字（注音版）","date":"2022-12-15T17:14:32.000Z","updated":"2024-01-05T17:32:17.651Z","comments":true,"path":"2022/12/15/教育/语文/3500个常用汉字（注音版）/index.html","link":"","permalink":"http://www.lvhejin.cn/2022/12/15/%E6%95%99%E8%82%B2/%E8%AF%AD%E6%96%87/3500%E4%B8%AA%E5%B8%B8%E7%94%A8%E6%B1%89%E5%AD%97%EF%BC%88%E6%B3%A8%E9%9F%B3%E7%89%88%EF%BC%89/index.html","excerpt":"","text":".code {padding: 10px 10px 10px 40px;font-size: 19px;line-height: 25px;background-color: #eee;font-family: \"黑体\";/*white-space: pre-wrap;word-break: break-all;*/position: relative;overflow: auto;}.code::before {content: '01.\\A 02.\\A 03.\\A 04.\\A 05.\\A 06.\\A 07.\\A 08.\\A 09.\\A 10.\\A 11.\\A 12.\\A 13.\\A 14.\\A 15.\\A 16.\\A 17.\\A 18.\\A 19.\\A 20.\\A 21.\\A 22.\\A 23.\\A 24.\\A 25.\\A 26.\\A 27.\\A 28.\\A 29.\\A 30.\\A 31.\\A 32.\\A 33.\\A 34.\\A 35.\\A 36.\\A 37.\\A 38.\\A 39.\\A 40.\\A 41.\\A 42.\\A 43.\\A 44.\\A 45.\\A 46.\\A 47.\\A 48.\\A 49.\\A 50.\\A 51.\\A 52.\\A 53.\\A 54.\\A 55.\\A 56.\\A 57.\\A 58.\\A 59.\\A 60.\\A 61.\\A 62.\\A 63.\\A 64.\\A 65.\\A 66.\\A 67.\\A 68.\\A 69.\\A 70.\\A 71.\\A 72.\\A 73.\\A 74.\\A 75.\\A 76.\\A 77.\\A 78.\\A 79.\\A 80.\\A 81.\\A 82.\\A 83.\\A 84.\\A 85.\\A 86.\\A 87.\\A 88.\\A 89.\\A 90.\\A 91.\\A 92.\\A 93.\\A 94.\\A 95.\\A 96.\\A 97.\\A 98.\\A 99';position: absolute;top: 10px;bottom: 10px;left: 0;text-align: right;background-color: #fbfbfb;color: #333;outline: 100px solid #fbfbfb;clip: rect(-100px 2em 9999px 0);/* IE9+ */clip: rect(-100px 3.5ch 9999px 0);overflow: hidden;} 中考现代文阅读理解的考试目标共包括十四项，其中与记叙文、说明文、议论文均相关的考试目标中有一条为：能正确书写3500个常用汉字。 故将3500个常用汉字按首字母排序，罗列如下： a 啊(ā) 阿(ā) 埃(āi) 挨(āi) 哎(āi) 唉(āi) 哀(āi) 皑(ái) 癌(ái) 蔼(ǎi) 矮(ǎi) 艾(ài) 碍(ài) 爱(ài) 隘(ài) 鞍(ān) 氨(ān) 安(ān) 俺(ǎn) 按(àn) 暗(àn) 岸(àn) 胺(àn) 案(àn) 肮(ānɡ) 昂(ánɡ) 盎(ànɡ) 凹(āo) 敖(áo) 熬(áo) 翱(áo) 袄(ǎo) 傲(ào) 奥(ào) 懊(ào) 澳(ào) b 芭(bā) 捌(bā) 扒(bā) 叭(bā) 吧(bɑ) 笆(bā) 八(bā) 疤(bā) 巴(bā) 拔(bá) 跋(bá) 靶(bǎ) 把(bǎ) 耙(pá) 坝(bà) 霸(bà) 罢(bà) 爸(bà) 白(bái) 柏(bǎi) 百(bǎi) 摆(bǎi) 佰(bǎi) 败(bài) 拜(bài) 稗(bài) 斑(bān) 班(bān) 搬(bān) 扳(bān) 般(bān) 颁(bān) 板(bǎn) 版(bǎn) 扮(bàn) 拌(bàn) 伴(bàn) 瓣(bàn) 半(bàn) 办(bàn) 绊(bàn) 邦(bānɡ) 帮(bānɡ) 梆(bānɡ) 榜(bǎnɡ) 膀(bǎnɡ) 绑(bǎnɡ) 棒(bànɡ) 磅(bànɡ) 蚌(bànɡ) 镑(bànɡ) 傍(bànɡ) 谤(bànɡ) 苞(bāo) 胞(bāo) 包(bāo) 褒(bāo) 剥(bāo) 薄(báo) 雹(báo) 保(bǎo) 堡(bǎo) 饱(bǎo) 宝(bǎo) 抱(bào) 报(bào) 暴(bào) 豹(bào) 鲍(bào) 爆(bào) 杯(bēi) 碑(bēi) 悲(bēi) 卑(bēi) 北(běi) 辈(bèi) 背(bèi) 贝(bèi) 钡(bèi) 倍(bèi) 狈(bèi) 备(bèi) 惫(bèi) 焙(bèi) 被(bèi) 奔(bēn) 苯(běn) 本(běn) 笨(bèn) 崩(bēnɡ) 绷(bēnɡ) 甭(bénɡ) 泵(bènɡ) 蹦(bènɡ) 迸(bènɡ) 逼(bī) 鼻(bí) 比(bǐ) 鄙(bǐ) 笔(bǐ) 彼(bǐ) 碧(bì) 蓖(bì) 蔽(bì) 毕(bì) 毙(bì) 毖(bì) 币(bì) 庇(bì) 痹(bì) 闭(bì) 敝(bì) 弊(bì) 必(bì) 辟(pì) 壁(bì) 臂(bì) 避(bì) 陛(bì) 鞭(biān) 边(biān) 编(biān) 贬(biǎn) 扁(biǎn) 便(biàn) 变(biàn) 卞(biàn) 辨(biàn) 辩(biàn) 辫(biàn) 遍(biàn) 标(biāo) 彪(biāo) 膘(biāo) 表(biǎo) 鳖(biē) 憋(biē) 别(bié) 瘪(biě) 彬(bīn) 斌(bīn) 濒(bīn) 滨(bīn) 宾(bīn) 摈(bìn) 兵(bīnɡ) 冰(bīnɡ) 柄(bǐnɡ) 丙(bǐnɡ) 秉(bǐnɡ) 饼(bǐnɡ) 炳(bǐnɡ) 病(bìnɡ) 并(bìnɡ) 玻(bō) 菠(bō) 播(bō) 拨(bō) 钵(bō) 波(bō) 博(bó) 勃(bó) 搏(bó) 铂(bó) 箔(bó) 伯(bó) 帛(bó) 舶(bó) 脖(bó) 膊(bó) 渤(bó) 泊(bó) 驳(bó) 捕(bǔ) 卜(bǔ) 哺(bǔ) 补(bǔ) 埠(bù) 不(bú) 布(bù) 步(bù) 簿(bù) 部(bù) 怖(bù) c 擦(cā) 猜(cāi) 裁(cái) 材(cái) 才(cái) 财(cái) 睬(cǎi) 踩(cǎi) 采(cǎi) 彩(cǎi) 菜(cài) 蔡(cài) 餐(cān) 参(cān) 蚕(cán) 残(cán) 惭(cán) 惨(cǎn) 灿(càn) 苍(cānɡ) 舱(cānɡ) 仓(cānɡ) 沧(cānɡ) 藏(cánɡ) 操(cāo) 糙(cāo) 槽(cáo) 曹(cáo) 草(cǎo) 厕(cè) 策(cè) 侧(cè) 册(cè) 测(cè) 层(cénɡ) 蹭(cènɡ) 插(chā) 叉(chā) 茬(chá) 茶(chá) 查(chá) 碴(chá) 搽(chá) 察(chá) 岔(chà) 差(chà) 诧(chà) 拆(chāi) 柴(chái) 豺(chái) 搀(chān) 掺(chān) 蝉(chán) 馋(chán) 谗(chán) 缠(chán) 铲(chǎn) 产(chǎn) 阐(chǎn) 颤(chàn) 昌(chānɡ) 猖(chānɡ) 场(chǎnɡ) 尝(chánɡ) 常(chánɡ) 长(chánɡ) 偿(chánɡ) 肠(chánɡ) 厂(chǎnɡ) 敞(chǎnɡ) 畅(chànɡ) 唱(chànɡ) 倡(chànɡ) 超(chāo) 抄(chāo) 钞(chāo) 朝(cháo) 嘲(cháo) 潮(cháo) 巢(cháo) 吵(chǎo) 炒(chǎo) 车(chē) 扯(chě) 撤(chè) 掣(chè) 彻(chè) 澈(chè) 郴(chēn) 臣(chén) 辰(chén) 尘(chén) 晨(chén) 忱(chén) 沉(chén) 陈(chén) 趁(chèn) 衬(chèn) 撑(chēnɡ) 称(chēnɡ) 城(chénɡ) 橙(chénɡ) 成(chénɡ) 呈(chénɡ) 乘(chénɡ) 程(chénɡ) 惩(chénɡ) 澄(chénɡ) 诚(chénɡ) 承(chénɡ) 逞(chěnɡ) 骋(chěnɡ) 秤(chènɡ) 吃(chī) 痴(chī) 持(chí) 匙(shi) 池(chí) 迟(chí) 弛(chí) 驰(chí) 耻(chǐ) 齿(chǐ) 侈(chǐ) 尺(chǐ) 赤(chì) 翅(chì) 斥(chì) 炽(chì) 充(chōnɡ) 冲(chōnɡ) 虫(chónɡ) 崇(chónɡ) 宠(chǒnɡ) 抽(chōu) 酬(chóu) 畴(chóu) 踌(chóu) 稠(chóu) 愁(chóu) 筹(chóu) 仇(chóu) 绸(chóu) 瞅(chǒu) 丑(chǒu) 臭(chòu) 初(chū) 出(chū) 橱(chú) 厨(chú) 躇(chú) 锄(chú) 雏(chú) 滁(chú) 除(chú) 楚(chǔ) 础(chǔ) 储(chǔ) 矗(chù) 搐(chù) 触(chù) 处(chù) 揣(chuāi) 川(chuān) 穿(chuān) 椽(chuán) 传(chuán) 船(chuán) 喘(chuǎn) 串(chuàn) 疮(chuānɡ) 窗(chuānɡ) 幢(zhuànɡ) 床(chuánɡ) 闯(chuǎnɡ) 创(chuànɡ) 吹(chuī) 炊(chuī) 捶(chuí) 锤(chuí) 垂(chuí) 春(chūn) 椿(chūn) 醇(chún) 唇(chún) 淳(chún) 纯(chún) 蠢(chǔn) 戳(chuō) 绰(chāo) 疵(cī) 茨(cí) 磁(cí) 雌(cí) 辞(cí) 慈(cí) 瓷(cí) 词(cí) 此(cǐ) 刺(cì) 赐(cì) 次(cì) 聪(cōnɡ) 葱(cōnɡ) 囱(cōnɡ) 匆(cōnɡ) 从(cónɡ) 丛(cónɡ) 凑(còu) 粗(cū) 醋(cù) 簇(cù) 促(cù) 蹿(cuān) 篡(cuàn) 窜(cuàn) 摧(cuī) 崔(cuī) 催(cuī) 脆(cuì) 瘁(cuì) 粹(cuì) 淬(cuì) 翠(cuì) 村(cūn) 存(cún) 寸(cùn) 磋(cuō) 撮(cuō) 搓(cuō) 措(cuò) 挫(cuò) 错(cuò) d 搭(dā) 达(dá) 答(dá) 瘩(dá) 打(dǎ) 大(dà) 呆(dāi) 歹(dǎi) 傣(dǎi) 戴(dài) 带(dài) 殆(dài) 代(dài) 贷(dài) 袋(dài) 待(dài) 逮(dǎi) 怠(dài) 耽(dān) 担(dān) 丹(dān) 单(dān) 郸(dān) 掸(dǎn) 胆(dǎn) 旦(dàn) 氮(dàn) 但(dàn) 惮(dàn) 淡(dàn) 诞(dàn) 弹(dàn) 蛋(dàn) 当(dānɡ) 挡(dǎnɡ) 党(dǎnɡ) 荡(dànɡ) 档(dànɡ) 刀(dāo) 捣(dǎo) 蹈(dǎo) 倒(dǎo) 岛(dǎo) 祷(dǎo) 导(dǎo) 到(dào) 稻(dào) 悼(dào) 道(dào) 盗(dào) 德(dé) 得(dé) 的(de) 蹬(dēnɡ) 灯(dēnɡ) 登(dēnɡ) 等(děnɡ) 瞪(dènɡ) 凳(dènɡ) 邓(dènɡ) 堤(dī) 低(dī) 滴(dī) 迪(dí) 敌(dí) 笛(dí) 狄(dí) 涤(dí) 翟(zhái) 嫡(dí) 抵(dǐ) 底(dǐ) 地(dì) 蒂(dì) 第(dì) 帝(dì) 弟(dì) 递(dì) 缔(dì) 颠(diān) 掂(diān) 滇(diān) 碘(diǎn) 点(diǎn) 典(diǎn) 靛(diàn) 垫(diàn) 电(diàn) 佃(diàn) 甸(diàn) 店(diàn) 惦(diàn) 奠(diàn) 淀(diàn) 殿(diàn) 碉(diāo) 叼(diāo) 雕(diāo) 凋(diāo) 刁(diāo) 掉(diào) 吊(diào) 钓(diào) 调(diào) 跌(diē) 爹(diē) 碟(dié) 蝶(dié) 迭(dié) 谍(dié) 叠(dié) 丁(dīnɡ) 盯(dīnɡ) 叮(dīnɡ) 钉(dìnɡ) 顶(dǐnɡ) 鼎(dǐnɡ) 锭(dìnɡ) 定(dìnɡ) 订(dìnɡ) 丢(diū) 东(dōnɡ) 冬(dōnɡ) 董(dǒnɡ) 懂(dǒnɡ) 动(dònɡ) 栋(dònɡ) 侗(dònɡ) 恫(dònɡ) 冻(dònɡ) 洞(dònɡ) 兜(dōu) 抖(dǒu) 斗(dòu) 陡(dǒu) 豆(dòu) 逗(dòu) 痘(dòu) 都(dōu) 督(dū) 毒(dú) 犊(dú) 独(dú) 读(dú) 堵(dǔ) 睹(dǔ) 赌(dǔ) 杜(dù) 镀(dù) 肚(dù) 度(dù) 渡(dù) 妒(dù) 端(duān) 短(duǎn) 锻(duàn) 段(duàn) 断(duàn) 缎(duàn) 堆(duī) 兑(duì) 队(duì) 对(duì) 墩(dūn) 吨(dūn) 蹲(dūn) 敦(dūn) 顿(dùn) 囤(dùn) 钝(dùn) 盾(dùn) 遁(dùn) 掇(duō) 哆(duō) 多(duō) 夺(duó) 垛(duǒ) 躲(duǒ) 朵(duǒ) 跺(duò) 舵(duò) 剁(duò) 惰(duò) 堕(duò) e 蛾(é) 峨(é) 鹅(é) 俄(é) 额(é) 讹(é) 娥(é) 恶(è) 厄(è) 扼(è) 遏(è) 鄂(è) 饿(è) 恩(ēn) 而(ér) 儿(ér) 耳(ěr) 尔(ěr) 饵(ěr) 洱(ěr) 二(èr) 贰(èr) f 发(fā) 罚(fá) 筏(fá) 伐(fá) 乏(fá) 阀(fá) 法(fǎ) 珐(fà) 藩(fān) 帆(fān) 番(fān) 翻(fān) 樊(fán) 矾(fán) 钒(fán) 繁(fán) 凡(fán) 烦(fán) 反(fǎn) 返(fǎn) 范(fàn) 贩(fàn) 犯(fàn) 饭(fàn) 泛(fàn) 坊(fānɡ) 芳(fānɡ) 方(fānɡ) 肪(fánɡ) 房(fánɡ) 防(fánɡ) 妨(fánɡ) 仿(fǎnɡ) 访(fǎnɡ) 纺(fǎnɡ) 放(fànɡ) 菲(fēi) 非(fēi) 啡(fēi) 飞(fēi) 肥(féi) 匪(fěi) 诽(fěi) 吠(fèi) 肺(fèi) 废(fèi) 沸(fèi) 费(fèi) 芬(fēn) 酚(fēn) 吩(fēn) 氛(fēn) 分(fēn) 纷(fēn) 坟(fén) 焚(fén) 汾(fén) 粉(fěn) 奋(fèn) 份(fèn) 忿(fèn) 愤(fèn) 粪(fèn) 丰(fēnɡ) 封(fēnɡ) 枫(fēnɡ) 蜂(fēnɡ) 峰(fēnɡ) 锋(fēnɡ) 风(fēnɡ) 疯(fēnɡ) 烽(fēnɡ) 逢(fénɡ) 冯(fénɡ) 缝(fénɡ) 讽(fěnɡ) 奉(fènɡ) 凤(fènɡ) 佛(fó) 否(fǒu) 夫(fū) 敷(fū) 肤(fū) 孵(fū) 扶(fú) 拂(fú) 辐(fú) 幅(fú) 氟(fú) 符(fú) 伏(fú) 俘(fú) 服(fú) 浮(fú) 涪(fú) 福(fú) 袱(fú) 弗(fú) 甫(fǔ) 抚(fǔ) 辅(fǔ) 俯(fǔ) 釜(fǔ) 斧(fǔ) 脯(pú) 腑(fǔ) 府(fǔ) 腐(fǔ) 赴(fù) 副(fù) 覆(fù) 赋(fù) 复(fù) 傅(fù) 付(fù) 阜(fù) 父(fù) 腹(fù) 负(fù) 富(fù) 讣(fù) 附(fù) 妇(fù) 缚(fù) 咐(fù) g 噶(ɡá) 嘎(ɡā) 该(ɡāi) 改(ɡǎi) 概(ɡài) 钙(ài) 盖(ɡài) 溉(ɡài) 干(ɡàn) 甘(ɡān) 杆(ɡǎn) 柑(ɡān) 竿(ɡān) 肝(ɡān) 赶(ɡǎn) 感(ɡǎn) 秆(ɡǎn) 敢(ɡǎn) 赣(ɡàn) 肛(ɡānɡ) 纲(ɡānɡ) 岗(ɡǎnɡ) 港(ɡǎnɡ) 杠(ɡànɡ) 篙(ɡāo) 皋(ɡāo) 高(ɡāo) 膏(ɡāo) 羔(ɡāo) 糕(ɡāo) 搞(ɡǎo) 镐(ɡǎo) 稿(ɡǎo) 告(ɡào) 哥(ɡē) 歌(ɡē) 搁(ɡē) 戈(ɡē) 鸽(ɡē) 胳(ɡē) 疙(ɡē) 割(ɡē) 革(ɡé) 葛(ɡě) 格(ɡé) 蛤(gá) 阁(ɡé) 隔(ɡé) 铬(ɡè) 个(ɡè) 各(ɡè) 给(ɡěi) 根(ɡēn) 跟(ɡēn) 耕(ɡēnɡ) 更(ɡènɡ) 庚(ɡēnɡ) 羹(ɡēnɡ) 埂(ɡěnɡ) 耿(ɡěnɡ) 梗(ɡěnɡ) 工(ɡōnɡ) 攻(ɡōnɡ) 功(ɡōnɡ) 恭(ɡōnɡ) 龚(ɡōnɡ) 供(ɡònɡ) 躬(ɡōnɡ) 公(ɡōnɡ) 宫(ɡōnɡ) 弓(ɡōnɡ) 巩(ɡǒnɡ) 汞(ɡǒnɡ) 拱(ɡǒnɡ) 贡(ɡòn) 共(ɡònɡ) 钩(ɡōu) 勾(ɡōu) 沟(ɡōu) 苟(ɡǒu) 狗(ɡǒu) 垢(ɡòu) 构(ɡòu) 购(ɡòu) 够(ɡòu) 辜(ɡū) 菇(ɡū) 咕(ɡū) 箍(ɡū) 估(ɡū) 沽(ɡū) 孤(ɡū) 姑(ɡū) 鼓(ɡǔ) 古(ɡǔ) 蛊(ɡǔ) 骨(ɡǔ) 谷(ɡǔ) 股(ɡǔ) 故(ɡù) 顾(ɡù) 固(ɡù) 雇(ɡù) 刮(ɡuā) 瓜(ɡuā) 剐(ɡuǎ) 寡(ɡuǎ) 挂(ɡuà) 褂(ɡuà) 乖(ɡuāi) 拐(ɡuǎi) 怪(ɡuài) 棺(ɡuān) 关(ɡuān) 官(ɡuān) 冠(ɡuàn) 观(ɡuān) 管(ɡuǎn) 馆(ɡuǎn) 罐(ɡuàn) 惯(ɡuàn) 灌(ɡuàn) 贯(ɡɡuàn) 光(ɡuānɡ) 广(ɡuǎnɡ) 逛(ɡuànɡ) 瑰(ɡuī) 规(ɡuī) 圭(ɡuī) 硅(ɡuī) 归(ɡuī) 龟(ɡuī) 闺(ɡɡuī) 轨(ɡuǐ) 鬼(ɡuǐ) 诡(ɡuǐ) 癸(ɡuǐ) 桂(ɡuì) 柜(ɡuì) 跪(ɡuì) 贵(ɡuì) 刽(ɡuì) 辊(ɡǔn) 滚(ɡǔn) 棍(ɡùn) 锅(ɡuō) 郭(ɡuō) 国(ɡuó) 果(ɡuǒ) 裹(ɡuǒ) 过(ɡuò) h 哈(hā) 骸(hái) 孩(hái) 海(hǎi) 氦(hài) 亥(hài) 害(hài) 骇(hài) 酣(hān) 憨(hān) 邯(hán) 韩(hán) 含(hán) 涵(hán) 寒(hán) 函(hán) 喊(hǎn) 罕(hǎn) 翰(hàn) 撼(hàn) 扞(hàn) 旱(hàn) 憾(hàn) 悍(hàn) 焊(hàn) 汗(hàn) 汉(hàn） 夯(hānɡ) 杭(hánɡ) 航(hánɡ) 壕(háo) 嚎(háo) 豪(háo) 毫(háo) 郝(hǎo) 好(hǎo) 耗(hào) 号(hào) 浩(hào) 呵(hē) 喝(hē) 荷(hé) 菏(hé) 核(hé) 禾(hé) 和(hé) 何(hé) 合(hé) 盒(hé) 貉(hé) 阂(hé) 河(hé) 涸(hé) 赫(hè) 褐(hè) 鹤(hè) 贺(hè) 嘿(hēi) 黑(hēi) 痕(hén) 很(hěn) 狠(hěn) 恨(hèn) 哼(hēnɡ) 亨(hēnɡ) 横(hénɡ) 衡(hénɡ) 恒(hénɡ) 轰(hōnɡ) 哄(hǒnɡ) 烘(hōnɡ) 虹(hónɡ) 鸿(hónɡ) 洪(hónɡ) 宏(hónɡ) 弘(hónɡ) 红(hónɡ) 喉(hóu) 侯(hóu) 猴(hóu) 吼(hǒu) 厚(hòu) 候(hòu) 后(hòu) 呼(hū) 乎(hū) 忽(hū) 瑚(hú) 壶(hú) 葫(hú) 胡(hú) 蝴(hú) 狐(hú) 糊(hú) 湖(hú) 弧(hú) 虎(hǔ) 唬(hǔ) 护(hù) 互(hù) 沪(hù) 户(hù) 花(huā) 哗(huá) 华(huá) 猾(huá) 滑(huá) 画(huà) 划(huá) 化(huà) 话(huà) 槐(huái) 徊(huái) 怀(huái) 淮(huái) 坏(huài) 欢(huān) 环(huán) 桓(huán) 还(hái) 缓(huǎn) 换(huàn) 患(huàn) 灰(huī) 挥(huī) 辉(huī) 徽(huī) 恢(huī) 蛔(huí) 回(huí) 毁(huǐ) 悔(huǐ) 慧(huì) 卉(huì) 惠(huì) 晦(huì) 贿(huì) 秽(huì) 会(huì) 烩(huì) 汇(huì) 讳(huì) 诲(huì) 绘(huì) 荤(hūn) 昏(hūn) 婚(hūn) 魂(hún) 浑(hún) 混(hún) 豁(huō) 活(huó) 伙(huǒ) 火(huǒ) 获(huò) 或(huò) 惑(huò) 霍(huò) 货(huò) 祸(huò) j 击(jī) 圾(jī) 基(jī) 机(jī) 畸(jī) 稽(jī) 积(jī) 箕(jī) 肌(jī) 饥(jī) 迹(jì) 激(jī) 讥(jī) 鸡(jī) 姬(jī) 绩(jì) 缉(jī) 吉(jí) 极(jí) 棘(jí) 辑(jí) 籍(jí) 集(jí) 及(jí) 急(jí) 疾(jí) 汲(jí) 即(jí) 嫉(jí) 级(jí) 挤(jǐ) 几(jǐ) 脊(jǐ) 己(jǐ) 蓟(jì) 技(jì) 冀(jì) 季(jì) 伎(jì) 祭(jì) 剂(jì) 悸(jì) 济(jì) 寄(jì) 寂(jì) 计(jì) 记(jì) 既(jì) 忌(jì) 际(jì) 妓(jì) 继(jì) 纪(jì) 嘉(jiā) 枷(jiā) 夹(jiá) 佳(jiā) 家(jiā) 加(jiā) 荚(jiá) 颊(jiá) 贾(jiǎ) 甲(jiǎ) 钾(jiǎ) 假(jiǎ) 稼(jià) 价(jià) 架(jià) 驾(jià) 嫁(jià) 歼(jiān) 监(jiān) 坚(jiān) 尖(jiān) 笺(jiān) 间(jiān) 煎(jiān) 兼(jiān) 肩(jiān) 艰(jiān) 奸(jiān) 缄(jiān) 茧(jiǎn) 检(jiǎn) 柬(jiǎn) 碱(jiǎn) 碱(jiǎn) 拣(jiǎn) 捡(jiǎn) 简(jiǎn) 俭(jiǎn) 剪(jiǎn) 减(jiǎn) 荐(jiàn) 槛(jiàn) 鉴(jiàn) 践(jiàn) 贱(jiàn) 见(jiàn) 键(jiàn) 箭(jiàn) 件(jiàn) 健(jiàn) 舰(jiàn) 剑(jiàn) 饯(jiàn) 渐(jiàn) 溅(jiàn) 涧(jiàn) 建(jiàn) 僵(jiānɡ) 姜(jiānɡ) 将(jiānɡ) 浆(jiānɡ) 江(jiānɡ) 疆(jiānɡ) 蒋(jiǎnɡ) 桨(jiǎnɡ) 奖(jiǎnɡ) 讲(jiǎnɡ) 匠(jiànɡ) 酱(jiànɡ) 降(jiànɡ) 蕉(jiāo) 椒(jiāo) 礁(jiāo) 焦(jiāo) 胶(jiāo) 交(jiāo) 郊(jiāo) 浇(jiāo) 骄(jiāo) 娇(jiāo) 嚼(jiáo) 搅(jiǎo) 铰(jiǎo) 矫(jiǎo) 侥(jiǎo) 脚(jiǎo) 狡(jiǎo) 角(jiǎo) 饺(jiǎo) 缴(jiǎo) 绞(jiǎo) 剿(jiǎo) 教(jiāo) 酵(jiào) 轿(jiào) 较(jiào) 叫(jiào) 窖(jiào) 揭(jiē) 接(jiē) 皆(jiē) 秸(jiē) 街(jiē) 阶(jiē) 截(jié) 劫(jié) 节(jiē) 桔(jié) 杰(jié) 捷(jié) 睫(jié) 竭(jié) 洁(jié) 结(jié) 解(jiě) 姐(jiě) 戒(jiè) 藉(jiè) 芥(jiè) 界(jiè) 借(jiè) 介(jiè) 疥(jiè) 诫(jiè) 届(jiè) 巾(jīn) 筋(jīn) 斤(jīn) 金(jīn) 今(jīn) 津(jīn) 襟(jīn) 紧(jǐn) 锦(jǐn) 仅(jǐn) 谨(jǐn) 进(jìn) 靳(jìn) 晋(jìn) 禁(jìn) 近(jìn) 烬(jìn) 浸(jìn) 尽(jìn) 劲(jìn) 荆(jīnɡ) 兢(jīnɡ) 茎(jīnɡ) 睛(jīnɡ) 晶(jīnɡ) 鲸(jīnɡ) 京(jīnɡ) 惊(jīnɡ) 精(jīnɡ) 粳(jīnɡ) 经(jīnɡ) 井(jǐnɡ) 警(jǐnɡ) 景(jǐnɡ) 颈(jǐnɡ) 静(jìnɡ) 境(jìnɡ) 敬(jìnɡ) 镜(jìnɡ) 径(jìnɡ) 痉(jìnɡ) 靖(jìnɡ) 竟(jìnɡ) 竞(jìnɡ) 净(jìnɡ) 炯(jiǒnɡ) 窘(jiǒnɡ) 揪(jiū) 究(jiū) 纠(jiū) 玖(jiǔ) 韭(jiǔ) 久(jiǔ) 灸(jiǔ) 九(jiǔ) 酒(jiǔ) 厩(jiù) 救(jiù) 旧(jiù) 臼(jiù) 舅(jiù) 咎(jiù) 就(jiù) 疚(jiù) 鞠(jū) 拘(jū) 狙(jū) 疽(jū) 居(jū) 驹(jū) 菊(jú) 局(jú) 咀(jǔ) 矩(jǔ) 举(jǔ) 沮(jǔ) 聚(jù) 拒(jù) 据(jù) 巨(jù) 具(jù) 距(jù) 踞(jù) 锯(jù) 俱(jù) 句(jù) 惧(jù) 炬(jù) 剧(jù) 捐(juān) 鹃(juān) 娟(juān) 倦(juàn) 眷(juàn) 卷(juǎn) 绢(juàn) 撅(juē) 攫(jué) 抉(jué) 掘(jué) 倔(juè) 爵(jué) 觉(jiào) 决(jué) 诀(jué) 绝(jué) 均(jūn) 菌(jūn) 钧(jūn) 军(jūn) 君(jūn) 峻(jùn) 俊(jùn) 竣(jùn) 浚(jùn) 郡(jùn) 骏(jùn) k 喀(kā) 咖(kā) 卡(kǎ) 咯(kǎ) 开(kāi) 揩(kāi) 楷(kǎi) 凯(kǎi) 慨(kǎi) 刊(kān) 堪(kān) 勘(kān) 坎(kǎn) 砍(kǎn) 看(kàn) 康(kānɡ) 慷(kānɡ) 糠(kānɡ) 扛(kánɡ) 抗(kànɡ) 亢(kànɡ) 炕(kànɡ) 考(kǎo) 拷(kǎo) 烤(kǎo) 靠(kào) 坷(kě) 苛(kē) 柯(kē) 棵(kē) 磕(kē) 颗(kē) 科(kē) 壳(ké) 咳(hāi) 可(kě) 渴(kě) 克(kè) 刻(kè) 客(kè) 课(kè) 肯(kěn) 啃(kěn) 垦(kěn) 恳(kěn) 坑(kēnɡ) 吭(kēnɡ) 空(kōnɡ) 恐(kǒnɡ) 孔(kǒnɡ) 控(kònɡ) 抠(kōu) 口(kǒu) 扣(kòu) 寇(kòu) 枯(kū) 哭(kū) 窟(kū) 苦(kǔ) 酷(kù) 库(kù) 裤(kù) 夸(kuā) 垮(kuǎ) 挎(kuà) 跨(kuà) 胯(kuà) 块(kuài) 筷(kuài) 侩(kuài) 快(kuài) 宽(kuān) 款(kuǎn) 匡(kuānɡ) 筐(kuānɡ) 狂(kuánɡ) 框(kuànɡ) 矿(kuànɡ) 眶(kuànɡ) 旷(kuànɡ) 况(kuànɡ) 亏(kuī) 盔(kuī) 岿(kuī) 窥(kuī) 葵(kuí) 奎(kuí) 魁(kuí) 傀(kuǐ) 馈(kuì) 愧(kuì) 溃(kuì) 坤(kūn) 昆(kūn) 捆(kǔn) 困(kùn) 括(kuò) 扩(kuò) 廓(kuò) 阔(kuò) l 垃(lā) 拉(lā) 喇(lā) 蜡(là) 腊(là) 辣(là) 啦(lā) 莱(lái) 来(lái) 赖(lài) 蓝(lán) 婪(lán) 栏(lán) 拦(lán) 篮(lán) 阑(lán) 兰(lán) 澜(lán) 谰(lán) 揽(lǎn) 览(lǎn) 懒(lǎn) 缆(lǎn) 烂(làn) 滥(làn) 琅(lánɡ) 榔(lánɡ) 狼(lánɡ) 廊(lánɡ) 郎(lánɡ) 朗(lǎnɡ) 浪(lànɡ) 捞(lāo) 劳(láo) 牢(láo) 老(lǎo) 佬(lǎo) 姥(lǎo) 酪(lào) 烙(lào) 涝(láo) 勒(lè) 乐(lè) 雷(léi) 镭(léi) 蕾(lěi) 磊(lěi) 累(lèi) 儡(lěi) 垒(lěi) 擂(lèi) 肋(lèi) 类(lèi) 泪(lèi) 棱(lénɡ) 楞(lénɡ) 冷(lěnɡ) 厘(lí) 梨(lí) 犁(lí) 黎(lí) 篱(lí) 狸(lí) 离(lí) 漓(lí) 理(lǐ) 李(lǐ) 里(lǐ) 鲤(lǐ) 礼(lǐ) 莉(lì) 荔(lì) 吏(lì) 栗(lì) 丽(lì) 厉(lì) 励(lì) 砾(lì) 历(lì) 利(lì) 僳(sù) 例(lì) 俐(lì) 痢(lì) 立(lì) 粒(lì) 沥(lì) 隶(lì) 力(lì) 璃(lí) 哩(lǐ) 俩(liǎnɡ) 联(lián) 莲(lián) 连(lián) 镰(lián) 廉(lián) 怜(lián) 涟(lián) 帘(lián) 敛(liǎn) 脸(liǎn) 链(liàn) 恋(liàn) 炼(liàn) 练(liàn) 粮(liánɡ) 凉(liánɡ) 梁(liánɡ) 粱(liánɡ) 良(liánɡ) 两(liǎnɡ) 辆(liànɡ) 量(liànɡ) 晾(liànɡ) 亮(liànɡ) 谅(liànɡ) 撩(liáo) 聊(liáo) 僚(liáo) 疗(liáo) 燎(liáo) 寥(liáo) 辽(liáo) 潦(liáo) 了(le) 撂(liào) 镣(liào) 廖(liào) 料(liào) 列(liè) 裂(liè) 烈(liè) 劣(liè) 猎(liè) 琳(lín) 林(lín) 磷(lín) 霖(lín) 临(lín) 邻(lín) 鳞(lín) 淋(lín) 凛(lǐn) 赁(lìn) 吝(lìn) 拎(līn) 玲(línɡ) 菱(línɡ) 零(línɡ) 龄(línɡ) 铃(línɡ) 伶(línɡ) 羚(línɡ) 凌(línɡ) 灵(línɡ) 陵(línɡ) 岭(lǐnɡ) 领(lǐnɡ) 另(lìnɡ) 令(lìnɡ) 溜(liū) 琉(liú) 榴(liú) 硫(liú) 馏(liú) 留(liú) 刘(liú) 瘤(liú) 流(liú) 柳(liǔ) 六(liù) 龙(lónɡ) 聋(lónɡ) 咙(lónɡ) 笼(lónɡ) 窿(lónɡ) 隆(lónɡ) 垄(lǒnɡ) 拢(lǒnɡ) 陇(lǒnɡ) 楼(lóu) 娄(lóu) 搂(lǒu) 篓(lǒu) 漏(lòu) 陋(lòu) 芦(lú) 卢(lú) 颅(lú) 庐(lú) 炉(lú) 掳(lǔ) 卤(lǔ) 虏(lǔ) 鲁(lǔ) 麓(lù) 碌(lù) 露(lù) 路(lù) 赂(lù) 鹿(lù) 潞(lù) 禄(lù) 录(lù) 陆(lù) 戮(lù) 驴(lǘ) 吕(lǚ) 铝(lǚ) 侣(lǚ) 旅(lǚ) 履(lǚ) 屡(lǚ) 缕(lǚ) 虑(lǜ) 氯(lǜ) 律(lǜ) 率(lǜ) 滤(lǜ) 绿(lǜ) 峦(luán) 挛(luán) 孪(luán) 滦(luán) 卵(luǎn) 乱(luàn) 掠(luě) 略(luè) 抡(lūn) 轮(lún) 伦(lún) 仑(lún) 沦(lún) 纶(lún) 论(lùn) 萝(luó) 螺(luó) 罗(luó) 逻(luó) 锣(luó) 箩(luó) 骡(luó) 裸(luǒ) 落(luò) 洛(luò) 骆(luò) 络(luò) m 妈(mā) 麻(má) 玛(mǎ) 码(mǎ) 蚂(mǎ) 马(mǎ) 骂(mà) 嘛(mɑ) 吗(mɑ) 埋(mái) 买(mǎi) 麦(mài) 卖(mài) 迈(mài) 脉(mài) 瞒(mán) 馒(mán) 蛮(mán) 满(mǎn) 蔓(màn) 曼(màn) 慢(màn) 漫(màn) 谩(màn) 芒(mánɡ) 茫(mánɡ) 盲(mánɡ) 氓(mánɡ) 忙(mánɡ) 莽(mǎnɡ) 猫(māo) 茅(máo) 锚(máo) 毛(máo) 矛(máo) 铆(mǎo) 卯(mǎo) 茂(mào) 冒(mào) 帽(mào) 貌(mào) 贸(mào) 么(me) 玫(méi) 枚(méi) 梅(méi) 酶(méi) 霉(méi) 煤(méi) 没(méi) 眉(méi) 媒(méi) 镁(měi) 每(měi) 美(měi) 昧(mèi) 寐(mèi) 妹(mèi) 媚(mèi) 门(mén) 闷(mèn) 们(men) 萌(ménɡ) 蒙(ménɡ) 檬(ménɡ) 盟(ménɡ) 锰(měnɡ) 猛(měnɡ) 梦(mènɡ) 孟(mènɡ) 眯(mī) 醚(mí) 靡(mí) 糜(mí) 迷(mí) 谜(mí) 弥(mí) 米(mǐ) 秘(mì) 觅(mì) 泌(mì) 蜜(mì) 密(mì) 幂(mì) 棉(mián) 眠(mián) 绵(mián) 冕(miǎn) 免(miǎn) 勉(miǎn) 娩(miǎn) 缅(miǎn) 面(miàn) 苗(miáo) 描(miáo) 瞄(miáo) 藐(miǎo) 秒(miǎo) 渺(miǎo) 庙(miào) 妙(miào) 蔑(miè) 灭(miè) 民(mín) 抿(mǐn) 皿(mǐn) 敏(mǐn) 悯(mǐn) 闽(mǐn) 明(mínɡ) 螟(mínɡ) 鸣(mínɡ) 铭(mínɡ) 名(mínɡ) 命(mìnɡ) 谬(miù) 摸(mō) 摹(mó) 蘑(mó) 模(mó) 膜(mó) 磨(mó) 摩(mó) 魔(mó) 抹(mǒ) 末(mò) 莫(mò) 墨(mò) 默(mò) 沫(mò) 漠(mò) 寞(mò) 陌(mò) 谋(móu) 牟(móu) 某(mǒu) 拇(mǔ) 牡(mǔ) 亩(mǔ) 姆(mǔ) 母(mǔ) 墓(mù) 暮(mù) 幕(mù) 募(mù) 慕(mù) 木(mù) 目(mù) 睦(mù) 牧(mù) 穆(mù) n 拿(ná) 哪(nǎ) 呐(nà) 钠(nà) 那(nà) 娜(nà) 纳(nà) 氖(nǎi) 乃(nǎi) 奶(nǎi) 耐(nài) 奈(nài) 南(nán) 男(nán) 难(nán) 囊(nánɡ) 挠(náo) 脑(nǎo) 恼(nǎo) 闹(nào) 淖(nào) 呢(ne) 馁(něi) 内(nèi) 嫩(nèn) 能(nénɡ) 妮(nī) 霓(ní) 倪(ní) 泥(ní) 尼(ní) 拟(nǐ) 你(nǐ) 匿(nì) 腻(nì) 逆(nì) 溺(nì) 蔫(niān) 拈(niān) 年(nián) 碾(niǎn) 撵(niǎn) 捻(niǎn) 念(niàn) 娘(niánɡ) 酿(niànɡ) 鸟(niǎo) 尿(niào) 捏(niē) 聂(niè) 孽(niè) 啮(niè) 镊(niè) 镍(niè) 涅(niè) 您(nín) 柠(nínɡ) 狞(nínɡ) 凝(nínɡ) 宁(nínɡ) 拧(nǐnɡ) 泞(nìnɡ) 牛(niú) 扭(niǔ) 钮(niǔ) 纽(niǔ) 脓(nónɡ) 浓(nónɡ) 农(nónɡ) 弄(nònɡ) 奴(nú) 努(nǔ) 怒(nù) 女(nǚ) 暖(nuǎn) 虐(nuè) 疟(nuè) 挪(nuó) 懦(nuò) 糯(nuò) 诺(nuò) o 哦(ò) 欧(ōu) 鸥(ōu) 殴(ōu) 藕(ǒu) 呕(ǒu) 偶(ǒu) 沤(ōu) p 啪(pā) 趴(pā) 爬(pá) 帕(pà) 怕(pà) 琶(pá) 拍(pāi) 排(pái) 牌(pái) 徘(pái) 湃(pài) 派(pài) 攀(pān) 潘(pān) 盘(pán) 磐(pán) 盼(pàn) 畔(pàn) 判(pàn) 叛(pàn) 乓(pānɡ) 庞(pánɡ) 旁(pánɡ) 耪(pǎnɡ) 胖(pànɡ) 抛(pāo) 咆(páo) 刨(páo) 炮(pào) 袍(páo) 跑(pǎo) 泡(pào) 呸(pēi) 胚(pēi) 培(péi) 裴(péi) 赔(péi) 陪(péi) 配(pèi) 佩(pèi) 沛(pèi) 喷(pēn) 盆(pén) 砰(pēnɡ) 抨(pēnɡ) 烹(pēnɡ) 澎(pénɡ) 彭(pénɡ) 蓬(pénɡ) 棚(pénɡ) 硼(pénɡ) 篷(pénɡ) 膨(pénɡ) 朋(pénɡ) 鹏(pénɡ) 捧(pěnɡ) 碰(pènɡ) 坯(pī) 砒(pī) 霹(pī) 批(pī) 披(pī) 劈(pī) 琵(pí) 毗(pí) 啤(pí) 脾(pí) 疲(pí) 皮(pí) 匹(pǐ) 痞(pǐ) 僻(pì) 屁(pì) 譬(pì) 篇(piān) 偏(piān) 片(piàn) 骗(piàn) 飘(piāo) 漂(piāo) 瓢(piáo) 票(piào) 撇(piě) 瞥(piē) 拼(pīn) 频(pín) 贫(pín) 品(pǐn) 聘(pìn) 乒(pīnɡ) 坪(pínɡ) 苹(pínɡ) 萍(pínɡ) 平(pínɡ) 凭(pínɡ) 瓶(pínɡ) 评(pínɡ) 屏(pínɡ) 坡(pō) 泼(pō) 颇(pō) 婆(pó) 破(pò) 魄(pò) 迫(pò) 粕(pò) 剖(pōu) 扑(pū) 铺(pū) 仆(pú) 莆(pú) 葡(pú) 菩(pú) 蒲(pú) 埔(pǔ) 朴(pǔ) 圃(pǔ) 普(pǔ) 浦(pǔ) 谱(pǔ) 曝(pù) 瀑(pù) q 期(qī) 欺(qī) 栖(qī) 戚(qī) 妻(qī) 七(qī) 凄(qī) 漆(qī) 柒(qī) 沏(qī) 其(qí) 棋(qí) 奇(qí) 歧(qí) 畦(qí) 崎(qí) 脐(qí) 齐(qí) 旗(qí) 祈(qí) 祁(qí) 骑(jì) 起(qǐ) 岂(qǐ) 乞(qǐ) 企(qǐ) 启(qǐ) 契(qì) 砌(qì) 器(qì) 气(qì) 迄(qì) 弃(qì) 汽(qì) 泣(qì) 讫(qì) 掐(qiā) 洽(qià) 牵(qiān) 扦(qiān) 钎(qiān) 铅(qiān) 千(qiān) 迁(qiān) 签(qiān) 仟(qiān) 谦(qiān) 乾(qián) 黔(qián) 钱(qián) 钳(qián) 前(qián) 潜(qián) 遣(qiǎn) 浅(qiǎn) 谴(qiǎn) 堑(qiàn) 嵌(qiàn) 欠(qiàn) 歉(qiàn) 枪(qiānɡ) 呛(qiànɡ) 腔(qiānɡ) 羌(qiānɡ) 墙(qiánɡ) 蔷(qiánɡ) 强(qiánɡ) 抢(qiǎnɡ) 橇(qiāo) 锹(qiāo) 敲(qiāo) 悄(qiāo) 桥(qiáo) 瞧(qiáo) 乔(qiáo) 侨(qiáo) 巧(qiǎo) 鞘(qiào) 撬(qiào) 翘(qiào) 峭(qiào) 俏(qiào) 窍(qiào) 切(qiē) 茄(qié) 且(qiě) 怯(qiè) 窃(qiè) 钦(qīn) 侵(qīn) 亲(qīn) 秦(qín) 琴(qín) 勤(qín) 芹(qín) 擒(qín) 禽(qín) 寝(qǐn) 沁(qìn) 青(qīnɡ) 轻(qīnɡ) 氢(qīnɡ) 倾(qīnɡ) 卿(qīnɡ) 清(qīnɡ) 擎(qínɡ) 晴(qínɡ) 氰(qínɡ) 情(qínɡ) 顷(qǐnɡ) 请(qǐnɡ) 庆(qìnɡ) 琼(qiónɡ) 穷(qiónɡ) 秋(qiū) 丘(qiū) 邱(qiū) 球(qiú) 求(qiú) 囚(qiú) 酋(qiú) 泅(qiú) 趋(qū) 区(qū) 蛆(qū) 曲(qǔ) 躯(qū) 屈(qū) 驱(qū) 渠(qú) 取(qǔ) 娶(qǔ) 龋(qǔ) 趣(qù) 去(qù) 圈(quān) 颧(quán) 权(quán) 醛(quán) 泉(quán) 全(quán) 痊(quán) 拳(quán) 犬(quǎn) 券(quàn) 劝(quàn) 缺(quē) 炔(quē) 瘸(qué) 却(què) 鹊(què) 榷(què) 确(què) 雀(què) 裙(qún) 群(qún) r 然(rán) 燃(rán) 冉(rǎn) 染(rǎn) 瓤(ránɡ) 壤(rǎnɡ) 攘(rǎnɡ) 嚷(rǎnɡ) 让(rànɡ) 饶(ráo) 扰(rǎo) 绕(rào) 惹(rě) 热(rè) 壬(rén) 仁(rén) 人(rén) 忍(rěn) 韧(rèn) 任(rèn) 认(rèn) 刃(rèn) 妊(rèn) 纫(rèn) 扔(rēnɡ) 仍(rénɡ) 日(rì) 戎(rónɡ) 茸(rónɡ) 蓉(rónɡ) 荣(rónɡ) 融(rónɡ) 熔(rónɡ) 溶(rónɡ) 容(rónɡ) 绒(rónɡ) 冗(rǒnɡ) 揉(róu) 柔(róu) 肉(ròu) 茹(rú) 蠕(rú) 儒(rú) 孺(rú) 如(rú) 辱(rǔ) 乳(rǔ) 汝(rǔ) 入(rù) 褥(rù) 软(ruǎn) 阮(ruǎn) 蕊(ruǐ) 瑞(ruì) 锐(ruì) 闰(rùn) 润(rùn) 若(ruò) 弱(ruò) s 撒(sā) 洒(sǎ) 萨(sà) 腮(sāi) 鳃(sāi) 塞(sāi) 赛(sài) 三(sān) 叁(sān) 伞(sǎn) 散(sàn) 桑(sānɡ) 嗓(sǎnɡ) 丧(sànɡ) 搔(sāo) 骚(sāo) 扫(sǎo) 嫂(sǎo) 瑟(sè) 色(sè) 涩(sè) 森(sēn) 僧(sēnɡ) 莎(shā) 砂(shā) 杀(shā) 刹(chà) 沙(shā) 纱(shā) 傻(shǎ) 啥(shá) 煞(shà) 筛(shāi) 晒(shài) 珊(shān) 苫(shān) 杉(shān) 山(shān) 删(shān) 煽(shān) 衫(shān) 闪(shǎn) 陕(shǎn) 擅(shàn) 赡(shàn) 膳(shàn) 善(shàn) 汕(shàn) 扇(shàn) 缮(shàn) 墒(shānɡ) 伤(shānɡ) 商(shānɡ) 赏(shǎnɡ) 晌(shǎnɡ) 上(shànɡ) 尚(shànɡ) 裳(shɑnɡ) 梢(shāo) 捎(shāo) 稍(shāo) 烧(shāo) 芍(sháo) 勺(sháo) 韶(sháo) 少(shǎo) 哨(shào) 邵(shào) 绍(shào) 奢(shē) 赊(shē) 蛇(shé) 舌(shé) 舍(shě) 赦(shè) 摄(shè) 射(shè) 慑(shè) 涉(shè) 社(shè) 设(shè) 砷(shēn) 申(shēn) 呻(shēn) 伸(shēn) 身(shēn) 深(shēn) 娠(shēn) 绅(shēn) 神(shén) 沈(shěn) 审(shěn) 婶(shěn) 甚(shèn) 肾(shèn) 慎(shèn) 渗(shèn) 声(shēnɡ) 生(shēnɡ) 甥(shēnɡ) 牲(shēnɡ) 升(shēnɡ) 绳(shénɡ) 省(shěnɡ) 盛(shènɡ) 剩(shènɡ) 胜(shènɡ) 圣(shènɡ) 师(shī) 失(shī) 狮(shī) 施(shī) 湿(shī) 诗(shī) 尸(shī) 虱(shī) 十(shí) 石(shí) 拾(shí) 时(shí) 什(shén) 食(shí) 蚀(shí) 实(shí) 识(shí) 史(shǐ) 矢(shǐ) 使(shǐ) 屎(shǐ) 驶(shǐ) 始(shǐ) 式(shì) 示(shì) 士(shì) 世(shì) 柿(shì) 事(shì) 拭(shì) 誓(shì) 逝(shì) 势(shì) 是(shì) 嗜(shì) 噬(shì) 适(shì) 仕(shì) 侍(shì) 释(shì) 饰(shì) 氏(shì) 市(shì) 恃(shì) 室(shì) 视(shì) 试(shì) 收(shōu) 手(shǒu) 首(shǒu) 守(shǒu) 寿(shòu) 授(shòu) 售(shòu) 受(shòu) 瘦(shòu) 兽(shòu) 蔬(shū) 枢(shū) 梳(shū) 殊(shū) 抒(shū) 输(shū) 叔(shū) 舒(shū) 淑(shū) 疏(shū) 书(shū) 赎(shú) 孰(shú) 熟(shú) 薯(shǔ) 暑(shǔ) 曙(shǔ) 署(shǔ) 蜀(shǔ) 黍(shǔ) 鼠(shǔ) 属(shǔ) 术(shù) 述(shù) 树(shù) 束(shù) 戍(shù) 竖(shù) 墅(shù) 庶(shù) 数(shù) 漱(shù) 恕(shù) 刷(shuā) 耍(shuǎ) 摔(shuāi) 衰(shuāi) 甩(shuǎi) 帅(shuài) 栓(shuān) 拴(shuān) 霜(shuānɡ) 双(shuānɡ) 爽(shuǎnɡ) 谁(shuí) 水(shuǐ) 睡(shuì) 税(shuì) 吮(shǔn) 瞬(shùn) 顺(shùn) 舜(shùn) 说(shuō) 硕(shuò) 朔(shuò) 烁(shuò) 斯(sī) 撕(sī) 嘶(sī) 思(sī) 私(sī) 司(sī) 丝(sī) 死(sǐ) 肆(sì) 寺(sì) 嗣(sì) 四(sì) 伺(sì) 似(sì) 饲(sì) 巳(sì) 松(sōnɡ) 耸(sǒnɡ) 怂(sǒnɡ) 颂(sònɡ) 送(sònɡ) 宋(sònɡ) 讼(sònɡ) 诵(sònɡ) 搜(sōu) 艘(sōu) 擞(sǒu) 嗽(sòu) 苏(sū) 酥(sū) 俗(sú) 素(sù) 速(sù) 粟(sù) 僳(sù) 塑(sù) 溯(sù) 宿(sù) 诉(sù) 肃(sù) 酸(suān) 蒜(suàn) 算(suàn) 虽(suī) 隋(suí) 随(suí) 绥(suí) 髓(suǐ) 碎(suì) 岁(suì) 穗(suì) 遂(suí) 隧(suì) 祟(suì) 孙(sūn) 损(sǔn) 笋(sǔn) 蓑(suō) 梭(suō) 唆(suō) 缩(suō) 琐(suǒ) 索(suǒ) 锁(suǒ) 所(suǒ) t 塌(tā) 他(tā) 它(tā) 她(tā) 塔(tǎ) 獭(tǎ) 挞(tà) 蹋(tà) 踏(tà) 胎(tāi) 苔(tái) 抬(tái) 台(tái) 泰(tài) 酞(tài) 太(tài) 态(tài) 汰(tài) 坍(tān) 摊(tān) 贪(tān) 瘫(tān) 滩(tān) 坛(tán) 檀(tán) 痰(tán) 潭(tán) 谭(tán) 谈(tán) 坦(tǎn) 毯(tǎn) 袒(tǎn) 碳(tàn) 探(tàn) 叹(tàn) 炭(tàn) 汤(tānɡ) 塘(tánɡ) 搪(tánɡ) 堂(tánɡ) 棠(tánɡ) 膛(tánɡ) 唐(tánɡ) 糖(tánɡ) 倘(tǎnɡ) 躺(tǎnɡ) 淌(tǎnɡ) 趟(tànɡ) 烫(tànɡ) 掏(tāo) 涛(tāo) 滔(tāo) 绦(tāo) 萄(táo) 桃(táo) 逃(táo) 淘(táo) 陶(táo) 讨(tǎo) 套(tào) 特(tè) 藤(ténɡ) 腾(ténɡ) 疼(ténɡ) 誊(ténɡ) 梯(tī) 剔(tī) 踢(tī) 锑(tī) 提(tí) 题(tí) 蹄(tí) 啼(tí) 体(tǐ) 替(tì) 嚏(tì) 惕(tì) 涕(tì) 剃(tì) 屉(tì) 天(tiān) 添(tiān) 填(tián) 田(tián) 甜(tián) 恬(tián) 舔(tiǎn) 腆(tiǎn) 挑(tiāo) 条(tiáo) 迢(tiáo) 眺(tiào) 跳(tiào) 贴(tiē) 铁(tiě) 帖(tiē) 厅(tīnɡ) 听(tīnɡ) 烃(tīnɡ) 汀(tīnɡ) 廷(tínɡ) 停(tínɡ) 亭(tínɡ) 庭(tínɡ) 挺(tǐnɡ) 艇(tǐnɡ) 通(tōnɡ) 桐(tónɡ) 酮(tónɡ) 瞳(tónɡ) 同(tónɡ) 铜(tónɡ) 彤(tónɡ) 童(tónɡ) 桶(tǒnɡ) 捅(tǒnɡ) 筒(tǒnɡ) 统(tǒnɡ) 痛(tònɡ) 偷(tōu) 投(tóu) 头(tóu) 透(tòu) 凸(tū) 秃(tū) 突(tū) 图(tú) 徒(tú) 途(tú) 涂(tú) 屠(tú) 土(tǔ) 吐(tǔ) 兔(tù) 湍(tuān) 团(tuán) 推(tuī) 颓(tuí) 腿(tuǐ) 蜕(tuì) 褪(tuì) 退(tuì) 吞(tūn) 屯(tún) 臀(tún) 拖(tuō) 托(tuō) 脱(tuō) 鸵(tuó) 陀(tuó) 驮(tuó) 驼(tuó) 椭(tuǒ) 妥(tuǒ) 拓(tuò) 唾(tuò) w 挖(wā) 哇(wā) 蛙(wā) 洼(wā) 娃(wá) 瓦(wǎ) 袜(wà) 歪(wāi) 外(wài) 豌(wān) 弯(wān) 湾(wān) 玩(wán) 顽(wán) 丸(wán) 烷(wán) 完(wán) 碗(wǎn) 挽(wǎn) 晚(wǎn) 皖(wǎn) 惋(wǎn) 宛(wǎn) 婉(wǎn) 万(wàn) 腕(wàn) 汪(wānɡ) 王(wánɡ) 亡(wánɡ) 枉(wǎnɡ) 网(wǎnɡ) 往(wǎnɡ) 旺(wànɡ) 望(wànɡ) 忘(wànɡ) 妄(wànɡ) 威(wēi) 巍(wēi) 微(wēi) 危(wēi) 韦(wéi) 违(wéi) 桅(wéi) 围(wéi) 唯(wéi) 惟(wéi) 为(wéi) 潍(wéi) 维(wéi) 苇(wěi) 萎(wěi) 委(wěi) 伟(wěi) 伪(wěi) 尾(wěi) 纬(wěi) 未(wèi) 蔚(wèi) 味(wèi) 畏(wèi) 胃(wèi) 喂(wèi) 魏(wèi) 位(wèi) 渭(wèi) 谓(wèi) 尉(wèi) 慰(wèi) 卫(wèi) 瘟(wēn) 温(wēn) 蚊(wén) 文(wén) 闻(wén) 纹(wén) 吻(wěn) 稳(wěn) 紊(wěn) 问(wèn) 嗡(wēnɡ) 翁(wēnɡ) 瓮(wènɡ) 挝(wō) 蜗(wō) 涡(wō) 窝(wō) 我(wǒ) 斡(wò) 卧(wò) 握(wò) 沃(wò) 巫(wū) 呜(wū) 钨(wū) 乌(wū) 污(wū) 诬(wū) 屋(wū) 无(wú) 芜(wú) 梧(wú) 吾(wú) 吴(wú) 毋(wú) 武(wǔ) 五(wǔ) 捂(wǔ) 午(wǔ) 舞(wǔ) 伍(wǔ) 侮(wǔ) 坞(wù) 戊(wù) 雾(wù) 晤(wù) 物(wù) 勿(wù) 务(wù) 悟(wù) 误(wù) x 昔(xī) 熙(xī) 析(xī) 西(xī) 硒(xī) 矽(xī) 晰(xī) 嘻(xī) 吸(xī) 锡(xī) 牺(xī) 稀(xī) 息(xī) 希(xī) 悉(xī) 膝(xī) 夕(xī) 惜(xī) 熄(xī) 烯(xī) 溪(xī) 汐(xī) 犀(xī) 檄(xí) 袭(xí) 席(xí) 习(xí) 媳(xí) 喜(xǐ) 铣(xǐ) 洗(xǐ) 系(xì) 隙(xì) 戏(xì) 细(xì) 瞎(xiā) 虾(xiā) 匣(xiá) 霞(xiá) 辖(xiá) 暇(xiá) 峡(xiá) 侠(xiá) 狭(xiá) 下(xià) 厦(shà) 夏(xià) 吓(xià) 掀(xiān) 锨(xiān) 先(xiān) 仙(xiān) 鲜(xiān) 纤(xiān) 咸(xián) 贤(xián) 衔(xián) 舷(xián) 闲(xián) 涎(xián) 弦(xián) 嫌(xián) 显(xiǎn) 险(xiǎn) 现(xiàn) 献(xiàn) 县(xiàn) 腺(xiàn) 馅(xiàn) 羡(xiàn) 宪(xiǎn) 陷(xiàn) 限(xiàn) 线(xiàn) 相(xiānɡ) 厢(xiānɡ) 镶(xiānɡ) 香(xiānɡ) 箱(xiānɡ) 襄(xiānɡ) 湘(xiānɡ) 乡(xiānɡ) 翔(xiánɡ) 祥(xiánɡ) 详(xiánɡ) 想(xiǎnɡ) 响(xiǎnɡ) 享(xiǎnɡ) 项(xiànɡ) 巷(xiànɡ) 橡(xiànɡ) 像(xiànɡ) 向(xiànɡ) 象(xiànɡ) 萧(xiāo) 硝(xiāo) 霄(xiāo) 削(xuē) 哮(xiāo) 嚣(xiāo) 销(xiāo) 消(xiāo) 宵(xiāo) 淆(xiáo) 晓(xiǎo) 小(xiǎo) 孝(xiào) 校(xiào) 肖(xiāo) 啸(xiào) 笑(xiào) 效(xiào) 楔(xiē) 些(xiē) 歇(xiē) 蝎(xiē) 鞋(xié) 协(xié) 挟(jiā) 携(xié) 邪(xié) 斜(xié) 胁(xié) 谐(xié) 写(xiě) 械(xiè) 卸(xiè) 蟹(xiè) 懈(xiè) 泄(xiè) 泻(xiè) 谢(xiè) 屑(xiè) 薪(xīn) 芯(xīn) 锌(xīn) 欣(xīn) 辛(xīn) 新(xīn) 忻(xīn) 心(xīn) 信(xìn) 衅(xìn) 星(xīnɡ) 腥(xīnɡ) 猩(xīnɡ) 惺(xīnɡ) 兴(xìnɡ) 刑(xínɡ) 型(xínɡ) 形(xínɡ) 邢(xínɡ) 行(hánɡ) 醒(xǐnɡ) 幸(xìnɡ) 杏(xìnɡ) 性(xìnɡ) 姓(xìnɡ) 兄(xiōnɡ) 凶(xiōnɡ) 胸(xiōnɡ) 匈(xiōnɡ) 汹(xiōnɡ) 雄(xiónɡ) 熊(xiónɡ) 休(xiū) 修(xiū) 羞(xiū) 朽(xiǔ) 嗅(xiù) 锈(xiù) 秀(xiù) 袖(xiù) 绣(xiù) 墟(xū) 戌(xū) 需(xū) 虚(xū) 嘘(xū) 须(xū) 徐(xú) 许(hǔ) 蓄(xù) 酗(xù) 叙(xù) 旭(xù) 序(xù) 畜(chù) 恤(xù) 絮(xù) 婿(xù) 绪(xù) 续(xù) 轩(xuān) 喧(xuān) 宣(xuān) 悬(xuán) 旋(xuán) 玄(xuán) 选(xuǎn) 癣(xuǎn) 眩(xuàn) 绚(xuàn) 靴(xuē) 薛(xuē) 学(xué) 穴(xué) 雪(xuě) 血(xuè) 勋(xūn) 熏(xūn) 循(xún) 旬(xún) 询(xún) 寻(xún) 驯(xùn) 巡(xún) 殉(xùn) 汛(xùn) 训(xùn) 讯(xùn) 逊(xùn) 迅(xùn) y 压(yā) 押(yā) 鸦(yā) 鸭(yā) 呀(yɑ) 丫(yā) 芽(yá) 牙(yá) 蚜(yá) 崖(yá) 衙(yá) 涯(yá) 雅(yǎ) 哑(yǎ) 亚(yà) 讶(yà) 焉(yān) 咽(yān) 阉(yān) 烟(yān) 淹(yān) 盐(yán) 严(yán) 研(yán) 蜒(yán) 岩(yán) 延(yán) 言(yán) 颜(yán) 阎(yán) 炎(yán) 沿(yán) 奄(yǎn) 掩(yǎn) 眼(yǎn) 衍(yǎn) 演(yǎn) 艳(yàn) 堰(yàn) 燕(yàn) 厌(yā) 砚(yàn) 雁(yàn) 唁(yàn) 彦(yàn) 焰(yàn) 宴(yàn) 谚(yàn) 验(yàn) 殃(yānɡ) 央(yānɡ) 鸯(yānɡ) 秧(yānɡ) 杨(yánɡ) 扬(yánɡ) 佯(yánɡ) 疡(yánɡ) 羊(yánɡ) 洋(yánɡ) 阳(yánɡ) 氧(yǎnɡ) 仰(yǎnɡ) 痒(yǎnɡ) 养(yǎnɡ) 样(yànɡ) 漾(yànɡ) 邀(yāo) 腰(yāo) 妖(yāo) 瑶(yáo) 摇(yáo) 尧(yáo) 遥(yáo) 窑(yáo) 谣(yáo) 姚(yáo) 咬(yǎo) 舀(yǎo) 药(yào) 要(yào) 耀(yào) 椰(yē) 噎(yē) 耶(yē) 爷(yé) 野(yě) 冶(yě) 也(yě) 页(xié) 掖(yē) 业(yè) 叶(yè) 曳(yè) 腋(yè) 夜(yè) 液(yè) 一(yì) 壹(yī) 医(yī) 揖(yī) 铱(yī) 依(yī) 伊(yī) 衣(yī) 颐(yí) 夷(yí) 遗(yí) 移(yí) 仪(yí) 胰(yí) 疑(yí) 沂(yí) 宜(yí) 姨(yí) 彝(yí) 椅(yǐ) 蚁(yǐ) 倚(yǐ) 已(yǐ) 乙(yǐ) 矣(yǐ) 以(yǐ) 艺(yì) 抑(yì) 易(yì) 邑(yì) 屹(yì) 亿(yì) 役(yì) 臆(yì) 逸(yì) 肄(yì) 疫(yì) 亦(yì) 裔(yì) 意(yì) 毅(yì) 忆(yì) 义(yì) 益(yì) 溢(yì) 诣(yì) 议(yì) 谊(yì) 译(yì) 异(yì) 翼(yì) 翌(yì) 绎(yì) 茵(yīn) 荫(yīn) 因(yīn) 殷(yīn) 音(yīn) 阴(yīn) 姻(yīn) 吟(yín) 银(yín) 淫(yín) 寅(yín) 饮(yǐn) 尹(yǐn) 引(yǐn) 隐(yǐn) 印(yìn) 英(yīnɡ) 樱(yīnɡ) 婴(yīnɡ) 鹰(yīnɡ) 应(yīnɡ) 缨(yīnɡ) 莹(yínɡ) 萤(yínɡ) 营(yínɡ) 荧(yínɡ) 蝇(yínɡ) 迎(yínɡ) 赢(yínɡ) 盈(yínɡ) 影(yǐnɡ) 颖(yǐnɡ) 硬(yìnɡ) 映(yìnɡ) 哟(yō) 拥(yōnɡ) 佣(yōnɡ) 臃(yōnɡ) 痈(yōnɡ) 庸(yōnɡ) 雍(yōnɡ) 踊(yǒnɡ) 蛹(yǒnɡ) 咏(yǒnɡ) 泳(yǒnɡ) 涌(yǒnɡ) 永(yǒnɡ) 恿(yǒnɡ) 勇(yǒnɡ) 用(yònɡ) 幽(yōu) 优(yōu) 悠(yōu) 忧(yōu) 尤(yóu) 由(yóu) 邮(yóu) 铀(yóu) 犹(yóu) 油(yóu) 游(yóu) 酉(yǒu) 有(yǒu) 友(yǒu) 右(yòu) 佑(yòu) 釉(yòu) 诱(yòu) 又(yòu) 幼(yòu) 迂(yū) 淤(yū) 于(yú) 盂(yú) 榆(yú) 虞(yú) 愚(yú) 舆(yú) 余(yú) 俞(yú) 逾(yú) 鱼(yú) 愉(yú) 渝(yú) 渔(yú) 隅(yú) 予(yǔ) 娱(yú) 雨(yǔ) 与(yǔ) 屿(yǔ) 禹(yǔ) 宇(yǔ) 语(yǔ) 羽(yǔ) 玉(yù) 域(yù) 芋(yù) 郁(yù) 吁(xū) 遇(yù) 喻(yù) 峪(yù) 御(yù) 愈(yù) 欲(yù) 狱(yù) 育(yù) 誉(yù) 浴(yù) 寓(yù) 裕(yù) 预(yù) 豫(yù) 驭(yù) 鸳(yuān) 渊(yuān) 冤(yuān) 元(yuán) 垣(yuán) 袁(yuán) 原(yuán) 援(yuán) 辕(yuán) 园(yuán) 员(yuán) 圆(yuán) 猿(yuán) 源(yuán) 缘(yuán) 远(yuǎn) 苑(yuàn) 愿(yuàn) 怨(yuàn) 院(yuàn) 曰(yuē) 约(yuē) 越(yuè) 跃(yuè) 钥(yào) 岳(yuè) 粤(yuè) 月(yuè) 悦(yuè) 阅(yuè) 耘(yún) 云(yún) 郧(yún) 匀(yún) 陨(yǔn) 允(yǔn) 运(yùn) 蕴(yùn) 酝(yùn) 晕(yūn) 韵(yùn) 孕(yùn) z 匝(zā) 砸(zá) 杂(zá) 栽(zāi) 哉(zāi) 灾(zāi) 宰(zǎi) 载(zǎi) 再(zài) 在(zài) 咱(zán) 攒(zǎn) 暂(zàn) 赞(zàn) 赃(zānɡ) 脏(zānɡ) 葬(zànɡ) 遭(zāo) 糟(zāo) 凿(záo) 藻(zǎo) 枣(zǎo) 早(zǎo) 澡(zǎo) 蚤(zǎo) 躁(zào) 噪(zào) 造(zào) 皂(zào) 灶(zào) 燥(zào) 责(zé) 择(zé) 则(zé) 泽(zé) 贼(zéi) 怎(zěn) 增(zēnɡ) 憎(zēnɡ) 曾(cénɡ) 赠(zènɡ) 扎(zhā) 喳(zhā) 渣(zhā) 札(zhá) 轧(zhá) 铡(zhá) 闸(zhá) 眨(zhǎ) 栅(shān) 榨(zhà) 咋(zǎ) 乍(zhà) 炸(zhà) 诈(zhà) 摘(zhāi) 斋(zhāi) 宅(zhái) 窄(zhǎi) 债(zhài) 寨(zhài) 瞻(zhān) 毡(zhān) 詹(zhān) 粘(zhān) 沾(zhān) 盏(zhǎn) 斩(zhǎn) 辗(niǎn) 崭(zhǎn) 展(zhǎn) 蘸(zhàn) 栈(zhàn) 占(zhàn) 战(zhàn) 站(zhàn) 湛(zhàn) 绽(zhàn) 樟(zhānɡ) 章(zhānɡ) 彰(zhānɡ) 漳(zhānɡ) 张(zhānɡ) 掌(zhǎnɡ) 涨(zhǎnɡ) 杖(zhànɡ) 丈(zhànɡ) 帐(zhànɡ) 账(zhànɡ) 仗(zhànɡ) 胀(zhànɡ) 瘴(zhànɡ) 障(zhànɡ) 招(zhāo) 昭(zhāo) 找(zhǎo) 沼(zhǎo) 赵(zhào) 照(zhào) 罩(zhào) 兆(zhào) 肇(zhào) 召(zhào) 遮(zhē) 折(zhé) 哲(zhé) 蛰(zhé) 辙(zhé) 者(zhě) 锗(zhě) 蔗(zhè) 这(zhè) 浙(zhè) 珍(zhēn) 斟(zhēn) 真(zhēn) 甄(zhēn) 砧(zhēn) 臻(zhēn) 贞(zhēn) 针(zhēn) 侦(zhēn) 枕(zhěn) 疹(zhěn) 诊(zhěn) 震(zhèn) 振(zhèn) 镇(zhēn) 阵(zhèn) 蒸(zhēnɡ) 挣(zhènɡ) 睁(zhēnɡ) 征(zhēnɡ) 狰(zhēnɡ) 争(zhēnɡ) 怔(zhēnɡ) 整(zhěnɡ) 拯(zhěnɡ) 正(zhènɡ) 政(zhènɡ) 帧(zhēn) 症(zhènɡ) 郑(zhènɡ) 证(zhènɡ) 芝(zhī) 枝(zhī) 支(zhī) 吱(zhī) 蜘(zhī) 知(zhī) 肢(zhī) 脂(zhī) 汁(zhī) 之(zhī) 织(zhī) 职(zhí) 直(zhí) 植(zhí) 殖(zhí) 执(zhí) 值(zhí) 侄(zhí) 址(zhǐ) 指(zhǐ) 止(zhǐ) 趾(zhǐ) 只(zhī) 旨(zhǐ) 纸(zhǐ) 志(zhì) 挚(zhì) 掷(zhì) 至(zhì) 致(zhì) 置(zhì) 帜(zhì) 峙(zhì) 制(zhì) 智(zhì) 秩(zhì) 稚(zhì) 质(zhì) 炙(zhì) 痔(zhì) 滞(zhì) 治(zhì) 窒(zhì) 中(zhōnɡ) 盅(zhōnɡ) 忠(zhōnɡ) 钟(zhōnɡ) 衷(zhōnɡ) 终(zhōnɡ) 种(zhǒnɡ) 肿(zhǒnɡ) 重(zhònɡ) 仲(zhònɡ) 众(zhònɡ) 舟(zhōu) 周(zhōu) 州(zhōu) 洲(zhōu) 诌(zhōu) 粥(zhōu) 轴(zhóu) 肘(zhǒu) 帚(zhǒu) 咒(zhòu) 皱(zhòu) 宙(zhòu) 昼(zhòu) 骤(zhòu) 珠(zhū) 株(zhū) 蛛(zhū) 朱(zhū) 猪(zhū) 诸(zhū) 诛(zhū) 逐(zhú) 竹(zhú) 烛(zhú) 煮(zhǔ) 拄(zhǔ) 瞩(zhǔ) 嘱(zhǔ) 主(zhǔ) 着(zhe) 柱(zhù) 助(zhù) 蛀(zhù) 贮(zhù) 铸(zhù) 筑(zhù) 住(zhù) 注(zhù) 祝(zhù) 驻(zhù) 抓(zhuā) 爪(zhǎo) 拽(zhuài) 专(zhuān) 砖(zhuān) 转(zhuǎn) 撰(zhuàn) 赚(zhuàn) 篆(zhuàn) 桩(zhuānɡ) 庄(zhuānɡ) 装(zhuānɡ) 妆(zhuānɡ) 撞(zhuànɡ) 壮(zhuànɡ) 状(zhuànɡ) 椎(zhuī) 锥(zhuī) 追(zhuī) 赘(zhuì) 坠(zhuì) 缀(zhuì) 谆(zhūn) 准(zhǔn) 捉(zhuō) 拙(zhuō) 卓(zhuó) 桌(zhuō) 琢(zhuó) 茁(zhuó) 酌(zhuó) 啄(zhuó) 着(zhe) 灼(zhuó) 浊(zhuó) 兹(zī) 咨(zī) 资(zī) 姿(zī) 滋(zī) 淄(zī) 孜(zī) 紫(zǐ) 仔(zǎi) 籽(zǐ) 滓(zǐ) 子(zǐ) 自(zì) 渍(zì) 字(zì) 鬃(zōnɡ) 棕(zōnɡ) 踪(zōnɡ) 宗(zōnɡ) 综(zōnɡ) 总(zǒnɡ) 纵(zònɡ) 邹(zōu) 走(zǒu) 奏(zòu) 揍(zòu) 租(zū) 足(zú) 卒(zú) 族(zú) 祖(zǔ) 诅(zǔ) 阻(zǔ) 组(zǔ) 钻(zuàn) 纂(zuǎn) 嘴(zuǐ) 醉(zuì) 最(zuì) 罪(zuì) 尊(zūn) 遵(zūn) 昨(zuó) 左(zuǒ) 佐(zuǒ) 柞(zhà) 做(zuò) 作(zuō) 坐(zuò) 座(zuò) 转载：https://zhuanlan.zhihu.com/p/429504173","categories":[{"name":"教育","slug":"教育","permalink":"http://www.lvhejin.cn/categories/%E6%95%99%E8%82%B2/"},{"name":"语文","slug":"教育/语文","permalink":"http://www.lvhejin.cn/categories/%E6%95%99%E8%82%B2/%E8%AF%AD%E6%96%87/"}],"tags":[{"name":"儿童识字","slug":"儿童识字","permalink":"http://www.lvhejin.cn/tags/%E5%84%BF%E7%AB%A5%E8%AF%86%E5%AD%97/"},{"name":"常用汉字","slug":"常用汉字","permalink":"http://www.lvhejin.cn/tags/%E5%B8%B8%E7%94%A8%E6%B1%89%E5%AD%97/"}]},{"title":"Go-import导入包详解","slug":"Go/Go-import导入包详解","date":"2022-12-12T21:10:22.000Z","updated":"2024-01-05T17:32:17.615Z","comments":true,"path":"2022/12/12/Go/Go-import导入包详解/index.html","link":"","permalink":"http://www.lvhejin.cn/2022/12/12/Go/Go-import%E5%AF%BC%E5%85%A5%E5%8C%85%E8%AF%A6%E8%A7%A3/index.html","excerpt":"","text":"文章目录 1. 单行导入 2. 多行导入 3. 使用别名 4. 使用点操作 5. 包的初始化 6. 包的匿名导入 7. 导入的是路径还是包？ 8. 相对导入和绝对导入 9. 包导入路径优先级 1. 单行导入12import &quot;fmt&quot;import &quot;sync&quot; 2. 多行导入1234import( &quot;fmt&quot; &quot;sync&quot;) 3. 使用别名我们导入了两个具有同一包名的包时产生冲突，此时这里为其中一个包定义别名 1234import ( &quot;crypto/rand&quot; mrand &quot;math/rand&quot; // 将名称替换为mrand避免冲突) 我们导入了一个名字很长的包，为了避免后面都写这么长串的包名，可以这样定义别名 1import hw &quot;helloworldtestmodule&quot; 防止导入的包名和本地的变量发生冲突，比如 path 这个很常用的变量名和导入的标准包冲突。 1import pathpkg &quot;path&quot; 4. 使用点操作如里在我们程序内部里频繁使用了一个工具包，比如 fmt，那每次使用它的打印函数打印时，都要 包名+方法名。 对于这种使用高频的包，可以在导入的时，就把它定义会 “自己人”（方法是使用一个 . ），自己人的话，不分彼此，它的方法，就是我们的方法。 从此，我们打印再也不用加 fmt 了。 12345import . &quot;fmt&quot;func main() &#123; Println(&quot;hello, world&quot;)&#125; 但这种用法，会有一定的隐患，就是导入的包里可能有函数，会和我们自己的函数发生冲突。 5. 包的初始化每个包都允许有一个或多个的 init 函数，当这个包被导入时，会执行该包的这个 init 函数，做一些初始化任务。 对于 init 函数的执行有两点需要注意 init 函数优先于 main 函数执行 在一个包引用链中，包的初始化是深度优先的。比如，有这样一个包引用关系：main→A→B→C，那么初始化顺序为 1C.init→B.init→A.init→main 6. 包的匿名导入当我们导入一个包时，如果这个包没有被使用到，在编译时，是会报错的。 但是有些情况下，我们导入一个包，只想执行包里的 init 函数，来运行一些初始化任务，此时怎么办呢？ 可以使用匿名导入，用法如下，其中下划线为空白标识符，并不能被访问 // 注册一个PNG decoder 1import _ &quot;image/png&quot; 由于导入时，会执行 init 函数，所以编译时，仍然会将这个包编译到可执行文件中。 7. 导入的是路径还是包？当我们使用 import 导入 testmodule/foo 时，初学者，经常会问，这个 foo 到底是一个包呢，还是只是包所在目录名？ 1import &quot;testmodule/foo&quot; 为了得出这个结论，专门做了个试验（请看「第七点里的代码示例」），最后得出的结论是： 导入时，是按照目录导入。导入目录后，可以使用这个目录下的所有包。 出于习惯，包名和目录名通常会设置成一样，所以会让你有一种你导入的是包的错觉 8. 相对导入和绝对导入据我了解在 Go 1.10 之前，好像是不支持相对导入的，在 Go 1.10 之后才可以。 绝对导入：从 $GOPATH/src 或 $GOROOT 或者 $GOPATH/pkg/mod 目录下搜索包并导入 相对导入：从当前目录中搜索包并开始导入。就像下面这样 123456import ( &quot;./module1&quot; &quot;../module2&quot; &quot;../../module3&quot; &quot;../module4/module5&quot;) 9. 包导入路径优先级前面一节，介绍了三种不同的包依赖管理方案，不同的管理模式，存放包的路径可能都不一样，有的可以将包放在 GOPATH 下，有的可以将包放在 vendor 下，还有些包是内置包放在 GOROOT 下。 那么问题就来了，如果在这三个不同的路径下，有一个相同包名但是版本不同的包，我们导入的时候，是选择哪个进行导入呢？ 这就需要我们搞懂，在 Golang 中包搜索路径优先级是怎样的？ 这时候就需要区分，是使用哪种模式进行包的管理的。 如果使用 govendor 当我们导入一个包时，它会： 先从项目根目录的 vendor 目录中查找 然后从 $GOROOT/src 目录下查找 最后从 $GOPATH/src 目录下查找 都找不到的话，就报错。 为了验证这个过程，我在创建中创建一个 vendor 目录后，就开启了 vendor 模式了，我在 main.go 中随便导入一个包 pkg，由于这个包是我随便指定的，当然会找不到，找不到就会报错， Golang 会在报错信息中打印中搜索的过程，从这个信息中，就可以看到 Golang 的包查找优先级了。 如果使用 go modules 你导入的包如果有域名，都会先在 $GOPATH/pkg/mod 下查找，找不到就连网去该网站上寻找，找不到或者找到的不是一个包，则报错。 而如果你导入的包没有域名（比如 “fmt”这种），就只会到 $GOROOT 里查找。 还有一点很重要，当你的项目下有 vendor 目录时，不管你的包有没有域名，都只会在 vendor 目录中想找。 通常vendor 目录是通过 go mod vendor 命令生成的，这个命令会将项目依赖全部打包到你的项目目录下的 verdor 文件夹中。","categories":[{"name":"Go","slug":"Go","permalink":"http://www.lvhejin.cn/categories/Go/"}],"tags":[{"name":"import","slug":"import","permalink":"http://www.lvhejin.cn/tags/import/"}]},{"title":"Go语言MySQL时区问题","slug":"Go/Go语言MySQL时区问题","date":"2022-12-12T20:55:29.000Z","updated":"2024-01-05T17:32:17.619Z","comments":true,"path":"2022/12/12/Go/Go语言MySQL时区问题/index.html","link":"","permalink":"http://www.lvhejin.cn/2022/12/12/Go/Go%E8%AF%AD%E8%A8%80MySQL%E6%97%B6%E5%8C%BA%E9%97%AE%E9%A2%98/index.html","excerpt":"","text":"原文见：Go语言MySQL时区问题 - Jiajun的编程随想 最近由于我要统一技术栈，因此把原本使用SQLite做存储的数据全部迁移到MySQL。博客也是。不过当我检查数据库时，发现时间和 我产生数据的时间相差8小时。 首先检查机器的时间： 12$ dateThu 14 Nov 2019 11:13:59 AM CST 检查MySQL的时间： 1234567&gt; select now();+---------------------+| now() |+---------------------+| 2019-11-14 11:14:42 |+---------------------+1 row in set (0.000 sec) 检查Go的时间： 12345678910package mainimport ( &quot;fmt&quot; &quot;time&quot;)func main() &#123; fmt.Printf(&quot;now: %s\\n&quot;, time.Now())&#125; 执行： 12$ go run main.go now: 2019-11-14 11:16:44.277801507 +0800 CST m=+0.000070270 检查数据时间： 1234567&gt; select * from issue order by id desc limit 1;+-----+---------------------+---------------------+------------+------------+----------------------------------+| id | created_at | updated_at | deleted_at | content | url |+-----+---------------------+---------------------+------------+------------+----------------------------------+| 285 | 2019-11-14 01:54:53 | 2019-11-14 01:54:57 | NULL | htop详解 | https://peteris.rocks/blog/htop/ |+-----+---------------------+---------------------+------------+------------+----------------------------------+1 row in set (0.000 sec) 1点？这是不可能的。 综合上面的检查结果，我们知道： Go的程序输出的时间没有问题 系统的时间也没有问题 数据库的时间也没有问题 本地开发机器的时间也没有问题 那么问题会在哪里呢？我的经验告诉我，可能是数据库驱动的锅。检查一下配置： 1SQLX_URL=&quot;user:abcdefg@(localhost:3306)/blog?parseTime=true&quot; 发现我之前加了 parseTime=true，如果不加的话，就无法让驱动把MySQL的 DATETIME 类型和Go的 time.Time 互转。于是查了一下 文档，发现需要用loc来指定时区。我选择和机器一致，因此改成下面即可： 1SQLX_URL=&quot;user:abcdefg@(localhost:3306)/blog?parseTime=true&amp;loc=Local&quot; 参考资料： https://github.com/go-sql-driver/mysql","categories":[{"name":"Go","slug":"Go","permalink":"http://www.lvhejin.cn/categories/Go/"}],"tags":[{"name":"Go","slug":"Go","permalink":"http://www.lvhejin.cn/tags/Go/"},{"name":"MySQL","slug":"MySQL","permalink":"http://www.lvhejin.cn/tags/MySQL/"},{"name":"开发异常","slug":"开发异常","permalink":"http://www.lvhejin.cn/tags/%E5%BC%80%E5%8F%91%E5%BC%82%E5%B8%B8/"}]},{"title":"Java判断IP是否为指定网段","slug":"Java/Java判断IP是否为指定网段","date":"2022-11-21T18:07:51.000Z","updated":"2024-01-05T17:32:17.623Z","comments":true,"path":"2022/11/21/Java/Java判断IP是否为指定网段/index.html","link":"","permalink":"http://www.lvhejin.cn/2022/11/21/Java/Java%E5%88%A4%E6%96%ADIP%E6%98%AF%E5%90%A6%E4%B8%BA%E6%8C%87%E5%AE%9A%E7%BD%91%E6%AE%B5/index.html","excerpt":"","text":"一、IP（ipv4）IP是Internet Protocol（网际互连协议）,是计算机网络体系结构中的网络层协议。IP协议定义地址是一个32位的地址，（ipv6是128位），使用点分十进制表示法，每8位分开来表示也就是我们常说的IP地址，例如：30.14.234.254该地址分为两个部分network+host(网络位+主机位)，具体各占几位，不一定。网络位是指你这个设备是处于哪个网段的，主机位是定位你是当前网络的哪一台设备。 二、IP分类传统的ip地址分类：分为A\\B\\C\\D\\E五类abc类是正常使用的地址，d类为组播地址，e类为保留地址，一般人是不给使用的这个主要说一下abc类A 0xxxxxxx.8个网络位 一般给大型网络使用 有 2的24次方-2 个主机位 主机 地址全0全1不可以用主机位全0为网络地址 主机位全1为广播地址 发送数据给广播地址 这个网段所有的设备都要去处理数据B 10xxxxxx.xxxxxxxx. 16个网络位C 110xxxxx.xxxxxxxx.xxxxxxxx. 24个网络位D 11110开头E 111110开头根据规定各类地址的范围我们是可以算出来的A 0 0000001～0 11111110 （1-126即 1.0.0.0～126.255.255.255）0和 127整个网段是保留的B 10 000000～10 111111 （128-191即 128.0.0.0～191.255.255.255）C 110 00000～110 11111 （192-223即 192.0.0.0～223.255.255.255） 私网地址：A 整个10网段 即（10.0.0.0～10.255.255.255）B 127.16-172.31 即（172.16.0.0～127.31.255.255）C 192.168 即（192.168.0.0～192.168.255.255） 三、vlsm子网划分&amp;掩码子网掩码也是32位长，网络位为1，主机位为0。两中表示方法：点分十进制表示法 255.255.255.0 位计数表示法/24作用:子网掩码的作用就是来告诉我们，到底网络位占几个位的 四、子网划分1+2+4+8+16+32+64=129&gt;128所以要借7位列举：172.16.00000010.0 即172.168.2.0172.16.00000100.0 即172.168.4.0172.16.00000110.0 即172.168.6.0172.16.00001000.0 即172.168.8.0) 五、判断ip是否为指定网段代码实现123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566public class IpUtils &#123; /** * 判断ip是否在指定网段 * * @param ip 8.8.8.8 * @param ipArea 0.0.0.0/0,123.0.28.0/24,42.120.174.0/23,60.191.28.82 * @return bool */ public static boolean ipIsInNet(String ip, String ipArea) &#123; if (&quot;127.0.0.1&quot;.equals(ip) ) &#123; return true; &#125; if(StringUtils.isBlank(ipArea))&#123; return false; &#125; String[] ipArray = ipArea.split(&quot;,&quot;); for (String s : ipArray) &#123; if(s.equals(&quot;0.0.0.0/0&quot;))&#123; return true; &#125; if (!s.contains(&quot;/&quot;)) &#123; if (s.equals(ip)) &#123; return true; &#125; continue; &#125; String[] ips = ip.split(&quot;\\\\.&quot;); //ip地址的十进制值 int ipAddress = (Integer.parseInt(ips[0]) &lt;&lt; 24) | (Integer.parseInt(ips[1]) &lt;&lt; 16) | (Integer.parseInt(ips[2]) &lt;&lt; 8) | Integer.parseInt(ips[3]); //掩码（0-32） int type = Integer.parseInt(s.replaceAll(&quot;.*/&quot;, &quot;&quot;)); //匹配的位数为32 - type位（16进制的1） int mask = 0xFFFFFFFF &lt;&lt; (32 - type); String cidrIp = s.replaceAll(&quot;/.*&quot;, &quot;&quot;); //网段ip十进制 String[] cidrIps = cidrIp.split(&quot;\\\\.&quot;); int cidrIpAddr = (Integer.parseInt(cidrIps[0]) &lt;&lt; 24) | (Integer.parseInt(cidrIps[1]) &lt;&lt; 16) | (Integer.parseInt(cidrIps[2]) &lt;&lt; 8) | Integer.parseInt(cidrIps[3]);// log.info(&quot;mask:&quot;+mask+&quot; ipAddress:&quot;+ipAddress+&quot; cidrIpAddr:&quot;+cidrIpAddr);// log.info(&quot;(ipAddress &amp; mask)=&quot;+(ipAddress &amp; mask) + &quot; (cidrIpAddr &amp; mask)=&quot;+(cidrIpAddr &amp; mask)); if((ipAddress &amp; mask) == (cidrIpAddr &amp; mask))&#123; return true; &#125; &#125; return false; &#125; public static void main(String[] args) &#123; Stopwatch stopwatch = Stopwatch.createStarted(); for (int i=0;i&lt;1;i++ )&#123; System.out.println(ipIsInNet(&quot;45.120.175.250&quot;,&quot;0.0.0.0/0,123.0.28.0/24,42.120.174.0/23,60.191.28.82&quot;));// ipIsInNet(&quot;42.120.174.11&quot;,&quot;123.0.28.0/24,42.120.174.0/23,60.191.28.82&quot;); &#125; log.info(&quot;[耗时：&#123;&#125;]&quot;, stopwatch.stop()); &#125;&#125; ————————————————转载：https://blog.csdn.net/ChengChengxn/article/details/109039175","categories":[{"name":"Java","slug":"Java","permalink":"http://www.lvhejin.cn/categories/Java/"}],"tags":[{"name":"IP","slug":"IP","permalink":"http://www.lvhejin.cn/tags/IP/"}]},{"title":"Git MV 解决文件名大小写不敏感问题","slug":"Git/Git-mv解决文件名大小写不敏感问题","date":"2022-11-21T17:12:06.000Z","updated":"2024-01-05T17:32:17.599Z","comments":true,"path":"2022/11/21/Git/Git-mv解决文件名大小写不敏感问题/index.html","link":"","permalink":"http://www.lvhejin.cn/2022/11/21/Git/Git-mv%E8%A7%A3%E5%86%B3%E6%96%87%E4%BB%B6%E5%90%8D%E5%A4%A7%E5%B0%8F%E5%86%99%E4%B8%8D%E6%95%8F%E6%84%9F%E9%97%AE%E9%A2%98/index.html","excerpt":"","text":"在将项目部署到 linux 环境下，报了许多由于文件名大小写不敏感而疏忽的问题，然而在本地系统（Mac）改变了文件名后，同样出现了由于git对文件名大小写不敏感的原因，git status 却找不到变化文件的状况。 通过查询网上的解析，得知可以利用 git mv 来解决此类问题，语句具体使用方法如下： 1git mv 旧文件名 新文件名 举个例子，我要将 app/components/modal 文件夹名改为 app/components/Modal 就可以这样写 1git mv app/components/modal app/components/Modal 这是大部分网上给出的解决方案，不过这是有问题的，经过本人测试，在这只在 linux 环境下生效，而在对文件名大小写不敏感的 Mac 环境，是会报以下的错的！ 在 Mac 环境下需要多加一步 12git mv app/components/modal app/components/modal1git mv app/components/modal1 app/components/Modal 通过多一次的转换，实现 app/components/modal 到 app/components/Modal 的改变————————————————转载：https://blog.csdn.net/zwkkkk1/article/details/94154727","categories":[{"name":"Git","slug":"Git","permalink":"http://www.lvhejin.cn/categories/Git/"}],"tags":[{"name":"mv","slug":"mv","permalink":"http://www.lvhejin.cn/tags/mv/"},{"name":"大小写","slug":"大小写","permalink":"http://www.lvhejin.cn/tags/%E5%A4%A7%E5%B0%8F%E5%86%99/"}]},{"title":"Git修改文件夹大小写问题","slug":"Git/Git修改文件夹大小写问题","date":"2022-11-21T17:04:15.000Z","updated":"2024-01-05T17:32:17.599Z","comments":true,"path":"2022/11/21/Git/Git修改文件夹大小写问题/index.html","link":"","permalink":"http://www.lvhejin.cn/2022/11/21/Git/Git%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E5%A4%B9%E5%A4%A7%E5%B0%8F%E5%86%99%E9%97%AE%E9%A2%98/index.html","excerpt":"","text":"前因今天在写需求的时候，看到组件的文件夹为小写，所以打算将其改为大写开头，使用了以下操作： 12345## 查看git忽略大小写情况git config --get core.ignorecase## 关闭忽略大小写git conig core.ignorecase false复制代码 然后在本地将文件夹的命名进行了修改操作，add -&gt; commit -&gt; push，一顿操作后将修改推送到了远端。 后来在部署测试环境的时候遇到了报错，大致意思就是“文件重复了，它们仅仅文件夹的大小写不同”，我到仓库一看，果然有两个文件夹： 解决方法在网上寻找了两种解决方法，如下： 方法一123456789101112## 关闭忽略大小写git conig core.ignorecase false## 删除无用的文件夹下的所有文件git rm --cached 要删除文件夹路径(注意大小写，删除小写的就写小写) -r## 如果删除多个可以拼接git rm --cached 文件夹1路径 文件夹2路径 -r## 提交，推送到远程仓库commit -&gt; push复制代码 方法二 删除本地所有待修正文件夹，然后在待commit列表中，会发现有大写，也有小写文件夹下的文件，均处于删除状态 将想要删除的文件夹add到暂存区 commit -&gt; push 将不想删除的文件夹从工作区撤回 问题原因由于Windows和Mac系统默认是不区分大小写的，但是Linux是区分大小写的。 所以当我们将将文件夹的名称由小写改成大写后，对于Windows和Mac系统来说，文件是没有变化的。 也因此，在修改命名为大写后，执行git status的结果中，显示只增加了一些文件，该删除的文件并没有显示被删除，所以当我们在这种情况下commit一条记录后，实际上git中原来的小写文件夹并没有被删除，而是大写和小写共存了。 此时将记录push到远程，由于服务器一般都是Linux系统，所以可以将大写和小写文件夹一同展示出来。所以就出现了这个文件夹重复的问题。 当然，这个原因也有我个人的猜测在里面，毕竟没有去刨git的源码😂。 最后 git默认是忽略大小写的，建议保留默认配置，不要随意修改，避免出现不必要的麻烦。 文件夹命名也可以使用“中划线”的形式，这样就不会有文件夹大小写的问题。 参考文章 blog.csdn.net/weixin_4929… t.zoukankan.com/linys2333-p… www.cnblogs.com/qianguyihao… 转载：https://juejin.cn/post/7109435103968755726","categories":[{"name":"Git","slug":"Git","permalink":"http://www.lvhejin.cn/categories/Git/"}],"tags":[{"name":"大小写","slug":"大小写","permalink":"http://www.lvhejin.cn/tags/%E5%A4%A7%E5%B0%8F%E5%86%99/"},{"name":"Git","slug":"Git","permalink":"http://www.lvhejin.cn/tags/Git/"}]},{"title":"Nmap使用教程（进阶篇）","slug":"网络安全/安全测试/Nmap使用教程（进阶篇）","date":"2022-11-21T15:58:05.000Z","updated":"2024-01-05T17:32:17.655Z","comments":true,"path":"2022/11/21/网络安全/安全测试/Nmap使用教程（进阶篇）/index.html","link":"","permalink":"http://www.lvhejin.cn/2022/11/21/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95/Nmap%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%E7%AF%87%EF%BC%89/index.html","excerpt":"","text":"什么是防火墙？防火墙是用来控制网络访问的软件或硬件。分为以下两类：1、基于主机的防火墙；2、基于网络的防火墙。基于主机的防火墙 这是在单台主机上运行的软件，用来控制入站流量（从网络向主机）和出站流量（从主机向网络）。这些软件安装于操作系统之上，常见例子就是Linux上面的iptables和Windows上的Zone Alarm。基于网络的防火墙 这些可以是硬件设备或软件，或者硬件设备和软件相结合，用来保护来自于未受保护的入站通信。 防火墙被安装在受保护和不受保护的网络之间，它们会查看所有的通信，并通过设置规则来控制入站和出站的通信。 进阶扫描技术逃避或绕过防火墙bypass或规避或逃避无非是进入系统的另一种方式。管理员使用防火墙或IDS / IPS阻止恶意攻击或垃圾邮件。但是从攻击者的角度来看，他会想办法绕过防火墙规则；Nmap有很多办法绕过防火墙。 1、碎片化Nmap发送8个字节的数据包绕过防火墙/IDS/IPS。这种技术已经很古老了，但是在防火墙配置不当的时候依旧有用。 1nmap -f host MTU，最大传输单元，它是碎片化的别名，我们可以指定它的大小。 1Nmap --mtu 16 host #使用16字节的数据包，我们可以指定自定义数据包大小为8的倍数。 2、诱饵这种类型的扫描是非常隐蔽且无法察觉。目标由多个假冒或伪造IP地址进行扫描。这样防火墙就会认为攻击或扫描是通过多个资源或IP地址进行，于是就绕过了防火墙。 诱饵在初始的ping扫描（使用ICMP，SYN，ACK等）使用，在实际的端口扫描阶段使用。诱饵在远程操作系统检测（-O）期间也使用。诱饵不在版本检测工作或TCP连接扫描中使用。 这实际上在目标看来是由多个系统同时扫描，这使得防火墙更难追查扫描的来源。 我们这虚拟的实验环境中测试一下，把192.168.50.12作为目标主机，192.168.50.10是发起扫描主机，192.168.50.16和192.168.50.15是诱饵主机。在目标主机（这里使用的是Kali Linux）输入以下命令： 1nmap -D192.168.50.15,192.168.50.16,ME -p 21,22,80,443 -Pn 192.168.50.12 -D开关表示实施一次诱饵扫描，-D后面紧跟选择好的诱饵主机的IP地址列表并且这些主机都在线。-Pn不发ping请求包，-p选择扫描的端口范围。“ME”可以用来代替输入自己主机的IP。 以下是扫描结果： 在网络上。我们来看一看流量(可以使用wireshark）：现在观察源地址那一列，会发现我们使用的诱饵主机构成了网络流量的主要记录。只要使用足够多的诱饵主机，就会在短时间内产生大量的记录，从而在进行扫描时完成迷惑和延迟网络管理员的注意。 3、空闲扫描攻击者将首先利用一个空闲的系统并用它来扫描目标系统。 扫描的工作原理是利用某些系统中采用可预见的IP序列ID生成。为了使空闲扫描成功，僵尸主机的系统必须是在扫描时间处于闲置状态。对于任何疑问，请参考之前的文章。 在这种技术中会隐藏攻击者的IP地址。 01、认识空闲主机 空闲主机是一台可用作欺骗目标IP地址且具有可预设的IP ID序列号的机器。 02、寻找空闲主机 寻找空闲主机我们可以借助Nmap提供的ipidseq脚本。具体有两种寻找方式。第一种是全网段寻找，这种方式会在我们主机所在的网段进行探测寻找空闲主机。具体命令是nmap -p80 –open –script ipidseq /24。第二种是网上随机式扫描，这种方式会在网上随机寻找空闲主机。具体命令是：nmap -p80 –open –script ipidseq -iR 200。（-iR选项代表随机选择目标，200代表随机选择目标的数量,–open代表只选择端口开放状态的空闲主机） 注意：红框输出结果只用作参考，在空闲扫描中存在许多不确定性，不是说是空闲主机就可以成功利用 04、开启空闲扫描 开启空闲扫描只需要执行以下命令： 1nmap –Pn -sI zombie target #-sI选项调用空闲扫描，-Pn关闭主机发现操作 在空闲扫描的时候使用网上随机获取的空闲主机可能会出现ip地址与目标ip路径距离较远，使得空闲主机之间的通信出现延迟最终有可能造成空闲扫描失败的情况。建议最好去使用目标主机同网段下的空闲主机，这样成功的概率会比较高。 在进行空闲扫描的时候有可能遇到以下错误：有可能出现以下错误: 1.防火墙拦截数据。2.目标主机抛弃数据包。3.代理不可用。（解决办法是更换僵尸主机） 4、选项–source-port每个TCP数据包带有源端口号。默认情况下Nmap会随机选择一个可用的传出源端口来探测目标。该–source-port选项将强制Nmap使用指定的端口作为源端口。这种技术是利用了盲目地接受基于特定端口号的传入流量的防火墙的弱点。端口21（FTP），端口53（DNS）和67（DHCP）是这种扫描类型的常见端口。 1nmap --source-port 53 target 5、随机数据长度附加随机数据长度，我们也可以绕过防火墙。许多防火墙通过检查数据包的大小来识别潜伏中的端口扫描。这是因为许多扫描器会发送具有特定大小的数据包。为了躲避那种检测，我们可以使用命令–data-length增加额外的数据，以便与默认大小不同。在下图中，我们通过加入25多个字节改变数据包大小。 1nmap --data-length 25 target 6、随机顺序扫描目标选项–randomize-host用于随机 顺序扫描指定目标。–randomize-host有助于防止因连续 扫描多个目标而防火墙和入侵检测系统检测到。 1nmap --randomize-hosts targets 7、MAC地址欺骗每台机器都有自己独特的mac地址。因此这也是绕过防火墙的另一种方法，因为某些防火墙是基于MAC地址启用规则的。为了获得扫描结果，您需要先了解哪些MAC地址可以使用。这可以通过手动或先进的模糊测试完成。我更喜欢模糊测试，用Python实现非常容易。我们只需要手工导入正则表达式到Python中，然后自动化执行。 特别是–spoof-MAC选项使您能够从一个特定的供应商选择一个MAC地址，选择一个随机的MAC地址，或者设定您所选择的特定MAC地址。 MAC地址欺骗的另一个优点是，你让你的扫描隐蔽，因为你的实际MAC地址就不会出现在防火墙的日志文件。 1nmap -sT -PN –spoof-mac aa:bb:cc:dd:ee:ff target 8、发送错误校验在某些防火墙和IDS / IPS，只会检查有正确校验包的数据包。因此，攻击者通过发送错误校验欺骗IDS / IPS。 1nmap --badsum target Nmap脚本的使用Nmap的脚本主要分为以下几类： 1234567891011121314- Auth：负责处理鉴权证书（绕过鉴权）的脚本。- Broadcast：在局域网内探查更多服务的开启情况，如DHCP/DNS/SQLServer等。- Brute：针对常见的应用提供暴力破解方式，如HTTP/SMTP等。- Default：使用-sC或-A选项扫描时默认的脚本，提供基本的脚本扫描能力。- Discovery：对网络进行更多信息的搜集，如SMB枚举、SNMP查询等。- Dos：用于进行拒绝服务攻击。- Exploit：利用已知的漏洞入侵系统。- External：利用第三方的数据库或资源。例如，进行Whois解析。- Fuzzer：模糊测试脚本，发送异常的数据包到目标机，探测潜在漏洞。- Intrusive：入侵性脚本，此类脚本可能引发对方的IDS/IPS的记录或屏蔽。- Malware：探测目标是否感染了病毒、开启后门等信息。- Safe：此类与Intrusive相反，属于安全性脚本。- Version：负责增强服务与版本扫描功能的脚本。- Vuln：负责检查目标机器是否有常见漏洞，如MS08-067。 1、nmap的HTTP方法Web服务器根据它们的配置和软件支持不同的HTTP方法，并且其中一些请求在一定条件下是危险的。HTTP的方法有GET, HEAD, POST, TRACE, DEBUG, OPTION, DELETE, TRACK, PUT等。 1nmap -p80,443 --script http-methods scanme.nmap.org 如果需要详细的检查，那么命令： 1nmap -p80,443 --script http-methods –script-args http-methods.retest scanme.nmap.org 默认情况下，脚本http-methods使用根文件夹为基础路径（/）。如果我们要设置一个不同的基本路径，设置参数的HTTP methods.url路径： 1nmap -p80,443 --script http-methods --script-args http-methods.urlpath=/mypath/ scanme.nmap.org HTTP方法TRACE，CONNECT，PUT和DELETE可能会出现安全风险，如果一个Web服务器或应用程序的支持这些方法的话，需要进行彻底测试。 TRACE使应用程序容易受到跨站跟踪（XST）攻击，可能导致攻击者访问标记为的HttpOnly的Cookie。 CONNECT方法可能会允许Web服务器作为未经授权的Web代理。 PUT和DELETE方法具有改变文件夹的内容的能力，如果权限设置不正确可能被滥用。 你可以了解每个方法更多的风险到：https://www.owasp.org/index.php/Test_HTTP_Methods_(OTG-CONFIG-006) 2、HTTP User Agent有些防火墙会过滤Nmap的默认UserAgent，你可以设置不同的用户代理。 1nmap -p80 --script http-methods --script-args http.useragent=”Mozilla 5” &lt;target&gt; 3、HTTP管道一些web服务器允许多个HTTP请求的封装在一个包。这可以加快脚本执行的速度，如果web服务器支持的话建议启用。默认情况下一个管道会有40个请求，并且会根据网络情况自动调节大小。 1nmap -p80 --script http-methods --script-args http.pipeline=25 &lt;target&gt; 另外，我们可以设置http.max-pipeline参数来控制http管道的最大值。如果设置了该参数，nmap会自动忽略http.pipeline。 1nmap -p80 --script http-methods --script-args http.max-pipeline=10 &lt;target&gt; 4、扫描HTTP代理使用http代理是为了隐藏自己的真实ip地址。下列命令显示如何检测开放代理： 1nmap --script http-open-proxy -p8080 &lt;target&gt; 我们还可以指定用来验证的url。 1nmap --script http-open-proxy --script-args http-open-proxy.url=http://whatsmyip.org,http-open-proxy.pattern=”Your IP address” -p8080 &lt;target&gt; 5、发现有趣的文件和目录和管理员账户这是在渗透测试中常见的任务，通常采用自动化工具完成。经常讨论的Web应用程序的脆弱性有目录列表，用户账户枚举，配置文件等。用Nmap的NSE可以更快的帮助我们完成这个任务。 1nmap --script http-enum -p80 &lt;target&gt; 查找lua脚本 指纹存储在nselib/data/http-fingerprints.lua，事实上是LUA表格。若要显示所有的存在页面 1nmap script http-enum http-enum.displayall -p80 &lt;target&gt; 指定不同的User Agent来绕过某些防火墙 1nmap -p80 --script http-enum --script-args http.useragent=”Mozilla 5″&lt;target&gt; 也可以指定HTTP管道数目来加快扫描 1nmap -p80 --script http-enum --script-args http.pipeline=25 &lt;target&gt; 6、暴力破解HTTP身份认证很多家用路由器，IP网络摄像头，甚至是Web应用程序仍然依赖于HTTP认证，渗透测试人员需要尝试弱密码的单词列表，以确保系统或用户帐户是安全的。现在多亏了NSE脚本http-brute，我们可以对HTTP认证保护的资源执行强大的字典攻击。请参见下面的命令： 1nmap -p80 --script http-brute --script-args http-brute.path=/admin/ &lt;target&gt; http-brute脚本默认使用的是自带的字典，如果要使用自定义的字典。 1nmap -p80 --script http-brute --script-args userdb=/var/usernames.txt,passdb=/var/passwords.txt &lt;target&gt; http-brute支持不同的模式进行攻击。用户模式：该模式下，对于userdb中的每个user,会尝试passdb里面的每个password 1nmap --script http-brute --script-args brute.mode=user &lt;target&gt; 密码模式：该模式下，对于passdb中的每个password,会尝试userdb里面的每个user。 1nmap --script http-brute --script-args brute.mode=pass &lt;target&gt; fcreds：此模式需要额外的参数brute.credfile。 1nmap --script http-brute --script-args brute.mode=creds,brute.credfile=./creds.txt &lt;target&gt; 7、mod_userdir渗透测试Apache的模块UserDir提供了通过使用URI语法/~username/来访问用户目录的方法。我们可以使用Nmap进行字典攻击，确定web服务器上有效的用户名列表。 1nmap -p80 –script http-userdir-enum &lt;target&gt; 跟上面的脚本一样，可以设置User Agent、HTTP管道参数。 8、测试默认账号通常情况下Web应用程序存在默认凭据，通过NSE很容易发现。 1nmap -p80 --script http-default-accounts &lt;target&gt; 脚本通过查找已知路径和已知的用户密码来登陆，依赖/nselib/data/http-default-accounts.nse存放的指纹文件。 9、WordPress审计发现使用弱密码账户安装的wordpress，输入如下命令： 1nmap -p80 --script http-wordpress-brute &lt;target&gt; 设置线程的数量,使用脚本参数http-wordpress-brute.threads： 1nmap -p80 --script http-wordpress-brute --script-args http-wordpressbrute.threads=5 &lt;target&gt; 如果服务器是虚拟主机,利用参数http-wordpressbrute设置主机字段： 1nmap -p80 --script http-wordpress-brute --script-args http-wordpressbrute.hostname=”ahostname.wordpress.com” &lt;target&gt; 设置一个不同的登陆URI,登录使用参数http-wordpress-brute.uri： 1nmap -p80 --script http-wordpress-brute --script-args http-wordpressbrute.uri=”/hidden-wp-login.php” &lt;target&gt; 要改变存储的用户名和密码的POST变量的名称，设置参数http-wordpress-brute.uservar和http-wordpress-brute.passvar: 1nmap -p80 --script http-wordpress-brute --script-args http-wordpressbrute.uservar=usuario,http-wordpress-brute.passvar=pasguord &lt;target&gt; 10、Joomla审计Joomla是在许多国家非常流行的cms，使用http-joomla-brute脚本来检测弱密码账户。 1nmap -p80 --script http-joomla-brute &lt;target&gt; 注：Wordpress的方法也适用于Joomla。 11、扫描目标网站备份http-backup-finder.nse 1nmap -p80 --script=http-backup-finder 192.168.3.0/24 12、iis6.0远程代码执行调用http-vuln-cve2015-1635.nse测试脚本： 1nmap -sV --script http-vuln-cve --script-args uri=&#x27;anotheruri&#x27; 192.168.3.0/24 nmap官方脚本文档中有部分cve漏洞的测试脚本，大家可以根据需要调用 13、检测Web应用防火墙要检测web应用防火墙，使用如下命令： 1nmap -p80 --script http-waf-detect &lt;target&gt; 可以通过检测响应内容的变化来检测防火墙，推荐使用内容较少的页面。 1nmap -p80 --script http-waf-detect --script-args=”http-waf-detect.detectBodyChanges” &lt;target&gt; 使用更多的攻击载荷： 1nmap -p80 --script http-waf-detect --script-args=”http-waf-detect.aggro” &lt;target&gt; 14、检测跨站跟踪漏洞当Web服务器存在跨站脚本漏洞，又启用了TRACE方法，这样就可以获取启用了HttpOnly的Cookie。如下命令检测是否启用TRACE。 1nmap -p80 --script http-methods,http-trace --script-args http-methods.retest &lt;target&gt; 15、检测XSS漏洞跨站脚本漏洞允许攻击者执行任意js代码。检测命令如下： 1nmap -p80 --script http-unsafe-output-escaping &lt;target&gt; 该脚本会检测基于用户输入的输出可能出现的问题，发送以下内容到它发现的所有参数：ghz%3Ehzx%22zxc%27xcv 更多详情，查阅： http-phpself-xss NSE script &mdash; Nmap Scripting Engine documentation http-unsafe-output-escaping NSE script &mdash; Nmap Scripting Engine documentation 16检测SQL注入使用如下命令： 1nmap -p80 --script http-sql-injection &lt;target&gt; 可以设置脚本参数httpspider.maxpagecount，来加快扫描的速度。 1nmap -p80 --script http-sql-injection --script-args httpspider.maxpagecount=200 &lt;target&gt; 一个有趣的参数是httpspider.withinhost，它限制nmap只能爬取给定的主机。默认情况下是启用的，如果为了爬行相关的站点可以禁用。 nmap -p80 –script http-sql-injection –script-args httpspider.withinhost=false 详情查阅官方文档：httpspider NSE Library &mdash; Nmap Scripting Engine documentation 同样可以设置User Agent和HTTP管道的数目： 1nmap -p80 --script http-sql-injection --script-args http.useragent=”Mozilla 42″ &lt;target&gt; 17 扫描主机名使用如下命令： 1nmap --script nbstat 192.168.xx.xx 139是TCP，135的UDP，这两个端口都是NETBIOS接口占用的，只要windows主机，安装了NetBIOS，通过这两个端口，可以查询共享文件，登录用户名，操作系统等信息。 1nmap -p 139 --script nbstat 192.168.xx.xx 声明：由于Nmap测试脚本众多，本文尚未对所有脚本进行测试讲解，只是对渗透测试中常用的某些脚本进行简单介绍，大家可以根据上面介绍的脚本调用的方法举一反三，在平时的渗透测试中活学活用。当然，我也会在后续的工作学习中，继续补充可能用到的nse脚本。文章中如有错误，还请各位大佬们斧正，谢谢！ 附：Nmap使用脑图 参考链接：TCP Idle Scan (-sI) | Nmap Network ScanningNmap中文手册 - Nmap中文网NSEDoc Reference Portal &mdash; Nmap Scripting Engine documentationNSEDoc Reference Portal: NSE Categories &mdash; Nmap Scripting Engine documentationNmap Development Mailing List- Revision 38560: /nmap –EOF– 转载：https://www.cnblogs.com/H4ck3R-XiX/p/12234762.html","categories":[{"name":"建站","slug":"建站","permalink":"http://www.lvhejin.cn/categories/%E5%BB%BA%E7%AB%99/"},{"name":"Hexo使用攻略","slug":"建站/Hexo使用攻略","permalink":"http://www.lvhejin.cn/categories/%E5%BB%BA%E7%AB%99/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5/"},{"name":"Github","slug":"建站/Hexo使用攻略/Github","permalink":"http://www.lvhejin.cn/categories/%E5%BB%BA%E7%AB%99/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5/Github/"}],"tags":[{"name":"测试","slug":"测试","permalink":"http://www.lvhejin.cn/tags/%E6%B5%8B%E8%AF%95/"},{"name":"开始","slug":"开始","permalink":"http://www.lvhejin.cn/tags/%E5%BC%80%E5%A7%8B/"}]},{"title":"Nmap使用教程（初级篇）","slug":"网络安全/安全测试/Nmap使用教程（初级篇）","date":"2022-11-21T15:57:53.000Z","updated":"2024-01-05T17:32:17.655Z","comments":true,"path":"2022/11/21/网络安全/安全测试/Nmap使用教程（初级篇）/index.html","link":"","permalink":"http://www.lvhejin.cn/2022/11/21/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95/Nmap%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%EF%BC%88%E5%88%9D%E7%BA%A7%E7%AF%87%EF%BC%89/index.html","excerpt":"","text":"基本扫描技术扫描单个网络 1nmap 192.168.1.1/www.baidu.com 扫描多个网络/目标 1nmap 192.168.1.1 192.168.1.2 #将扫描同个网段内不同的ip地址。 扫描连续的IP地址 12nmap 192.168.2.1-192.168.2.100 #将扫描同个网段内不同的ip地址。nmap 192.168.2.1/24 #nmap也可以用使用CIDR（无类别域间路由）表示法整个子网。 扫描目标列表 1nmap -iL [LIST.txt] #如果你有大量的系统进行扫描，就可以在文本文件中输入IP地址（或主机名），并使用该文件作为输入。 扫描随机目标 12nmap -ir [主机数] #该-IR参数可以用来选择随机Internet主机进行扫描。 NMAP会随机生成目标的指定数量，并试图对其进行扫描。nmap 192.168.2.1/24 -exclude 192.168.2.10 # 该-exclude选项与用于从NMAP的扫描中排除主机。 侵入性扫描 1nmap -A 主机 #最常用的选项，试图用一个简单字母A的替代长字符串。它也会执行路由跟踪等。 使用nmap探索使用NMAP探索是非常有趣且对渗透测试非常有帮助。在发现过程中可以了解服务，端口号，防火墙的存在，协议，操作系统等，我们将一个接一个讨论。 不进行Ping 1nmap -Pn 目标 #该-Pn选项指示nmap跳过默认的发现检查并对执行对目标的完整端口扫描。当扫描被阻止ping探针的防火墙保护的主机时，这是非常有用的。 仅进行Ping扫描 1nmap -sP 目标 #选项-sP让NMAP仅对主机进行ping。当要探测一批ip地址中哪些是可达的时候非常有用。通过指定特定的目标，你可以得到更多的信息，比如MAC地址。 TCP SYN扫描 在我们开始之前，我们必须知道SYN数据包是什么? 基本上是一个SYN包被用于启动两个主机之间的连接。 TCP SYN握手连接时，Ping发送一个SYN包到目标系统，并监听响应。这种替代探索方法对被配置为阻止标准ICMP ping消息主机是有用的。 1nmap -PS主机 #该-PS选项进行TCP SYN Ping。 TCP Ack Ping扫描 这种类型的扫描将只扫描确认（ACK）数据包。 1nmap -PA 目标 #选项-PA对指定主机进行TCP Ack Ping扫描。 UDP Ping 扫描 1nmap -PU 目标 #选项-PU对指定主机进行UDP Ack Ping扫描。 SCTP初始化Ping 1nmap -PY 目标 #选项-PY指示的Nmap执行一个SCTP INIT Ping。此选项将包含一个最小的INIT块的SCTP包。这一探索方法试图找到使用流控制传输协议（SCTP）主机。 SCTP通常用于对基于IP的电话系统。 ICMP Echo ping 1nmap -PE 目标 #选项-PE将对指定主机执行ICMP（互联网控制消息协议）回显Ping。 ICMP 时间戳 ping 1nmap -PP 目标 #选项-PP执行一次ICMP时间戳ping。 ICMP 地址掩码 ping 1nmap –PM 目标 #选项-PM 进行ICMP 地址掩码 ping. IP 协议 Ping一个IP协议的ping发送带有指定的协议目标的数据包。如果没有指定的协议，则默认的协议1（ICMP）、2（IGMP）和4（IP中的IP）的使用。 1nmap -PO 目标 #选项-PO执行IP协议Ping扫描 ARP Ping扫描 1nmap -PR 目标 #该-PR选项指示的Nmap对指定目标执行ARP（地址解析协议）ping操作。 扫描本地网络时，-PR选项会自动暗中启用。这种类型的发现是比其它Ping的方法快得多。 路由跟踪 1nmap -traceroute 目标 #选项-traceroute可被用于跟踪的网络路径指定的主机。 强制反向DNS解析 1nmap -r 目标 #选项-r指示的Nmap始终执行对目标IP地址的反向DNS解析。 选项-r在对一个IP段进行侦查时非常有用，Nmap将尝试查询每个ip地址的反向DNS信息 禁用反向DNS解析 1nmap -n 目标 #选项-n用于禁用反向DNS解析 反向dns解析会很明显的减慢Nmap扫描的过程。使用-n选项大大降低了扫描时间，尤其是扫描大量主机的时候。如果你不关心目标系统的DNS信息，并愿意执行产生更快的结果扫描此选项很有用。 选择DNS查找方法 1nmap -system-dns 目标 #选项-system-dns指示NMAP使用主机系统自带的DNS解析器，而不是其自身内部的方法。 手动指定DNS服务器 1nmap -dns-server server1 server2 目标 #选项-dns-servers用于扫描时手动指定DNS服务器进行查询。 选项-dns-servers允许您为nmap的查询指定一个或多个备用服务器，这对于没有配置DNS，或者如果你想防止您的扫描查找出现在您的本地配置的DNS服务器的日志文件系统非常有用。 清单扫描 1nmap -sL 目标 #选项-sL将显示一个列表，并执行指定的IP地址反向DNS查找。 TCP SYN扫描 1nmap -sS 目标 #它可以在不受防火墙限制的高速网络每秒扫描数千个端口 。同时也是相对不显眼的和隐蔽的，因为它永远不会完成TCP连接。 SYN扫描是默认的且最流行的扫描选项是有一定原因的。 TCP连接扫描 1nmap -sT 目标 当SYN扫描不可用的时候，TCP连接扫描是默认的TCP扫描类型。这是在用户不具有发送RAW数据包的特权的情况下。不是像大多数其他扫描器那样写原始数据包，nmap要求底层的操作系统通过发出连接系统调用来建立与目标机和端口的连接。 UDP扫描 虽然互联网上最流行的服务运行在TCP协议，但UDP服务也是广泛部署的。DNS，SNMP和DHCP（注册端口53，161/162，和67/68）这三种最常见的UDP服务。因为UDP扫描通常比TCP慢和更加困难，一些安全审计员忽略这些端口。这是一个错误，因为UDP服务是相当普遍，攻击者也不会忽略整个协议。 1nmap -sU 目标 选项-data-length可以用来固定长度的随机有效载荷发送到每一个端口或（如果指定0值）来禁用有效载荷。如果返回一个ICMP端口不可达错误（类型3，代码3），那么端口是关闭的。其他ICMP不可达错误（类型3，编码1，2，9，10或13）标记端口过滤。有时服务会返回一个UDP包响应以证明它是开放的。如果重发后没有收到回应，端口被列为开放或者过滤。 1nmap -sU–data-length=value 目标 SCTP INIT扫描SCTP是对TCP和UDP协议的相对较新的替代方案，结合TCP和UDP最具特色的部分，同时也增加了新的功能，如多宿主和多流。它主要被用于SS7 / SIGTRAN相关的服务，但有可能被用于其他用途。 SCTP INIT扫描SCTP相当于TCP SYN扫描。它可以在不受防火墙限制的高速网络每秒扫描数千个端口。像SYN扫描，扫描INIT相对不显眼的和隐蔽的，因为它永远不会完成SCTP连接。 1nmap -sY 目标 探测防火墙状态 利用FIN扫描的方式探测防火墙的状态。FIN扫描用于识别端口是否关闭，收到RST回复则说明该端口关闭，否则就是open或filtered状态。 1nmap -sF 目标 TCP NULL和Xmas扫描 1234567· NULL扫描（-sN） 不设置任何位（TCP标志标头是0）。 · Xmas扫描（-sX） 设置FIN，PSH，URG和标志。 TCP ACK扫描 1nmap -scanflags=value -sA 目标 #这种扫描跟其他方式不同的地方在于它没有判断端口的开放情况。用来绘制出防火墙规则，对哪些端口进行了保护。 该ACK扫描探测报文只具有ACK标志设置（除非您使用-scanflags）。当扫描未经过系统过滤，打开和关闭的端口都将返回一个RST包。 NMAP然后把它们标记为未过滤的，这意味着它们是ACK包可达的。 TCP 窗口扫描 1nmap -sW 目标 #窗口扫描跟ACK扫描是几乎一样的，除了它利用某些系统的实现细节来区分端口的，而不是当返回一个RST时总是认为端口未经过滤。 TCP Maimon 扫描 1nmap -sM 目标 Maimon 扫描的名字来源于它的发现者，Uriel Maimon。他在Phrack杂志问题＃49（1996年11月）中描述的技术。这种技术与NULL，FIN和Xmas扫描类似，唯一的不同之处在于探针是FIN/ ACK。 自定义的TCP扫描使用-scanflag选项 对于渗透测试，一个渗透测试人员不会使用一般的TCP扫描比如ACK、FIN等，因为这些东西可以被IDS / IPS阻断。因此他们将通过指定“-scanflag”选项使用一些不同的技术。这也可以用于绕过防火墙。该-scanflags的参数可以是一个数字标记值如9（PSH和FIN），但使用符号名称更容易。只是URG，ACK，PSH，RST，SYN和FIN的任意组合。例如，-scanflags URGACKPSHRSTSYNFIN所有设置，虽然扫描时不是非常有用的。 1nmap –scanflags 目标 SCTP COOKIE ECHO扫描 SCTP COOKIE ECHO扫描是一种更先进的SCTP扫描。SCTP会默认丢弃开放端口返回的包含COOKIE ECHO数据包块，但如果端口关闭则发送中止。这种扫描方式优点是，它并不像INIT扫描一样明显。除此之外，无状态防火墙会阻断INIT块而不是COOKIE ECHO块。但一个优秀的IDS仍能够探测到SCTP COOKIE ECHO扫描SCTP COOKIE ECHO扫描的缺点是无法区分开放和过滤的端口。 1nmap -sZ 目标 TCP空闲扫描 这种先进的扫描方法允许对目标进行一个真正的盲目TCP端口扫描（即没有数据包从你的真实IP地址发送到目标）。相反独特的侧信道攻击利用僵尸主机上可预测的IP分段ID序列生成来收集关于目标的开放端口的信息。IDS系统只会显示扫描是从您指定的僵尸机发起。这在进行MITM（中间人攻击）非常有用的。 1nmap -sI zombie 目标 #选项-sL将显示一个列表，并执行指定的IP地址反向DNS查找。 这里简单介绍下空闲的原理： 123451、向僵尸主机发送SYN/ACK数据包，获得带有分片ID（IPID）的RST报文。 2、发送使用僵尸主机IP地址的伪数据包给目标主机。 如果目标主机端口关闭，就会向僵尸主机响应RST报文。如果目标端口开放，目标主机向僵尸主机响应SYN/ACK报文，僵尸主机发现这个非法连接响应，并向目标主机发送RST报文，此时IPID号开始增长。 3、通过向僵尸主机发送另一个SYN/ACK报文以退出上述循环并检查僵尸主机RST报文中的IPID是否每次增长2，同时目标主机的RST每次增长1。 重复上述步骤直到检测完所有的端口。 接下来是进行空闲扫描的步骤：1、寻找合适的僵尸主机 一个常见的方法就是在NMAP下执行Ping扫描一些网络。你可以选择NMAP提供的随机IP选项（-iR），但是这很有可能造成与Zombie主机之间的大量延迟。 在Zombie主机候选列表中执行一个端口扫描以及操作系统识别（-o）比简单的使用Ping命令筛选更容易找寻到合适的。只要启动了详细模式（-v），操作系统检测通常会确定IP ID增长方法，然后返回“IP ID Sequence Generation: Incremental”。如果这个类型被作为增长或是破损的低字节序增长量，那么该机是不错的僵尸主机备选。 还有一种方法是对运行ipidseq NSE脚本。该脚本探测一台主机的IP ID生成方法并进行分类，然后就像操作系统检测一样输出IP ID分级。 1NMAP --script ipidseq [ --script-args probeport=port] 目标 我们也可以使用hping用于发现僵尸主机。 首先选择使用Hping3发送数据包，并观察ID号是不是逐一增加，那么该主机就是空闲的。如果ID号随意增加，那么主机实际上不是空闲的，或者主机的操作系统没有可预测的IP ID。 1hping3 -s 目标 发送伪造SYN包到你指定的目标主机上的端口。 1hping3 -spoof 僵尸主机 -S p 22 目标 正如你所看到的，没有任何反应，这表明数据包100％的丢失。这意味着我们并没有发现僵尸主机。同时我们将检查确认以下的步骤。 1hping3 -S 目标 #检查PID值是否逐一增加 2、使用NMAP进行攻击 1NMAP -Pn -p- -sI 僵尸主机 目标 首先我们用NMAP扫描僵尸主机的端口： 发现僵尸主机22端口是关闭着的。 我们指定利用僵尸主机的22端口进行空闲扫描，结果显而易见，无法攻击目标。 默认情况下，NMAP的伪造探针使用僵尸主机的80端口作为源端口。您可以通过附加一个冒号和端口号僵尸名选择一个不同的端口（例如www.baidu.com:90）。所选择的端口必须不能被攻击者或目标过滤。僵尸主机的SYN扫描会显示端口的开放状态。 这里解释下参数的含义： 12345-Pn：防止NMAP的发送初始数据包到目标机器。-p-：将扫描所有65535个端口。-sI：用于闲置扫描和发送数据包欺骗。 TCP空闲扫描作为一个渗透测试人员，我们必须明白nmap TCP空闲扫描的内部运行原理，然后用我们自己的方法来实现同样的事情。为此，我们将使用NMAP的数据包跟踪选项。 1nmap -sI 僵尸主机:113 -Pn -p20-80,110-180 -r - packet-trace -v 目标 #-Pn是隐身的必要，否则ping数据包会用攻击者的真实地址发送到目标。未指定-sV选项是因为服务识别也将暴露真实地址。 -r选项（关闭端口随机化）让这个例子运行起来更简单。 nmap首先通过发送6个 SYN / ACK数据包并分析响应，测试僵尸主机的IP ID序列生成。在这里R表示复位包，意味该端口不可达。 正如我之前说的，成功的攻击需要选择一个合适的僵尸主机端口。 TCP空闲扫描原理：众所周知，空闲扫描允许完全盲端口扫描。 攻击者实际上可以扫描目标，而无需从自己的IP地址向目标发送单个数据包！ 取而代之的是，旁道攻击可以使扫描从无辜的“僵尸主机”反弹。 入侵检测系统（IDS）的报告会将无辜的僵尸指为攻击者。 除了非常隐秘之外，此扫描类型还允许发现机器之间基于IP的信任关系。 尽管空闲扫描比到目前为止讨论的任何技术都复杂，但可以归纳出如下基本特点： 12345确定TCP端口是否打开的一种方法是将SYN（会话建立）数据包发送到该端口。 如果端口打开，则目标计算机将以SYN / ACK（会话请求确认）数据包进行响应，如果端口是关闭的，则将以RST（重置）数据包进行响应。 这是前面讨论的SYN扫描的基础。收到未经请求的SYN / ACK数据包的计算机将以RST响应。 未经请求的RST将被忽略。Internet上的每个IP数据包都有一个片段标识号（IP ID）。 由于许多操作系统只是为它们发送的每个数据包增加该数字，因此探测IPID可以告诉攻击者自上次探测以来已发送了多少个数据包。 通过组合这些特征，可以在伪造您的身份的同时扫描目标网络，以使它看起来像是无辜的僵尸机器进行的扫描。 空闲扫描步骤从根本上说，空闲扫描包括三个步骤，每个端口都重复进行以下操作： 12345探测僵尸主机的IP ID并记录下来。伪造来自僵尸主机的SYN数据包，并将其发送到目标上的所要探测的端口。 根据端口状态，目标的反应可能会或着不会导致僵尸主机的SYN数据包的IP ID增加。再次探测僵尸主机的IP ID。 然后，通过将此新IP ID与步骤1中记录的IP ID进行比较，来确定目标端口状态。 在此过程之后，僵尸主机的IP ID应该增加一到两个。增加1表示僵尸主机除了向攻击者的探测回复外没有发送任何数据包。缺少发送的数据包意味着端口未打开（目标必须向僵尸发送了RST数据包，该数据包被忽略，或者什么都没有发送）。增加两个表示僵尸在两个探测器之间发送了一个数据包。这个额外的数据包通常意味着端口是开放的（目标可能会响应伪造的SYN数据包而向僵尸主机发送SYN / ACK数据包，从而导致了僵尸主机发送了RST数据包）。大于2的增量通常表示恶意僵尸主机。它可能没有可预测的IP ID号，或者可能参与了与空闲扫描无关的通信。 即使已关闭的端口的情况与过滤的端口稍有不同，但攻击者在两种情况下的测量结果相同，即IP ID增加1。*因此，空闲扫描无法区分关闭并过滤端口。 * Nmap记录IP ID增加1时，表示端口已关闭或者已过滤。 对于那些想要了解更多细节的人，以下三个图准确显示了在打开，关闭和过滤端口的三种情况下发生的情况。 图1 空闲扫描开放端口图2 空闲扫描关闭端口图3 空闲扫描过滤端口 TCP空闲扫描是真正的隐身扫描。 Nmap提供了诱饵扫描（-D）来帮助用户屏蔽其身份，但是（不同于空闲扫描）攻击者仍然需要攻击者从其真实IP地址向目标发送一些数据包，以获取扫描结果。 空闲扫描的一个结果是，入侵检测系统通常会发送警报，声称僵尸计算机已对其发起了扫描。 寻找在进行空闲扫描的僵尸主机执行IP ID空闲扫描的第一步是找到合适的僵尸。它需要在全局（而不是与其通信的每个主机）的基础上递增地分配IP ID数据包。它应该是空闲的（因此具有扫描名称），因为无关的流量会增加其IP ID序列，从而混淆扫描的逻辑。 尝试进行空闲扫描时，Nmap会测试建议的僵尸并报告其任何问题。如果一个不起作用，请尝试另一个。僵尸候选人并不难找到足够的互联网主机。由于主机需要处于空闲状态，因此选择知名主机（例如www.yahoo.com或google.com）几乎是行不通的。我们不仅在上图中选择了打印机图标来代表僵尸主机，还有其他简单有趣的网络设备通常会成为巨大的僵尸，因为它们通常都未被充分利用（闲置），并且内置了简单的网络堆栈，容易受到IP ID流量检测的攻击。 一种常见的方法是简单地执行某些网络的Nmap ping扫描。您可以使用Nmap的随机IP选择模式（-iR），但是这很可能会导致遥远的僵尸出现大量延迟。选择靠近您的源地址或目标位置的网络会产生更好的结果。您可以尝试从ping扫描结果中使用每个可用主机进行TCP空闲扫描，直到找到一个有效的主机为止。 在候选的僵尸网络上执行端口扫描和OS标识（-O）而不是仅执行ping扫描有助于选择一个好的僵尸。只要启用了详细模式（-v），OS检测通常就会确定IP ID序列生成方法并打印一行，例如“ IP ID序列生成：增量”。如果将类型指定为“增量”或“小尾数递增”，则该机器是不错的僵尸候选对象。这仍然不能保证它会正常工作，因为Solaris和其他一些系统会为与它们通信的每个主机创建一个新的IP ID序列。主机也可能太忙。操作系统检测和开放端口列表还可以帮助识别可能处于空闲状态的系统。 识别僵尸候选者的另一种方法是针对主机运行ipidseq NSE脚本。该脚本探测主机以对其IP ID生成方法进行分类，然后像操作系统检测一样打印IP ID分类。像大多数NSE脚本一样，ipidseq.nse可以针对许多主机并行运行，这使得它在扫描整个网络以寻找合适的主机时成为另一个不错的选择。 虽然确定合适的僵尸需要一些初步工作，但您可以继续重复使用那些好的僵尸。 执行空闲扫描一旦找到合适的僵尸，进行扫描就很容易了。 只需将僵尸主机名指定给-sI选项，其余的由Nmap完成。 例5.19展示了Ereet通过在名为Kiosk的Adobe机器上启动空闲扫描来扫描美国唱片业协会的示例。 针对RIAA的空闲扫描 从上面的扫描中，我们了解到RIAA不太注重安全性（请注意开放的端口PC anywhere等端口）。 由于它们显然没有防火墙，因此它们不太可能具有IDS。 但是，如果这样做，它将显示kiosk.adobe.com作为第一扫描者。 -Pn选项可防止Nmap将初始ping数据包发送到RIAA计算机。 不加-Pn ，则会泄露真实地址。 由于指定了-p-来扫描所有端口（1-65535），因此扫描花费了很长时间。 由于该地址（kiosk.adobe.com）已被移除，请勿尝试使用该地址进行扫描。 默认情况下，Nmap将僵尸网络的源端口80伪装为目标探针。 我们可以通过在所用的僵尸网络后附加冒号和端口号来选择其他端口（例如-sI kiosk.adobe.com:113）。所选端口必须不得被攻击者机器或目标机所过滤的。 IP协议扫描 1nmap -sO 目标 #IP协议扫描可以让您确定哪些IP协议（TCP，ICMP，IGMP等）是目标机器的支持。 这不是技术上的端口扫描，因为只是IP协议号的循环而不是TCP或UDP端口号。 FTP弹跳扫描 1nmap –b ftp rely host #这允许用户连接到一个FTP服务器，然后文件被发送到目标主机 NMAP会发送文件到你指定的目标主机上的端口，通过错误消息判断该端口的状态。这是绕过防火墙的好方法，因为相对于互联网上的主机，公司或组织的FTP服务器经常被放置在可被内网访问的范围中。它的格式为:@:。 是一个脆弱的FTP服务器的名称或IP地址。 FTP弹跳扫描 1nmap –b ftp rely host #这允许用户连接到一个FTP服务器，然后文件被发送到目标主机 如使用用户名“username”，密码为“password”的FTP服务器“FTP server.tld”，ftp端口则是21，用于扫描的文件是服务器上的victim.tld。 1nmap -T0-b username:password@ftpserver.tld:21 victim.tld 如果FTP服务器支持匿名登录，就不用填写“username:password@”部分。如果FTP端口是默认的21，也可以省略不写，但如果FTP端口是21之外的必须得指明。 端口规范和扫描顺序 除了所有的前面讨论的扫描方法，NMAP提供选项用于指定被扫描的端口和扫描顺序是随机的或顺序的。默认情况下NMAP扫描最常见的1000个端口。 -p&lt;端口范围&gt;（只扫描指定的端口） 此选项指定要扫描的端口范围，并覆盖默认。单个端口号也行，因为是用连字符（例如1-1023）分割范围。范围的起始或结束可以被省略，NMAP会分别使用1和65535。所以你可以指定-p-，相当于从1到65535进行扫描。 1nmap -p1-1023 目标 也可以指定用于端口扫描的协议类型，比如T代表TCP，U代表UDP，S代表SCTP，P代表IP。 1nmap -p U:53,111,137,T:21-25,80,139,8080 目标 -F（快速（有限的端口）扫描） 指定比默认情况下更少的端口数。 1nmap -F 目标 #通常情况下的NMAP扫描每个扫描协议中最常见的1000个端口。用-F将会减少到100个。 -r（不要随机端口） 默认情况下NMAP会随机扫描端口，但您可以指定-r为顺序（从最低到最高排序）端口扫描来代替。 1nmap -r 目标 在接下来的部分，我们将使用NMAP绕过防火墙，创建自定义利用程序。众所周知NMAP是经常用来进行端口发现、端口识别。除此之外我们还可以通过NMAP的NSE脚本做很多事情，比如邮件指纹识别，检索WHOIS记录，使用UDP服务等。 获取Whois记录信息 WHOIS记录通常包含如注册人的姓名和联系方式的重要数据。虽然这里有很多工具可以查询WHOIS协议，但NMAP的证明了自身的优秀，因为它能够批量处理IP范围和主机列表。 1nmap --script whois 目标 参数–script whois告诉NMAP去查询区域互联网注册管理机构WHOIS数据库，来获得目标的whois记录。这个脚本使用IANA分配的数据选择RIR并在本地缓存结果。或者我们可以覆盖这一行为，指定whois数据库的提供商并依次查询。 1nmap --script whois --script-args whois.whodb=arin+ripe+afrinic &lt;目标&gt; 脚本将会按顺序在WHOIS提供商中查询记录或者推荐记录，要忽略推荐记录请指定参数值nofollow。 1nmap --script whois --script-args whois.whodb=nofollow &lt;目标&gt; 要批量查询的主机名列表（-iL &lt;文件名&gt;）的WHOIS记录而不启用端口扫描（-sn）。 1nmap -sn –script whois -v -iL hosts.txt #(hosts.txt包含主机或者ip的列表) 有时候whois查询返回的是缓存的结果而不是最新的，可以指定参数禁止查询缓存。 1nmap -sn --script whois -script-args whois.whodb=nocache scanme. Nmap.org #禁用whois缓存 检查主机是否有恶意行为 NMAP通过调用谷歌安全浏览服务API来检查主机是否进行恶意软件分发或者网络钓鱼攻击的行为。使用脚本http-google-malware之前，先获取谷歌安全浏览服务API的密钥：https://developers.google.com/safe-browsing/key_signup?csw=1 1nmap -p80 --script http-google-malware -v scanme.Nmap.org 收集有效的邮箱 收集邮箱对渗透测试非常有用，我们可以对这些邮箱进行钓鱼工具或者暴力破解攻击。NMAP可以进行邮箱的收集，但是脚本http-google-email不在NMAP的官方资料库中，我们需要手动下载https://seclists.org/nmap-dev/2011/q3/att-401/http-google-email.nse，并把它复制到本地脚本目录。 1nmap -p80 --script http-google-email &lt;目标&gt; 注：我们可以手动更新脚本数据库： 1nmap -script-updatedb nse脚本参数选项–script-args是用于设置NSE脚本的参数。例如： 1nmap -sV --script http-title --script-args http.useragent=”Mozilla 999 ” &lt;目标&gt; #此命令设置了参数useragent的值。 猜测操作系统如果NMAP无法确定操作系统类型，通过选项–osscan-guess强制识别os。 1nmap -O –osscan-guess 目标 它将列出的NMAP脚本数据库操作系统的所有可能的匹配。–fuzzy可以用作–osscan-guess的快捷方式。如果目标至少有一个开放和一个关闭的TCP端口那么操作系统的类型识别会比较有效。选项–osscan-limit将会使NMAP不对没有满足这个要求的目标进行操作系统的识别。这样可以节省大量的时间，尤其是在对许多主机-Pn扫描。它只与选项-O或者-A搭配使用。 执行RPC扫描 选项-sR对目标进行RPC（远程过程调用）扫描 1nmap -sR 目标 上述-sR扫描的输出显示有关目标系统上运行的RPC服务的信息。RPC与Unix和Linux系统上的NFS（网络文件系统）服务关系很紧密。 Nmap扫描使用-hostmap选项 此hostmap脚本基于第三方服务，而官方版本只支持BFK的DNS历史记录。正如我前面所说的，下载脚本https://svn.nmap.org/nmap/scripts/hostmap-bfk.nse并更新nmap的脚本数据库，然后执行命令： 1nmap -p80 –script hostmap Nmap.org 这些参数–script hostmap -p80告诉Nmap的启动HTTP版的hostmap脚本，并限制只扫描80端口以加快这一任务。 该hostmap.nse查询两个不同的Web服务：BFK DNS记录和ip2hosts.com。 BFK DNS记录是一项免费服务，从公共DNS数据和ip2hosts收集其信息。这两项服务都是免费的，滥用他们将很有可能让你禁止使用该服务。 可以设定参数指定不同的搜索引擎。 12345nmap -p80 –script hostmap –script-args hostmap.provider=BING &lt;目标&gt;nmap -p80 –script hostmap –script-args hostmap.provider=BFK &lt;目标&gt;nmap -p80 –script hostmap –script-args hostmap.provider=ALL &lt;目标&gt; 为了保存扫描每个IP的主机名，使用参数hostmap.prefix。设置此参数将在我们的工作目录下创建一个&lt;前缀&gt;&lt;目标&gt;文件名的文件： 1nmap -p80 –script hostmap-script-ARGS hostmap.prefix=hostfile &lt;目标&gt; 暴力破解DNS记录 这是用于试图通过暴力枚举DNS主机名猜测常见的子域。指定DNS-brute.srv，dns-bruter也将尝试列举常见的DNS SRV记录。 Nmap的时间选项作为一个渗透测试人员，我们通常会在NMAP上设置时间选项，但我们必须得了解时间选项是什么，为什么要设置这个选项？ 我们使用NMAP的时候经常会遇到防火墙，这些防火墙会阻碍某些请求。我们会根据需求设置时间选项以加快或减慢NMAP的扫描速度。 当在快速网络中（比如内网）扫描大量的主机时，我们可能需要增加并行操作的数量以便更快的获得结果。另外在扫描速度慢的网络时（或在互联网上），你可能需要减慢扫描速度以获得更准确的结果，或者逃避入侵检测系统。下面是一些nmap的时间选项。 时间参数 默认情况下我们扫描使用的Nmap是在几秒钟内开始扫描。但是我们可以通过设置时间参数进一步提高性能。NMAP支持下列的时间格式： 1234567M-分钟S-秒MS-毫秒H-小时 有时如何选择时间参数可能会让人感到困惑，我们将设置多少时间用于扫描。要解决这些问题，NMAP的提供了如下多种扫描时序选项。 1Nmap -T[0-5] 目标 选项0：这是一个非常缓慢的扫描选项，以便防火墙或IDS不会阻断该请求 1Nmap -T0 目标 选项1：比选项0稍微快一点点的扫描速度，用于绕过防火墙和IDS。 1nmap -T1 目标 虽然T0和T1对于避免IDS报警非常有用，但它们将会花非常多的时间来扫描数千个端口或者服务器。 选项2：比较“礼貌”的选项，占用较少的带宽以及目标计算机的资源。 1nmap -T2 目标 选项3：常规的扫描速度和资源占用。 1Nmap -T3 目标 #nmap的默认选项 选项4和5：在T4和T5是一个非常快速和侵略性的扫描。假设在一个相当快速和可靠的网络中，T4可以加速扫描。T5则是在此基础之上牺牲了准确性。 1nmap -T4/-T5 目标 Nmap的并行选项：作为一个渗透测试人员，我们不应该通过一个接一个的扫描浪费我们的时间。相反，我们可以通过并行扫描来优化。NMAP将目标IP段进行分组，然后在一次扫描一个组。一般情况下较大的分组是更有效的。缺点直到整个分组完成才能知道目标主机的情况。 并行处理有两个选项：最大值和最小值。 最小值 1Nmap –min-parallelism [数量] [目标] #选项–min-parallelism用于指定并行端口扫描操作的最小数量。 手动设置–min-parallelism选项可能会提升扫描性能,设置过高可能会产生不准确的结果。 最大值 1Nmap –max-parallelism [数量] [目标] #选项–max-parallelism用于指定并行端口扫描操作的最大数量。 Nmap主机分组大小选项：nmap也可以设置主机分组的最大值和最小值。 最大值 1Nmap –max-hostgroup [数目] [目标] #选项–max-hostgroup用于指定的Nmap并行扫描主机数的最大值。 最小值 1Nmap –min-hostgroup [数目] [目标] #选项–min-hostgroup用于指定的Nmap并行扫描主机数的最小值。 在扫描一个IP段或整个子网时NMAP将并行扫描多个目标以节省时间。默认情况下，基于扫描类型和网络条件Nmap会自动调整正在执行的主机组的大小。通过指定–min-hostgroup选项，Nmap尝试保持主机组的大小为指定值。设置最大值会有效避免网络拥堵和避免网内安全设备的告警。 参考链接：TCP Idle Scan (-sI) | Nmap Network ScanningNmap中文手册 - Nmap中文网Nmap Development Mailing List- Revision 38560: /nmap –EOF– 转载：https://www.cnblogs.com/H4ck3R-XiX/p/12231851.html","categories":[{"name":"建站","slug":"建站","permalink":"http://www.lvhejin.cn/categories/%E5%BB%BA%E7%AB%99/"},{"name":"Hexo使用攻略","slug":"建站/Hexo使用攻略","permalink":"http://www.lvhejin.cn/categories/%E5%BB%BA%E7%AB%99/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5/"},{"name":"Github","slug":"建站/Hexo使用攻略/Github","permalink":"http://www.lvhejin.cn/categories/%E5%BB%BA%E7%AB%99/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5/Github/"}],"tags":[{"name":"测试","slug":"测试","permalink":"http://www.lvhejin.cn/tags/%E6%B5%8B%E8%AF%95/"},{"name":"开始","slug":"开始","permalink":"http://www.lvhejin.cn/tags/%E5%BC%80%E5%A7%8B/"}]},{"title":"Mitmproxy教程","slug":"网络安全/安全测试/Mitmproxy教程","date":"2022-11-21T15:38:08.000Z","updated":"2024-01-05T17:32:17.655Z","comments":true,"path":"2022/11/21/网络安全/安全测试/Mitmproxy教程/index.html","link":"","permalink":"http://www.lvhejin.cn/2022/11/21/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95/Mitmproxy%E6%95%99%E7%A8%8B/index.html","excerpt":"","text":"本文是一个较为完整的 mitmproxy教程，侧重于介绍如何开发拦截脚本，帮助读者能够快速得到一个自定义的代理工具。 本文假设读者有基本的 python 知识，且已经安装好了一个 python 3 开发环境。如果你对 nodejs 的熟悉程度大于对 python，可移步到 anyproxy，anyproxy 的功能与 mitmproxy 基本一致，但使用 js 编写定制脚本。除此之外我就不知道有什么其他类似的工具了，如果你知道，欢迎评论告诉我。 本文基于 mitmproxy v5，当前版本号为 v5.0.1。 Introduction顾名思义，mitmproxy 就是用于 MITM 的 proxy，MITM 即中间人攻击（Man-in-the-middle attack）。用于中间人攻击的代理首先会向正常的代理一样转发请求，保障服务端与客户端的通信，其次，会适时的查、记录其截获的数据，或篡改数据，引发服务端或客户端特定的行为。 不同于 fiddler 或 wireshark 等抓包工具，mitmproxy 不仅可以截获请求帮助开发者查看、分析，更可以通过自定义脚本进行二次开发。举例来说，利用 fiddler 可以过滤出浏览器对某个特定 url 的请求，并查看、分析其数据，但实现不了高度定制化的需求，类似于：“截获对浏览器对该 url 的请求，将返回内容置空，并将真实的返回内容存到某个数据库，出现异常时发出邮件通知”。而对于 mitmproxy，这样的需求可以通过载入自定义 python 脚本轻松实现。 但 mitmproxy 并不会真的对无辜的人发起中间人攻击，由于 mitmproxy 工作在 HTTP 层，而当前 HTTPS 的普及让客户端拥有了检测并规避中间人攻击的能力，所以要让 mitmproxy 能够正常工作，必须要让客户端（APP 或浏览器）主动信任 mitmproxy 的 SSL 证书，或忽略证书异常，这也就意味着 APP 或浏览器是属于开发者本人的——显而易见，这不是在做黑产，而是在做开发或测试。 事实上，以上说的仅是 mitmproxy 以正向代理模式工作的情况，通过调整配置，mitmproxy 还可以作为透明代理、反向代理、上游代理、SOCKS 代理等，但这些工作模式针对 mitmproxy 来说似乎不大常用，故本文仅讨论正向代理模式。 Features 拦截HTTP和HTTPS请求和响应并即时修改它们 保存完整的HTTP对话以供以之后重发和分析 重发HTTP对话的客户端 重发先前记录的服务的HTTP响应 反向代理模式将流量转发到指定的服务器 在macOS和Linux上实现透明代理模式 使用Python对HTTP流量进行脚本化修改 实时生成用于拦截的SSL / TLS证书 And much, much more… Installation“安装 mitmproxy”这句话是有歧义的，既可以指“安装 mitmproxy 工具”，也可以指“安装 python 的 mitmproxy 包”，注意后者是包含前者的。 如果只是拿 mitmproxy 做一个替代 fiddler 的工具，没有什么定制化的需求，那完全只需要“安装 mitmproxy 工具”即可，去 mitmproxy 官网 上下载一个 installer 便可开箱即用，不需要提前准备好 python 开发环境。但显然，这不是这里要讨论的，我们需要的是“安装 python 的 mitmproxy 包”。 安装 python 的 mitmproxy 包除了会得到 mitmproxy 工具外，还会得到开发定制脚本所需要的包依赖，其安装过程并不复杂。 首先需要安装好 python，版本需要不低于 3.6，且安装了附带的包管理工具 pip。这里不做展开，假设你已经准备好这样的环境了。 安装开始。 在 linux 中： 1sudo pip3 install mitmproxy 在 windows 中，以管理员身份运行 cmd 或 power shell： 1pip3 install mitmproxy 在macos中： 1brew install mitmproxy 安装完成后，系统将拥有 mitmproxy、mitmdump、mitmweb 三个命令，由于 mitmproxy 命令不支持在 windows 系统中运行（这没关系，不用担心），我们可以拿 mitmdump 测试一下安装是否成功，执行： 1mitmdump --version 应当可以看到类似于这样的输出： 1234Mitmproxy: 5.0.1Python: 3.8.2OpenSSL: OpenSSL 1.1.1f 31 Mar 2020Platform: macOS-10.15.3-x86_64-i386-64bit Run要启动 mitmproxy 用 mitmproxy、mitmdump、mitmweb 这三个命令中的任意一个即可，这三个命令功能一致，且都可以加载自定义脚本，唯一的区别是交互界面的不同。 mitmproxy 命令启动后，会提供一个命令行界面，用户可以实时看到发生的请求，并通过命令过滤请求，查看请求数据。形如： 配置代理的方法与配置burpsuite一样，我用的谷歌浏览器（127.0.0.1 8080），然后命令行执行 1mitmproxy --listen-host 127.0.0.1 -p 8080 之后，浏览器地址访问http://mitm.it/，点击Other下载安装证书，下图所示： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677usage: mitmproxy [options]#可选参数： -h, --help show this help message and exit --version show version number and exit --options Show all options and their default values --commands 显示所有命令及其签名 --set option[=value] 设置一个选项。 省略该值时，布尔值设置为true，字符串和整数设置为None（如果允许），并且序列为空。 布尔值可以为true，false或toggle -q, --quiet Quiet. -v, --verbose 增加日志详细程度 --mode MODE, -m MODE 模式可以是“常规”，“透明”，“ socks5”，“反向：SPEC”或“上游：SPEC”。 对于反向和上游代理模式，SPEC是主机规范，形式为“ http [s]：// host [：port]” --no-anticache --anticache 去除可能导致服务器返回304-not-modified的请求头 --no-showhost --showhost 使用Host标头构造用于显示的URL --rfile PATH, -r PATH 从文件读取流量 --scripts SCRIPT, -s SCRIPT 执行脚本。 可能会多次通过 --stickycookie FILTER 设置粘性Cookie过滤条件，根据要求匹配 --stickyauth FILTER 设置粘性身份验证过滤条件，根据要求匹配 --save-stream-file PATH, -w PATH 流量到达时保存到文件（附加路径）。 --no-anticomp --anticomp 尝试令服务器向我们发送未压缩的数据。 --console-layout &#123;horizontal,single,vertical&#125; 控制台布局 --no-console-layout-headers --console-layout-headers 显示布局组件标题#代理选项： --listen-host HOST 绑定代理的地址到HOST --listen-port PORT, -p PORT 代理服务端口 --no-server, -n --server 启动代理服务器（ 默认启用） --ignore-hosts HOST 忽略主机并转发所有流量，而不对其进行处理。 在透明模式下，建议使用IP地址（范围），而不要使用主机名。 在常规模式下，仅SSL流量会被忽略，应使用主机名。 利用正则表达式解释提供的值，并与ip或主机名匹配 --allow-hosts HOST 与--ignore-hosts相反 --tcp-hosts HOST 与--ignore-hosts相反。 对于与该模式匹配的所有主机，可以通过通用TCP SSL代理模式。 与--ignore相似，但是SSL连接被拦截。 通信内容以详细模式打印到日志中 --upstream-auth USER:PASS 通过将HTTP基本身份验证添加到上游代理和反向代理请求。 格式：用户名：密码 --proxyauth SPEC 需要代理身份验证。 格式：“用户名：密码”，“任何”以接受任何用户/密码组合，“ @ path”以使用Apache htpasswd文件或用于LDAP认证的“ ldap [s]：url_server_ldap：dn_auth：password：dn_subtree” --no-rawtcp --rawtcp 启用/禁用实验性原始TCP支持。 以非ascii字节开头的TCP连接将被视为与tcp_hosts匹配。 启发式方法很粗糙，请谨慎使用。 默认禁用 --no-http2 --http2 启用/禁用HTTP / 2支持。 默认情况下启用HTTP / 2支持#SSL: --certs SPEC 形式为“ [domain =] path”的SSL证书。 该域可以包含通配符，如果未指定，则等于“ *”。 路径中的文件是PEM格式的证书。 如果PEM中包含私钥，则使用私钥，否则使用conf目录中的默认密钥。 PEM文件应包含完整的证书链，并将叶子证书作为第一项 --no-ssl-insecure --ssl-insecure, -k 不要验证上游服务器SSL / TLS证书 --key-size KEY_SIZE 证书和CA的TLS密钥大小#客户端重发: --client-replay PATH, -C PATH 重发来自已保存文件的客户端请求#服务端重发: --server-replay PATH, -S PATH 从保存的文件重发服务器响应 --no-server-replay-kill-extra --server-replay-kill-extra 在重发期间杀死额外的请求。 --no-server-replay-nopop --server-replay-nopop 使用后，请勿从服务器重发状态中删除流量。 这样可以多次重发相同的响应。 --no-server-replay-refresh --server-replay-refresh 通过调整日期，到期和最后修改的header头，以及调整cookie过期来刷新服务器重发响应。 #更换： --replacements PATTERN, -R PATTERN 替换形式：替换形式为``/ pattern / regex / replacement&#x27;&#x27;，其中分隔符可以是任何字符。 可能会多次通过。#设置Headers: --setheaders PATTERN, -H PATTERN 格式为“ /pattern/header/value”的标题设置模式，其中分隔符可以是任何字符。#Filters:有关过滤条件表达式语法，请参见mitmproxy中的帮助。 --intercept FILTER 设置拦截过滤表达式。 --view-filter FILTER 将视图限制为匹配流。 mitmdump是mitmproxy的命令行模式。 它提供了类似tcpdump的功能，可帮助你查看，记录和以编程方式转换HTTP流量。 有关完整的文档，请参见--help。 例1. 1mitmdump -w outfile #保存流量 以代理模式启动mitmdump，并将所有流量写入outfile中。 例2. 1mitmdump -nr infile -w outfile &quot;~m post&quot; #保存过滤后的流量 在不绑定代理端口（-n）的情况下启动mitmdump，从infile中读取所有流，应用指定的过滤表达式（仅匹配POST），然后写入outfile。 例3. 1mitmdump -nc outfile #客户端重发 在不绑定代理端口（-n）的情况下启动mitmdump，然后重发outfile（-c filename）中的所有请求。 以较明显的方式组合的标志，因此您可以重播来自一个文件的请求，并将结果流写入另一个文件： 1mitmdump -nc srcfile -w dstfile 有关更多信息，请参见client-side replay部分。 例4. 1mitmdump -s examples/add_header.py #运行一个脚本 这将运行add_header.py示例脚本，该脚本仅向所有响应添加新的header头。 例5. 1mitmdump -ns example/add_header.py -r srcfile -w dstfile #脚本化数据转换 此命令从srcfile加载数据请求，根据指定的脚本对其进行转换，然后将其写回到dstfile文件中。 mitmweb 命令启动后，会提供一个 web 界面，用户可以实时看到发生的请求，并通过 GUI 交互来过滤请求，查看请求数据。形如： Scripts完成了上述工作，我们已经具备了操作 mitmproxy 的基本能力 了。接下来开始开发自定义脚本，这才是 mitmproxy 真正强大的地方。 脚本的编写需要遵循 mitmproxy 规定的套路，这样的套路有两个，使用时选其中一个套路即可。 第一个套路是，编写一个 py 文件供 mitmproxy 加载，文件中定义了若干函数，这些函数实现了某些 mitmproxy 提供的事件，mitmproxy 会在某个事件发生时调用对应的函数，形如： 12345678910import mitmproxy.httpfrom mitmproxy import ctxnum = 0def request(flow: mitmproxy.http.HTTPFlow): global num num = num + 1 ctx.log.info(&quot;We&#x27;ve seen %d flows&quot; % num) 第二个套路是，编写一个 py 文件供 mitmproxy 加载，文件定义了变量 addons，addons 是个数组，每个元素是一个类实例，这些类有若干方法，这些方法实现了某些 mitmproxy 提供的事件，mitmproxy 会在某个事件发生时调用对应的方法。这些类，称为一个个 addon，比如一个叫 Counter 的 addon： 12345678910111213141516import mitmproxy.httpfrom mitmproxy import ctxclass Counter: def __init__(self): self.num = 0 def request(self, flow: mitmproxy.http.HTTPFlow): self.num = self.num + 1 ctx.log.info(&quot;We&#x27;ve seen %d flows&quot; % self.num)addons = [ Counter()] 这里强烈建议使用第二种套路，直觉上就会感觉第二种套路更为先进，使用会更方便也更容易管理和拓展。况且这也是官方内置的一些 addon 的实现方式。 我们将上面第二种套路的示例代码存为 addons.py，再重新启动 mitmproxy： 1mitmweb -s addons.py 当浏览器使用代理进行访问时，就应该能看到控制台里有类似这样的日志： 123456789101112131415Web server listening at http://127.0.0.1:8081/Loading script addons.pyProxy server listening at http://*:8080We&#x27;ve seen 1 flows…………We&#x27;ve seen 2 flows……We&#x27;ve seen 3 flows……We&#x27;ve seen 4 flows…………We&#x27;ve seen 5 flows…… 这就说明自定义脚本生效了。 Events上述的脚本估计不用我解释相信大家也看明白了，就是当 request 发生时，计数器加一，并打印日志。这里对应的是 request 事件，那总共有哪些事件呢？不多，也不少，这里详细介绍一下。 事件针对不同生命周期分为 5 类。“生命周期”这里指在哪一个层面看待事件，举例来说，同样是一次 web 请求，我可以理解为“HTTP 请求 -&gt; HTTP 响应”的过程，也可以理解为“TCP 连接 -&gt; TCP 通信 -&gt; TCP 断开”的过程。那么，如果我想拒绝来个某个 IP 的客户端请求，应当注册函数到针对 TCP 生命周期 的 tcp_start 事件，又或者，我想阻断对某个特定域名的请求时，则应当注册函数到针对 HTTP 声明周期的 http_connect 事件。其他情况同理。 1. 针对 HTTP 生命周期1def http_connect(self, flow: mitmproxy.http.HTTPFlow): (Called when) 收到了来自客户端的 HTTP CONNECT 请求。在 flow 上设置非 2xx 响应将返回该响应并断开连接。CONNECT 不是常用的 HTTP 请求方法，目的是与服务器建立代理连接，仅是 client 与 proxy 的之间的交流，所以 CONNECT 请求不会触发 request、response 等其他常规的 HTTP 事件。 1def requestheaders(self, flow: mitmproxy.http.HTTPFlow): (Called when) 来自客户端的 HTTP 请求的头部被成功读取。此时 flow 中的 request 的 body 是空的。 1def request(self, flow: mitmproxy.http.HTTPFlow): (Called when) 来自客户端的 HTTP 请求被成功完整读取。 1def responseheaders(self, flow: mitmproxy.http.HTTPFlow): (Called when) 来自服务端的 HTTP 响应的头部被成功读取。此时 flow 中的 response 的 body 是空的。 1def response(self, flow: mitmproxy.http.HTTPFlow): (Called when) 来自服务端端的 HTTP 响应被成功完整读取。 1def error(self, flow: mitmproxy.http.HTTPFlow): (Called when) 发生了一个 HTTP 错误。比如无效的服务端响应、连接断开等。注意与“有效的 HTTP 错误返回”不是一回事，后者是一个正确的服务端响应，只是 HTTP code 表示错误而已。 2. 针对 TCP 生命周期1def tcp_start(self, flow: mitmproxy.tcp.TCPFlow): (Called when) 建立了一个 TCP 连接。 1def tcp_message(self, flow: mitmproxy.tcp.TCPFlow): (Called when) TCP 连接收到了一条消息，最近一条消息存于 flow.messages[-1]。消息是可修改的。 1def tcp_error(self, flow: mitmproxy.tcp.TCPFlow): (Called when) 发生了 TCP 错误。 1def tcp_end(self, flow: mitmproxy.tcp.TCPFlow): (Called when) TCP 连接关闭。 3. 针对 Websocket 生命周期1def websocket_handshake(self, flow: mitmproxy.http.HTTPFlow): (Called when) 客户端试图建立一个 websocket 连接。可以通过控制 HTTP 头部中针对 websocket 的条目来改变握手行为。flow 的 request 属性保证是非空的的。 1def websocket_start(self, flow: mitmproxy.websocket.WebSocketFlow): (Called when) 建立了一个 websocket 连接。 1def websocket_message(self, flow: mitmproxy.websocket.WebSocketFlow): (Called when) 收到一条来自客户端或服务端的 websocket 消息。最近一条消息存于 flow.messages[-1]。消息是可修改的。目前有两种消息类型，对应 BINARY 类型的 frame 或 TEXT 类型的 frame。 1def websocket_error(self, flow: mitmproxy.websocket.WebSocketFlow): (Called when) 发生了 websocket 错误。 1def websocket_end(self, flow: mitmproxy.websocket.WebSocketFlow): (Called when) websocket 连接关闭。 4. 针对网络连接生命周期1def clientconnect(self, layer: mitmproxy.proxy.protocol.Layer): (Called when) 客户端连接到了 mitmproxy。注意一条连接可能对应多个 HTTP 请求。 1def clientdisconnect(self, layer: mitmproxy.proxy.protocol.Layer): (Called when) 客户端断开了和 mitmproxy 的连接。 1def serverconnect(self, conn: mitmproxy.connections.ServerConnection): (Called when) mitmproxy 连接到了服务端。注意一条连接可能对应多个 HTTP 请求。 1def serverdisconnect(self, conn: mitmproxy.connections.ServerConnection): (Called when) mitmproxy 断开了和服务端的连接。 1def next_layer(self, layer: mitmproxy.proxy.protocol.Layer): (Called when) 网络 layer 发生切换。你可以通过返回一个新的 layer 对象来改变将被使用的 layer。详见 layer 的定义。 5. 通用生命周期1def configure(self, updated: typing.Set[str]): (Called when) 配置发生变化。updated 参数是一个类似集合的对象，包含了所有变化了的选项。在 mitmproxy 启动时，该事件也会触发，且 updated 包含所有选项。 1def done(self): (Called when) addon 关闭或被移除，又或者 mitmproxy 本身关闭。由于会先等事件循环终止后再触发该事件，所以这是一个 addon 可以看见的最后一个事件。由于此时 log 也已经关闭，所以此时调用 log 函数没有任何输出。 1def load(self, entry: mitmproxy.addonmanager.Loader): (Called when) addon 第一次加载时。entry 参数是一个 Loader 对象，包含有添加选项、命令的方法。这里是 addon 配置它自己的地方。 1def log(self, entry: mitmproxy.log.LogEntry): (Called when) 通过 mitmproxy.ctx.log 产生了一条新日志。小心不要在这个事件内打日志，否则会造成死循环。 1def running(self): (Called when) mitmproxy 完全启动并开始运行。此时，mitmproxy 已经绑定了端口，所有的 addon 都被加载了。 1def update(self, flows: typing.Sequence[mitmproxy.flow.Flow]): (Called when) 一个或多个 flow 对象被修改了，通常是来自一个不同的 addon。 Reference： mitmproxy 官方文档：https://docs.mitmproxy.org/stable mitmproxy 脚本示例：https://github.com/mitmproxy/mitmproxy/tree/master/examples –EOF– 转载：https://www.cnblogs.com/H4ck3R-XiX/p/12624072.html","categories":[{"name":"网络安全","slug":"网络安全","permalink":"http://www.lvhejin.cn/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"},{"name":"安全测试","slug":"网络安全/安全测试","permalink":"http://www.lvhejin.cn/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95/"}],"tags":[{"name":"REDTEAM","slug":"REDTEAM","permalink":"http://www.lvhejin.cn/tags/REDTEAM/"},{"name":"渗透测试","slug":"渗透测试","permalink":"http://www.lvhejin.cn/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"},{"name":"外部打点","slug":"外部打点","permalink":"http://www.lvhejin.cn/tags/%E5%A4%96%E9%83%A8%E6%89%93%E7%82%B9/"}]},{"title":"Google搜索语法","slug":"搜索引擎/Google/Google搜索语法","date":"2022-11-21T14:54:17.000Z","updated":"2024-01-05T17:32:17.651Z","comments":true,"path":"2022/11/21/搜索引擎/Google/Google搜索语法/index.html","link":"","permalink":"http://www.lvhejin.cn/2022/11/21/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/Google/Google%E6%90%9C%E7%B4%A2%E8%AF%AD%E6%B3%95/index.html","excerpt":"","text":"我们先来看看Google的部分语法： intitle：搜索网页标题中包含有特定字符的网页。例如输入“intitle: cbi”，这样网页标题中带有cbi的网页都会被搜索出来。 inurl：搜索包含有特定字符的URL。例如输入“inurl:cbi”，则可以找到带有cbi字符的URL。 intext:搜索网页正文内容中的指定字符，例如输入“intext:cbi”。这个语法类似我们平时在某些网站中使用的“文章内容搜索”功能。 Filetype:搜索指定类型的文件。例如输入“filetype:cbi”，将返回所有以cbi结尾的文件URL。 Site：找到与指定网站有联系的URL。例如输入“Site：family.chinaok.com”。所有和这个网站有联系的URL都会被显示。 这些就是Google的常用语法，也是Google Hack的必用语法。虽然这只是Google语法中很小的部分，但是合理使用这些语法将产生意想不到的效果。 了解了Google的基本语法后，我们来看一下黑客是如何使用这些语法进行Google Hack的，这些语法在入侵的过程中又会起到怎样的作用呢？ 1.寻找网站的后台登录页面Intitleintitle语法通常被用来搜索网站的后台、特殊页面和文件，通过在Google中搜索“intitle:登录”、“intitle:管理”就可以找到很多网站的后台登录页面。此外，intitle语法还可以被用在搜索文件上，例如搜索“intitle:”indexof”etc/shadow”就可以找到Linux中因为配置不合理而泄露出来的用户密码文件。 InurlGoogle Hack中，inurl发挥的作用的最大，主要可以分为以下两个方面:寻找网站后台登录地址，搜索特殊URL。寻找网站后台登录地址：和intitle不同的是，inurl可以指定URL中的关键字，我们都知道网站的后台URL都是类似login.asp、admin.asp为结尾的，那么我们只要以“inurl:login.asp”、“inurl:admin.asp”为关键字进行搜索，同样可以找到很多网站的后台。此外，我们还可以搜索一下网站的数据库地址，以“inurl:data”、“inurl:db”为关键字进行搜索即可。搜索特殊URL：通过inurl语法搜索特殊URL，我们可以找到很多网站程序的漏洞，例如最早IIS中的Uncode目录遍历漏洞，我们可以构造“inurl:／winnt／system32／cmd exe?／c+dir”这样的关键字进行搜索，不过目前要搜索到存在这种古董漏洞的网站是比较困难的。再比如前段日子很火的上传漏洞，我们使用““inurl:upload.asp”或“inurl:upload_soft.asp”即可找到很多上传页面，此时再用工具进行木马上传就可以完成入侵。 Intextintext的作用是搜索网页中的指定字符，这貌似在Google Hack中没有什么作用，不过在以“intext:to parent directory”为关键字进行搜索后，我们会很惊奇的发现，无数网站的目录暴露在我们眼前。我们可以在其中随意切换目录，浏览文件，就像拥有了一个简单的Webshell。形成这种现象的原因是由于IIS的配置疏忽。同样，中文IIS配置疏忽也可能出现类似的漏洞，我们用“intext:转到父目录”就可以找到很多有漏洞的中文网站。 2.随意浏览网站中的文件FiletypeFiletype的作用是搜索指定文件。假如我们要搜索网站的数据库文件，那么可以以“filetype:mdb”为关键字进行搜索，很快就可以下载到不少网站的数据库文件。当然，Filetype语法的作用不仅于此，在和其他语法配合使用的时候更能显示出其强大作用。 Site黑客使用Site，通常都是做入侵前的信息收集。“Site:target.com”来获取相关网页，从中提取有用的资料。Site语法可以显示所有和目标网站有联系的页面，从中或多或少存在一些关于目标网站的资料，这对于黑客而言就是入侵的突破口，是关于目标网站的一份详尽的报告。 语法组合，威力加倍 虽然上文中介绍的这几个语法能各自完成入侵中的一些步骤，但是只使用一个语法进行入侵，其效率是很低下的。Google Hack的威力在于能将多个语法组合起来，这样就可以快速地找到我们需要的东西。下面我们来模拟黑客是如何使用Google语法组合来入侵一个网站的。 3.搜索相关页面下载网站的数据库搜索“Site:target.com Filetype:mdb”就可以寻找目标网站的数据库，其中的Site语法限定搜索范围，Filetype决定搜索目标。用这种方法有一个缺点，就是下载到数据库的成功率较低。在这里我们还可以采用另一种语法组合，前提是目标网站存在IIS配置缺陷，即可以随意浏览站点文件夹，我们搜索“Site:target.com intext:to parent directory”来确定其是否存在此漏洞。在确定漏洞存在后，可以使用“Site:target.com intext:to parent directory+intext.mdb”进行数据库的搜索。 4.找到网站数据库登录后台管理下载到数据库后，我们就可以从中找到网站的管理员帐户和密码，并登录网站的后台。对于网站后台的查找，可以使用语法组合“Site:target.com intitle:管理”或者“Site:target.com inurl:login.asp”进行搜索，当然我们可以在这里进行联想，以不同的字符进行搜索，这样就有很大的概率可以找到网站的后台管理地址。接下去黑客就可以在后台上传Webshell，进一步提升权限，在此不再阐述。 5.利用其他漏洞如果下载数据库不成功，我们还可以尝试其他的入侵方法。例如寻找上传漏洞，搜索 “Site:target.com inurl:upload.asp”。此外，我们还可以根据一些程序漏洞的特征，定制出Google Hack的语句。 Shared：Exploit DB上有很多大佬总结分享的构造语句，感兴趣的同学可以借鉴学习下。 参考链接：http://www.googleguide.com/advanced_operators_reference.html 转载：https://www.cnblogs.com/H4ck3R-XiX/p/12489218.html","categories":[{"name":"搜索引擎","slug":"搜索引擎","permalink":"http://www.lvhejin.cn/categories/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"},{"name":"Google","slug":"搜索引擎/Google","permalink":"http://www.lvhejin.cn/categories/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/Google/"}],"tags":[{"name":"搜索引擎","slug":"搜索引擎","permalink":"http://www.lvhejin.cn/tags/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"},{"name":"搜索语法","slug":"搜索语法","permalink":"http://www.lvhejin.cn/tags/%E6%90%9C%E7%B4%A2%E8%AF%AD%E6%B3%95/"},{"name":"Google","slug":"Google","permalink":"http://www.lvhejin.cn/tags/Google/"}]},{"title":"安全测试漏洞大全","slug":"网络安全/安全测试漏洞大全","date":"2022-11-21T14:25:53.000Z","updated":"2024-01-05T17:32:17.655Z","comments":true,"path":"2022/11/21/网络安全/安全测试漏洞大全/index.html","link":"","permalink":"http://www.lvhejin.cn/2022/11/21/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E6%BC%8F%E6%B4%9E%E5%A4%A7%E5%85%A8/index.html","excerpt":"","text":"一、认证测试类1.1 敏感数据明文传输风险名称：敏感数据明文传输风险级别：中风险风险描述：恶意攻击者可能通过嗅探等攻击方式截取用户的登录信息测试过程：浏览网站的过程中可使用抓包工具抓取请求包，查看请求和返回的信息中是否含有用户的敏感信息，如用户名、密码及个人信息（姓名、身份证号、手机号及住址等等）风险分析：恶意攻击者如果对网站所在的网段进行嗅探，则当用户登录的时候该攻击者就可以获取到用户的用户名和密码等信息加固建议：进行数据传输时，对用户名和密码信息进行先加密、再发送的模式，可以有效的规避登录凭证被攻击者截取利用1.2 后台存在默认密码风险名称：后台存在默认密码风险级别：高风险风险描述：网站存在默认的后台管理密码，恶意攻击者凭借默认密码随意登入管理系统测试过程：使用形如账号为admin，密码为123456，尝试登录网站风险分析：恶意攻击者登入系统后，可进行增删改查操作，从而导致信息泄露以及服务器被入侵加固建议：立刻修改默认密码，使用数字，特殊符号，大小写字母混合的高强度密码1.3 新用户使用默认密码风险名称：新用户使用默认密码风险级别：高风险风险描述：新用户登录普遍存在使用默认密码现象，无初次登录修改密码策略测试过程：新用户可使用密码为123456/111111/888888（根据系统提示的默认密码），登录网站风险分析：可利用此方法尝试获取其他用户的敏感信息，造成不必要的风险加固建议：建议增加初次登录修改密码策略，初始密码必须需要修改才能使用1.4 账户无错误锁定机制风险名称：账户无错误锁定机制风险级别：低风险风险描述：攻击者可通过暴力破解、口令猜解等手段，尝试攻击获取管理账户的权限测试过程：使用错误的账户/密码登录，抓包后重放多次（如10次或以上），查看其返回是否一致，是否无账户登录错误锁定机制风险分析：账户无锁定策略可能会导致攻击者尝试攻击破解获取账户的权限加固建议：建议用户登录时添加锁定策略，错误次数达到指定次数以上锁定该账户指定时长，或者锁定IP等手段，不同权限等级的账户使用不同的锁定策略1.5 认证绕过风险名称：认证绕过风险级别：高风险风险描述：通过会话标识、参数来管理认证（Session IDs）因此如果使用会话标识或参数可推倒其产生结果算法，就回给一个恶意攻击者去发现其他的有效的会话标识或用户参数，从而冒充通过认证的用户进行操作测试过程：输入任意账户密码，提交数据时拦截请求的响应包，修改为登录成功的响应标识（返回成功+测试账户或其他用户会话标识）后放行。风险分析：通过构造会话标识、参数来猜解用户的会话标识、参数，冒充用户进行操作加固建议：使用高强度的加密算法加密会话标识段参数段1.6 认证重放攻击风险名称：认证重放攻击风险级别：高风险风险描述：攻击者发送一个目标主机已经接收过的包，特别是在认证过程中，用于认证用户身份所接收的包测试过程：向服务器重放请求包，查看请求是否成功执行风险分析：攻击者可以用重放方式伪装成用户，冒充用户进行下一步操作加固建议：1、可以利用时间戳进行防御，这个方法实现的前提是服务器的时间必须和用户的时间保持同步，在同一个时间，服务器和用户每隔一段时间就会更改自己的标识，用户输入登录之后，一段时间后标识就会改变，时间戳越小越保险2、加随机数3、加流水号1.7 认证弱口令风险名称：认证弱口令风险级别：高风险风险描述：弱口令是指容易被人猜测到或被破解工具破解的口令，一些仅包含简单数字或字母的简单口令，如“1234”、“abcd”、“admin”、“888888”等测试过程：已知账户，使用弱口令形如“1234”、“abcd”、“admin”、“888888”等密码尝试登录风险分析：通过弱口令攻击者可以进入后台修改资料，进入金融系统盗取钱财，进入OA系统可以获取企业内部资料，进入监控系统可以进行实时监控等等加固建议： 不使用空口令或者系统缺省的口令 口令长度不小于八个字符 口令应该符合四分之三原则，既应包括大小写字母，数字和特殊字符中至少三项 至少90天内更换一次口令，防止未被发现的入侵者继续使用该口令 1.8 不安全的验证码风险名称：不安全的验证码风险级别：中风险风险描述：通过截取数据包，重复多次使用同一验证码，或验证码存在一定规律测试过程：输入正确验证码并提交事务，截取带正确验证码的请求包，将该请求包进行重放，看事务是否正常执行或是否有一致的响应风险分析：验证码更新机制较弱，较规律性可能会导致恶意攻击者的恶意利用加固建议：增强验证码随机性，增强验证码更新机制1.9 验证码前端校验风险名称：验证码前端校验风险级别：高风险风险描述：通过截取数据包，分析返回值中是否含有验证码，可用于绕过验证测试过程：点击获取验证码后查看返回的响应包，是否含有明文的验证码或base64编码的验证码图片。风险分析：验证码返回至前端，可能被攻击者用于绕过验证，如绕过手机验证码或邮箱等验证加固建议：验证码校验放在后台执行，禁止返回至前端1.10 暴力破解风险名称：暴力破解风险级别：高风险风险描述：在登录页面，输入用户名密码后，未设置验证码机制，可利用暴力破解窃取用户信息测试过程：使用Burp Suite里Intruder模块尝试进行暴力破解风险分析：登录界面缺少多因子验证机制，恶意攻击者可通过暴力猜解用户的用户名密码信息加固建议：登录界面添加动态随机验证码辅助认证1.11 用户名/账户可以枚举风险名称：用户名/账户可以枚举风险级别：中风险风险描述：通过登录失败时服务器反馈的信息来判断是否存在有效账户测试过程：通过登录的返回信息,显示“用户名/密码不正确”，或响应包返回的信息不一致，即可判断有此漏洞，可使用Burp Suite里Intruder模块进行用户名/账户枚举风险分析：攻击者可以通过尝试登录网页回复信息判断账户是否存在，如果网页回复信息如下：• 客户端请求：有效的用户/密码错误-“服务器回答： ‘密码不正确’• 客户端请求：错误的用户/密码错误-“服务器回答： ‘用户名不存在’通过上述答复，用户就能知道第一次请求的是一个有效的用户名，因此可以枚举有效用户列表加固建议：在登录认证失败时回复统一使用“账户或密码错误”，而不是直接返回“账户错误”，“密码错误”等信息1.12 HTTP认证泄露漏洞风险名称：HTTP认证泄漏漏洞风险级别：中风险风险描述：Web目录开启了HTTP Basic认证，但未做IP限制，导致攻击者可以暴力破解帐号破解或者其他进一步的操作测试过程：尝试打开该站点下/basic/index.php，成功打开，可尝试登录或进行暴力破解风险分析：未对Web目录进行IP登录限制可能会被恶意攻击者利用构造攻击加固建议：对指定目录进行限制IP访问 二、会话管理类2.1 会话固定攻击风险名称：会话固定攻击风险级别：高风险风险描述：Web服务的Session ID是不变的，会话ID通过URL地址的查询参数携带道服务器，服务器不做检查，Web会话可能被劫持利用测试过程：可在不同浏览器，重复/重新登录用户账号，观察其携带的参数是否不变，如不变，可尝试在清空缓存的状态下，直接打开带有该参数的链接，看该账号是否登录成功，是否可以正常使用该账号下的权限进行增删查改风险分析：指Web服务的会话ID是确知不变的，攻击者为受害者确定一个会话ID从而达到攻击的目的加固建议：1.用户登录时生成新的Session ID。判断用户是否包含有效的会话标识符，否则服务器将会要求用户重新登录。2.设置HttpOnly，关闭透明化Session ID，User-Agent验证，Token校验等2.2 URL重定向漏洞风险名称：重定向漏洞风险级别：中风险风险描述：攻击者可以将 参数中URL 值引入任意开发者的URL或钓鱼网站测试过程：修改参数中的合法URL为非法URL，然后查看是否能正常跳转或者响应包是否包含了任意的构造URL风险分析：部分HTTP参数会保留 URL 值，且会导致 Web 应用程序将请求重定向到指定的 URL，攻击者可以将 URL 值改成指向恶意站点，从而顺利启用网络钓鱼欺骗并窃得用户凭证加固建议：避免重定向到基于参数值的外部站点。倘若必须如此，请务必验证应用程序重定向到的 URL，避免重定向到不明站点 2.3 点击劫持漏洞风险名称：点击劫持漏洞风险级别：低风险风险描述：通过覆盖不可见的框架误导受害者点击，虽然受害者点击的是他所看到的网页，但其实他所点击的是被黑客精心构建的另一个置于原网页上面的透明页面。这种攻击利用了HTML标签的透明属性测试过程：使用标签将测试URL嵌入至测试页面中，查看测试页面打开后是否能正常加载或使用。风险分析：通过劫持功能页面，可以诱骗受害者输入敏感数据，截取数据加固建议：X-FRAME-OPTIONS是微软提出的一个HTTP头，专门用来防御利用嵌套的点击劫持攻击。并且在IE8、Firefox3.6、Chrome4以上的版本均能很好的支持。这个头有三个值：DENY // 拒绝任何域加载SAMEORIGIN // 允许同源域下加载ALLOW-FROM // 可以定义允许frame加载的页面地址PHP中设置：header(“X-FRAME-OPTIONS:DENY”) 2.4 Apache HttpOnly Cookie泄露风险名称：Apache HttpOnly Cookie泄露风险级别：中风险风险描述：Apache HTTP Server 2.2.x到2.2.21在构建Bad Request（aka 400）错误文档期间没有正确地限制头信息，这允许远程攻击者通过构造的脚本获得HttpOnly Cookie的值测试过程：利用恶意构造的脚本，使用户cookie大于4k，再请求该网站时会得到响应为400且当前用户cookie会显示出来，再使用正则匹配即可得出正常的cookie值风险分析：攻击者可通过恶意Js脚本来访问/窃取网站的Cookie信息，并在稍后用于身份盗窃或用户伪装从而达到获取相关权限、数据等目的加固建议：将Apache升级到最新版本2.5 Cookie缺失HttpOnly标识风险名称：Cookie缺失HttpOnly标识风险级别：低风险风险描述：未启用HttpOnly属性可能导致 Cookie被窃取。窃取的Cookie可以包含标识站点用户的敏感信息，攻击者可以重放窃取的Cookie，以便伪装成用户或获取敏感信息测试过程：查看响应包中的cookie中是否含有HttpOnly标识风险分析：该属性未设置可能会导致跨站脚本威胁，可能导致Cookie及站点用户的资料被窃取加固建议：在Cookie中加上HttpOnly标识，以下网址为详细介绍Cookie中的HttpOnly标识HttpCookie.HttpOnly 属性 (System.Web) | Microsoft Learn2.6 Cookie缺失Secure属性风险名称：Cookie缺失Secure属性风险级别：低风险风险描述：当Secure属性设置为Flase时，Cookie存在被窃听的风险测试过程：使用https协议，用测试账号成功登录某站点，在不登出的情况下，再使用http协议访问该站点，确认是否会跳转至登录页面，或确认使用http协议访问过程中cookie是否正常发送风险分析：只有当Secure属性设置为True时，Cookie只有在HTTPS协议下才能上传到服务器，而在HTTP协议下是没法上传的，未设置Secure的Cookie存在被窃听的风险加固建议：启用Cookie中的Secure属性，以下网址为详细介绍Cookie中的Secure属性HttpCookie.Secure 属性 (System.Web) | Microsoft Learn2.7 Cookie-Domain属性设置不当风险名称：Cookie-Domain属性设置不当风险级别：低风险风险描述：Domain表示的是Cookie所在的域，Domain设置错误，攻击者可以进行跨域访问测试过程：抓取数据包查看cookie的domain属性设定是否合理风险分析：如果Domain设置错误，则允许其它存在漏洞的服务器接收到Cookie加固建议：应该将 Domain 设置为需要接收该 Cookie 的服务器。例如：如果应用存在于 app.mysite.com 服务器上，那幺它应该被设置成”;domain=app.mysite.com”而不能设置成 domain=.mysite.com2.8 请求Token 泄漏风险名称：请求Token泄漏风险级别：中风险风险描述：功能访问时Token可获取，可对本部分功能进行暴力猜解等攻击测试过程：观察Token是否可破解，如使用MD5加密，或使用时间戳（请求或服务器时间）为Token等等。风险分析：可利用该地址使用自写脚本对部分功能进行暴力猜解如：私密问题答案等加固建议：建议Token在请求时生成并不返回到客户端，改为内置函数2.9 CSRF漏洞风险名称：CSRF漏洞风险级别：高风险风险描述：CSRF（跨站请求伪造），是指利用受害者尚未失效的身份认证信息（cookie、会话等），诱骗其点击恶意链接或者访问包含攻击代码的页面，在受害人不知情的情况下以受害者的身份向（身份认证信息所对应的）服务器发送请求，从而完成非法操作（如转账、改密等）。测试过程：使用CSRFTester或Burp Suite中Engagement tools构造CSRF Poc为HTML，修改表单中某些参数，使用浏览器打开该HTML，提交表单后查看响应结果，看该操作是否成功执行。风险分析：未验证Referrer或者使用Token导致用户或者管理员可被CSRF添加，加固建议： 在表单中添加form token（隐藏域中的随机字符串）； 请求referrer验证； 关键请求使用验证码 2.10 WebLogic SSRF漏洞风险名称：WebLogic SSRF漏洞风险级别：高风险风险描述：WebLogic 10.0.2-10.3.6版本的SearchPublicRegistries.jsp处会引起SSRF漏洞测试过程：可以使用UDDI功能对 WebLogic 可访问的所有主机端口进行探测。探测到的服务会返回合法的 SOAP 响应信息，甚至可以看到相应的完整信息。例如，可使用 https://[vulnerablehost]/uddiexplorer/SearchPublicRegistries.jsp?operator=http://10.0.0.4:23&amp;rdoSearch=name&amp;txtSearchname=sdf&amp;txtSearchkey=&amp;txtSearchfor=&amp;selfor=Business+location&amp;btnSubmit=Search尝试探测某内部主机是否监听23 端口。风险分析：攻击者可以利用该漏洞绕过访问限制（如防火墙），进而将受感染的服务器作为代理进行端口扫描，甚至访问系统中的数据，加固建议：1.如果业务不需要UDDI功能，就关闭这个功能。可以删除uddiexporer文件夹，可以可在/weblogicPath/server/lib/uddiexplorer.war解压后，注释掉上面的jsp再打包。2.安装oracle的更新包。http://www.oracle.com/technetwork/topics/security/cpujul2014-1972956.html 2.11无会话超时设置 风险名称：无会话超时设置风险级别：中风险风险描述：会话超时设置不当。即用户使用公共计算机访问网站，离开时，该用户没有点击退出，而是直接关闭浏览器。攻击者在一个小时后能使用相同浏览器通过身份认证。测试过程：登录后静置或直接关闭网页，一小时后再直接打开主页链接进行操作，如访问资料或修改资料等。风险分析：没有会话超时限制，攻击者在长时间后能使用相同浏览器通过身份认证，使用受害者的账号对数据进行更改，如增加垃圾数据或删改数据等操作。加固建议：限制会话寿命，增加合适的会话超时限制。2.12会话标识未失效漏洞风险名称：会话标识未失效漏洞风险级别：中风险风险描述：会话标识未失效导致登录校验绕过，即攻击者可以在浏览器中打开系统登录后的主页直接登入系统，获取账户操作权限。测试过程：使用账号密码成功登录后点击退出系统，再在浏览器中直接打开登录后的主页。风险分析：攻击者无需用户账户或密码即可绕过登录验证，使用受害者的账号对数据进行更改，如增加垃圾数据或删改数据等有害正常业务的操作。加固建议：用户登出系统后要销毁会话标识 三、数据校验类3.1 XSS跨站脚本攻击-存储型风险名称：XSS跨站脚本攻击-存储型风险级别：高风险风险描述：XSS跨站脚本攻击是通过在网页中加入恶意代码，当访问者浏览网页时恶意代码会被执行或者通过给管理员发信息的方式诱使管理员浏览，从而获得管理员权限，控制整个网站。攻击者利用跨站请求伪造能够轻松地强迫用户的浏览器发出非故意的HTTP请求，如诈骗性的电汇请求、修改口令和下载非法的内容等请求测试过程：Message一栏输入测试代码，提交。 风险分析：该漏洞可能被攻击者利用窃取或操纵客户会话和Cookie，它们可能用于模仿合法用户，从而使黑客能够以合法用户身份登录系统进行渗透。可执行攻击者恶意脚本加固建议：1.对产生漏洞模块的传入参数进行有效性检测2.当客户端输入限定值意外的字符后，立即转向自定义的错误页，而不能使用服务器默认的错误输出方式3.对以上标签进行危险字符过滤，禁止(‘、”、+、%、&amp;、&lt;&gt;、（）、;、等)特殊字符的传入4.对应用层防火墙配置策略进行审查，是否配置了过滤特殊字符 3.2 XSS跨站脚本攻击-反射型风险名称：XSS跨站脚本攻击-反射型风险级别：高风险风险描述：跨站脚本攻击是通过在网页中加入恶意代码，当访问者浏览网页时恶意代码会被执行或者通过给管理员发信息的方式诱使管理员浏览，从而获得管理员权限，控制整个网站。攻击者利用跨站请求伪造能够轻松地强迫用户的浏览器发出非故意的HTTP请求，如诈骗性的电汇请求、修改口令和下载非法的内容等请求测试过程：查询时，输入测试代码，提交 风险分析：该漏洞可能被攻击者利用窃取或操纵客户会话和Cookie，它们可能用于模仿合法用户，从而使黑客能够以合法用户身份登录系统进行渗透。可执行攻击者恶意脚本加固建议：1.对产生漏洞模块的传入参数进行有效性检测2.当客户端输入限定值意外的字符后，立即转向自定义的错误页，而不能使用服务器默认的错误输出方式3.对以上标签进行危险字符过滤，禁止(‘、”、+、%、&amp;、&lt;&gt;、（）、;、等)特殊字符的传入4.对应用层防火墙配置策略进行审查，是否配置了过滤特殊字符 3.3 SQL注入风险名称：SQL注入风险级别：高风险风险描述：恶意攻击者可通过SQL注入漏洞构造SQL注入语句，对服务器端返回特定的错误信息来获取有利用价值的信息，甚至可篡改数据库中的内容并进行提权测试过程：参数aid存在注入。 风险分析：因没有对用户输入数据的合法性进行判断和限制，应用程序存在安全隐患。用户可以提交一段数据库查询代码，根据程序返回的结果，获得数据库内容，如库名、表名、字段名、数据内容等。进一步可修改数据，甚至操控服务器加固建议：1.对产生漏洞模块的传入参数进行有效性检测，对传入的参数进行限定2.当用户输入限定字符时，立刻转向自定义的错误页，不能使用服务器默认的错误输出方式3.对以上标签进行危险字符过滤，禁止(‘、”、+、%、&amp;、&lt;&gt;、（）、;、and、select等)特殊字符的传入4.加密数据库内存储信息5.与数据库链接并访问数据时，使用参数化查询方式进行链接访问 3.4 CRLF注入风险名称：CRLF注入风险级别：高风险风险描述：HTTP消息头截断注入，可以向http消息头写入或覆盖任意数据测试过程： 抓取数据包，正常数据包如下。 抓取数据包，在language参数加入%0aSet-cookie:JSPSESSID%3D1111，输入通过验证。 风险分析：HTTP使用CRLF来表示每一行的结束。这就意味着用户可以通过CRLF注入自定义HTTP Header，导致用户可以不经过应用层直接与Server对话。HTTP Header的定义就是基于这样的”Key:Value”的结构，用CRLF命令表示一行的结尾。”Location:”头用来表示重定向的URL地址，”Set-Cookie:”头用来设置Cookies。如果用户的输入经过验证，其中存在CRLF的字符就可以被用来达到欺骗的目的加固建议：服务端检测传递参数是否包含“%0d%0a”，对参数进行危险字符过滤，禁止(“%0d”、“%0a”等)特殊字符的传入3.5 XPath注入风险名称：XPath注入风险级别：高风险风险描述：XPath注入攻击利用两种技术，即XPath扫描和 XPath查询布尔化。通过该攻击，攻击者可以控制用来进行XPath查询的XML数据库。这种攻击可以有效地对付使用XPath查询（和XML数据库） 来执行身份验证、查找或者其它操作测试过程：正常查询如下http://192.168.0.104/bWAPP/xmli_2.php?genre=action&amp;action=search 构造查询语句http://192.168.0.104/bWAPP/xmli_2.php?genre=action&#39;)] | //* | //*[(‘ &amp;action=search 注入成功。风险分析：因没有对用户输入数据的合法性进行判断和限制，应用程序存在安全隐患。用户可以提交一段数据库查询代码，根据程序返回的结果，获得数据库内容，如库名、表名、字段名、数据内容等。进一步可修改数据，甚至操控服务器加固建议：1.数据提交到服务器上端，在服务端正式处理这批数据之前，对提交数据的合法性进行验证2.检查提交的数据是否包含特殊字符，对特殊字符进行编码转换或替换、删除敏感字符或字符串3.对于系统出现的错误信息，以IE错误编码信息替换，屏蔽系统本身的出错信息4.参数化XPath查询，将需要构建的XPath查询表达式，以变量的形式表示，变量不是可以执行的脚本5.通过MD5、SSL等加密算法，对于数据敏感信息和在数据传输过程中加密，即使某些非法用户通过非法手法获取数据包，看到的也是加密后的信息。3.6 XML注入风险名称：XML注入风险级别：高风险风险描述：XML注入是通过改写XML的数据内容来实现。XML通常用于存储数据，如果用户提供的数据是以XML的方式进行存储，那么对攻击者来说添加恶意代码至XML中进行攻击测试过程：输入836239账户，显示的余额100，可兑换的只有3类奖品。 修改应答包，构造xml代码。 此刻显示的多了2000和3000的积分奖品。 风险分析：Web程序代码中把用户提交的参数未做过滤就直接输出到XML中，可能引起XML注入攻击加固建议：1.对产生漏洞模块的传入参数进行有效性检测，对传入的参数进行限定2.当用户输入限定字符时，立刻转向自定义的错误页，不能使用服务器默认的错误输出方式3.对以上标签进行危险字符过滤，禁止(‘、”、+、%、&amp;、&lt;&gt;、（）、;、and、select等)特殊字符的传入4.在代码级输出时对XML特殊字符（“&lt;”、“&gt;”、“&gt;]]”）进行转义 3.7 ORM注入风险名称：ORM注入风险级别：高风险风险描述：ORM注入几乎与SQL注入攻击相同。但是注入漏洞存在于由ORM工具生成的代码中测试过程： Sqlin参数存在注入漏洞，于是： 风险分析： 在大多数情况下，ORM层中的漏洞是没有正确验证输入参数的定制代码的结果。大多数ORM工具提供安全的函数来逃避用户输入。但是，如果不使用这些函数，并且开发人员使用接受用户输入的自定义函数，则可能执行SQL注入攻击加固建议：1.使用ORM提供的安全函数2.当用户输入限定字符时，立刻转向自定义的错误页，不能使用服务器默认的错误输出方式3.对标签进行危险字符过滤，禁止(‘、”、+、%、&amp;、&lt;&gt;、（）、;、and、select等)特殊字符的传入 3.8 SSI注入风险名称：SSI注入风险级别：高风险风险描述：Web服务器通常允许开发人员在静态HTML中嵌入小片段的动态代码，而不必处理全部的服务器端或客户端语言，称作服务器包含(SSI)在网页内容被返回给用户之前，服务器会执行网页内容中的SSI标签。恶意攻击者输入的内容可以显示在页面中测试过程：在first name输入测试代码 可以看到由于没有正确配置服务器，我们已经可以看到网站目录中所有文件打开一个终端，启动端口4444上的netcat侦听器再次提交 反弹shell,连接成功，可以执行命令。 风险分析：此漏洞允许攻击者将代码插入到HTML代码中执行，通过构造甚至执行远程代码执行加固建议：1.清理用户输入:禁止可能支持SSI的模式或字符2.由于SSI会带来许多安全风险，建议您不在Web站点中使用SSI3.9 HTTP响应头注入风险名称：HTTP响应头注入风险级别：高风险风险描述：Web程序代码中把用户提交的参数未做过滤就直接输出到HTTP响应头中，攻击者可以利用该漏洞来注入HTTP响应头，可以造成XSS攻击、欺骗用户下载恶意可执行文件等攻击测试过程：输入foobar%0a%0aContent-Length:%200%0a%0a%0a%0aHTTP/1.1%20200%20OK%0a%0aContent-Type:%20texthtml%0a%0aContent-Length:%2047%0a%0a%0d%0aHacked 风险分析：通过恶意攻击者构造的参数直接输入到HTTP响应头中，从而进行攻击加固建议： 在设置HTTP响应头的代码中，过滤回车换行（%0d%0a、%0D%0A)字符。 不采用有漏洞版本的Apache服务器，同时对参数做合法性校验以及长度限制，谨慎的根据用户所传入参数做HTTP返回包的Header设置3.10 XXE外部实体注入风险名称：XXE外部实体注入风险级别：高风险风险描述：系统存在XXE外部实体注入，可通过外部引用dtd的方式获取系统文件信息测试过程： 构造post数据包，注入成功。 风险分析：攻击者可利用外部引用dtd的方式来执行服务器系统命令，从而获取服务器敏感信息，可造成资料丢失等风险产生加固建议：1.检查所使用的底层XML解析库，默认禁止外部实体的解析2.使用第三方应用代码及时升级补丁3.同时增强对系统的监控，防止此问题被人利用3.11 命令注入漏洞风险名称：命令注入漏洞风险级别：高风险风险描述：Web程序代码中把用户提交的参数未做过滤就直接使用Shell执行，攻击者可以执行任意系统命令测试过程：输入127.0.0.1提交，正常结果如下 输入127.0.0.1&amp;net user，提交。用户名被列举出来了。 风险分析：Web程序代码中把用户提交的参数未做过滤就直接输出，通过修改参数，攻击者可直接使用Shell，对系统执行命令加固建议：1.对产生漏洞模块的传入参数进行有效性检测，对传入的参数进行限定2.当用户输入限定字符时，立刻转向自定义的错误页，不能使用服务器默认的错误输出方式3.在代码级调用Shell时，对命令行中的特殊字符进行转义（|、&amp;、；等），防止执行其他非法命令。3.12 本地文件包含漏洞风险名称：本地文件包含漏洞风险级别：高风险风险描述：测试发现下载相关链接中参数未进行过滤，用户可任意下载文件测试过程：http://192.168.116.129/DVWA-master/vulnerabilities/fi/?page=include.php构造urlhttp://192.168.116.129/DVWA-master/vulnerabilities/fi/?page=/etc/shadow 报错，显示没有这个文件，说明不是服务器系统不是Linux，但同时暴露了服务器文件的绝对路径构造url（绝对路径）成功读取了服务器的php.ini文件 风险分析：由于程序员未对用户可控的变量进行输入检查，导致用户可以控制被包含的文件，成功利用时可以使服务器将特定文件当成服务端脚本执行，从而导致攻击者可获取一定的服务器权限，同时可能导致服务器上的敏感配置文件被攻击者读取加固建议：建议对URL参数内容进行检测和过滤，禁止参数内容中出现 “.”“\\”“?”“空字符”“/”“%”等特殊字符。同时保持现有文件与目录访问权限，防范利用此漏洞读取服务器配置文件3.13 远程文件包含漏洞风险名称：远程文件包含漏洞风险级别：高风险风险描述：如果PHP的配置选项allow_url_include为on的话,则include/require函数是可以加载远程文件的，这种漏洞被成为远程文件包含测试过程：在远程服务器 192.168.116.128上传一个文件 phpinfo.txt 构造urlhttp://192.168.116.129/DVWA-master/vulnerabilities/fi/?page=http://192.168.116.128/phpinfo.txt远程执行命令成功 风险分析：由于程序员未对用户可控的变量进行输入检查，导致用户可以控制被包含的文件，成功利用时可以使服务器将特定文件当成服务端脚本执行，从而导致攻击者可获取一定的服务器权限，同时可能导致服务器上的敏感配置文件被攻击者读取加固建议： 修改配置文件，在php.ini中进行设置allow_url_include = ‘off’，在.htaccess中进行设置php_flag allow_url_include off 建议对URL参数内容进行检测和过滤，禁止参数内容中出现 “.”“\\”“?”“空字符”“/”“%”等特殊字符。同时保持现有文件与目录访问权限，防范利用此漏洞读取服务器配置文件3.14 文件上传漏洞风险名称：文件上传漏洞风险级别：高风险风险描述：接受文件上传的Web程序未对文件类型和格式做合法性校验，导致攻击者可以上传Webshell（.php、.jsp等）或者非期望格式的文件（.jpg后缀的HTML文件）测试过程：上传文件，选择文件进行上传 得知上传路径/hackable/uploads/test.php，使用菜刀连接。 风险分析：未对上传文件的格式内容进行校验，恶意攻击者通过上传包含恶意代码的文件，从而攻击利用获得服务器的权限加固建议：对上传文件格式进行严格控制，建立文件格式白名单制，限定只允许上传文档类或图片类格式附件，如PDF、DOC、JPG、GIF等，除名单内的任何格式均不能上传**3.15 **风险名称：未验证文件上传类型风险级别：中风险风险描述：通过检测，发现未对上传文件类型进行严格控制，可以上传asp、exe、asa、1.asp;1.jpg等危险类型文件测试过程：新增资料处，可以选择任意类型的文件上传。 风险分析：经过分析，当前对上传文件进行逻辑路径的分离是较为合理的架构方式，能够防范Webshell的解析执行并起到防盗链的效果，但是由于未对上传文件格式进行限制，一旦后台管理被突破，不法分子就可以将木马地址绑定在pdf文件中，或将pdf文档替换成exe木马，从而对访问本站的用户造成一定的危害加固建议：对上传文件格式进行严格控制，建立文件格式白名单制，限定只允许上传文档类或图片类格式附件，如PDF、DOC、JPG、GIF等，除名单内的任何格式均不能上传 3.16 本地校验绕过风险名称：本地校验绕过风险级别：中风险风险描述：恶意攻击者截取数据绕过本地验证上传恶意文件，从而进行恶意攻击测试过程：直接上传其它类型的文件，被禁止上传 先上传图片，通过抓取数据包，修改文件后缀为jsp，上传成功。 风险分析：恶意攻击者通过阶段数据包，上传而恶意文件从而对服务器，网站进行破坏攻击加固建议：对于文件上传等校验应在前后端均进行校验。 四、通信安全类4.1 未使用加密传输协议风险名称：未使用加密传输协议风险级别：低风险风险描述：服务器Request信息中涉及系统敏感信息，HTTP协议明文传送该敏感信息测试过程：利用数据拦截工具，制作一个中间人攻击的场景，获取到一个登陆操作的请求包，发现包中的登陆账号密码都是明文传输 风险分析：可导致账户敏感信息泄露，攻击者可以截获上述信息，查看、篡改数据内容，或者进一步攻击加固建议：建议对敏感信息数据以加密方式传输4.2通过未加密信道发送敏感数据风险名称：通过未加密信道发送敏感数据风险级别：中风险风险描述：在目此表单是从不安全网页（HTTP）页面提供的。此页面可能使用中间人攻击劫持，攻击者可以替换表单目标测试过程：利用数据拦截工具，制作一个中间人攻击的场景，发现一个未使用https加密通信的网站，从拦截的请求包中发现一个未加密处理及传输的表单，可以在表单中获取到用户提交的表单信息。 风险分析：可能受到恶意攻击者的劫持，可替换原目标网站加固建议：数据所在的表单应该被安全的（HTTPS）页面提供服务**4.3 SSL/TLS RC4 信息泄露漏洞 **风险名称：SSL/TLS RC4 信息泄露漏洞风险级别：中风险风险描述：在TLS协议和SSL协议中使用的RC4算法可以允许远程攻击者获取由包含多个单字节偏置引起的敏感信息。攻击者可以通过使用相同明文进行纯文本恢复攻击并获取敏感信息的大量会话中的密文的统计分析来利用此漏洞测试过程：利用nmap扫描工具下的脚本，执行下列语句：nmap -p 443 –script=ssl-enum-ciphers TARGET风险分析：恶意攻击者可通过此漏洞恢复纯文本信息，因此造成信息泄露加固建议：1.切换到使用CBC模式密码套件2.切换到使用AEAD密码组，如AES-GCM3.更多修复信息： On the Security of RC4 in TLS 4.4 OpenSSL Heartbleed漏洞风险名称：OpenSSL Heartbleed漏洞风险级别：高风险风险描述：SSL标准包含一个心跳选项，允许连接一端的主机发出一条简短的信息确认另一端的主机是否存活，并获取反馈。可以通过巧妙的手段发出恶意心跳信息，欺骗另一端的主机泄露机密信息，受影响的主机可能会因此而被骗，并发送服务器内存中的信息测试过程：利用nmap扫描工具下的脚本，执行下列语句：nmap -p 443 –script= ssl-heartbleed TARGET确定存在heartbleed漏洞后可利用msf工具模块进行漏洞利用 风险分析：窃取对方主机内存中的信息，对方的内存信息可能存在用户名，密码等敏感信息加固建议：建议到官方更新最新OpenSSL版本，官方网站网址为：www.openssl.org4.5 OpenSSL CCS注入风险名称：OpenSSL CCS注入风险级别：高风险风险描述：CCS消息本应该是在握手加密参数协商完成之后最终确认消息发送之前来发送，但是CCS消息却在加密参数协商完成之前发送，中间人攻击可以利用这点特性在一个SSL握手过程中向客户端和服务端分别发送一个CCS包并用长度为零的预主密钥来协商会话密钥，这样攻击者就可以知道会话密钥 并可以篡改或截获SSL通信数据测试过程：利用nmap扫描工具下的脚本，执行下列语句：Nmap -p 443 –script=ssl-ccs-injection TARGET风险分析：攻击者可以发起中间人攻击并利用此漏洞篡改或监听SSL加密传输的数据加固建议：建议到官方更新最新OpenSSL版本，官方网站网址为：www.openssl.org 4.6 OpenSSL POODLE漏洞风险名称：OpenSSL POODLE注入风险级别：中风险风险描述：俗称“贵宾犬”漏洞，此漏洞是针对SSL3.0中CBC模式加密算法的一种Padding Oracle攻击，可以让攻击者获取SSL通信中的部分信息明文，如果将明文中的重要部分获取了，比如Cookie,Session，则信息的安全则出现了隐患测试过程：利用nmap扫描工具下的脚本，执行下列语句：Nmap -p 443 –script=ssl-poodle TARGET风险分析：黑客可利用“POODLE”漏洞劫持用户与网站之间传输的数据，窃取用户名、密码等敏感信息。此外，攻击者还可随意篡改用户接收到的信息，甚至向传输数据中植入恶意代码，进而对用户进行钓鱼、挂马等一系列攻击加固建议：建议到官方更新最新OpenSSL版本，官方网站网址为：www.openssl.org 4.7 OpenSSL Encrypt-Then-Mac renegotiation DDOS漏洞风险名称：OpenSSL Encrypt-Then-Mac renegotiation DDOS漏洞风险级别：中风险风险描述：OpenSSL 1.1.0版本在握手阶段的重协商过程中，所用的Encrypt-Then-Mac扩展若不在初始握手中（或反之易然），则会造成OpenSSL崩溃（取决于密码套件），服务器和客户端均受到影响测试过程：检测openssl的版本，若版本是1.1.0则漏洞存在。风险分析：恶意攻击者可对存在此漏洞的服务器和客户端进行拒绝服务攻击加固建议：建议到官方更新最新OpenSSL版本，官方网站网址为：www.openssl.orgOpenSSL Project已经为此发布了一个安全公告（20170216）以及相应补丁地址：https://www.openssl.org/news/secadv/20170216.txt 4.8 OpenSSL受戒礼漏洞风险名称：OpenSSL受戒礼漏洞风险级别：低风险风险描述：服务器支持RC4协议，存在受戒礼攻击（Bar Mitzvah Attack）风险测试过程：利用openssl工具，执行下列语句: 1openssl s_client -TARGET:443 –cipher RC4 如果能够查看到证书信息，那么就是存在风险漏洞如果显示sslv3 alerthandshake failure,表示该服务器没有这个漏洞。风险分析：攻击者可能解密经过RC4加密的通信数据，从而造成用户敏感信息、数据泄漏加固建议：1、禁止apache服务器使用RC4加密算法vi /etc/httpd/conf.d/ssl.conf修改为如下配置SSLCipherSuite HIGH:MEDIUM:!aNULL:!MD5:!RC4需要重启apache服务/etc/init.d/httpd restart2、在WebLogic配置文件中填写只允许服务器支持的加密协议，例如：想要支持的加密协议A想要支持的加密协议B3.更多修复信息：《Attacking SSL when using RC4》.Itsik Mantin.BLACK HAT ASIA 2015.访问的文章审核中… - FreeBuf网络安全行业门户4.9 OpenSSL Weak ciphers漏洞风险名称：OpenSSL Weak ciphers漏洞风险级别：中风险风险描述：远程主机支持SSL加密，提供弱加密或者不加密的应用测试过程：利用nmap扫描工具下的脚本，执行下列语句：Nmap -p 443 –script=ssl-enum-ciphers TARGET风险分析：远程主机支持SSL加密使用弱密码，如果在同一网段中更容易被利用，可能造成敏感数据泄漏加固建议：配置受影响的应用程序以避免使用弱加密SSL,详情请查阅: https://www.openssl.org/ 五、业务流程安全类5.1 越权漏洞风险名称：越权漏洞风险级别：高风险风险描述：服务器端对用户提出的数据操作请求过分信任，忽略了对该用户操作权限的判定，导致恶意攻击者账号拥有了其他账户的增删改查功能测试过程：1、在需要登陆的功能点中，查看url，header头部，post数据中是否有userid，username，token等身份id或名称的字段，通过修改这些字段重新发包测试是否增删改查到其它用户的数据2、使用普通权限用户，直接访问高权限用户（管理员）才能访问的功能点和API等风险分析：服务器过分信任用户提交的数据请求并且未对用户权限进行判定，可能导致恶意攻击者拥有其他用户的操作权限，平行越权可导致相同权限的用户之间可以进行增改删查等功能，可能造成大批量数据泄露，垂直越权可导致低权限的用户拥有着高权限的执行操作能力，可能会造成更严重的安全事故加固建议：在进行用户操作时，通过Session判断该用户是否具有该功能的操作权限5.2 用户未授权访问风险名称：用户未授权访问风险级别：高风险风险描述：未授权访问页面，未授权就可访问指定资源测试过程：1、通过目录扫描，直接扫描到需要登陆才能访问的功能点地址，并成功访问2、通过正常登陆后，收集登陆后的各功能点url地址、操作地址和API等，退出登陆或使用另一浏览器进行测试这些地址和操作在未登录时能否访问操作风险分析：攻击者如为外部人员，可通过此风险查询管理功能，实行更有针对性的攻击加固建议：建议对指定界面内容进行访问授权，只收授权成功才有权限进行访问5.3 后台管理系统未授权访问风险名称：后台管理系统未授权访问风险级别：高风险风险描述：网站中，部分界面只有管理员才能够访问，但是未对用户访问权限进行设置，导致用户只要构造出了正确的URL，就能够访问到这些网页，存在未授权访问后台管理系统，存在未授权审批添加修改网站数据测试过程：1、直接扫描后台目录文件，直接访问扫描到的后台功能地址2、登陆后台后，收集后台功能点、API等地址，退出后台，未登陆状态直接访问后台各功能点和API风险分析：未经授权访问网站管理后台，未授权对数据进行增改删查操作加固建议：基于页面严格规范访问控制5.4 绕过原密码修改密码风险名称：绕过原密码修改密码风险级别：高风险风险描述：绕过修改密码时原密码的安全限制，从而达到任意原密码即可修改当前密码的目的测试过程：1、原密码与修改密码分开两步，通过修改url地址直接跳转到修改密码的步骤从而直接绕过了原密码的校验2、原密码与新密码修改分开两步，通过修改原密码校验步骤的返回数据包（改为ok，success，true，1等成功标识），从而直接跳转到下一步输入新密码风险分析：在不知道原密码的情况下，绕过原密码的安全限制，任意修改员工的密码加固建议：建议在服务端判断原密码的正确性，服务端在原密码校验后才允许修改密码5.5 任意重置用户密码风险名称：任意重置用户密码风险级别：高风险风险描述：系统未对重置密码的用户身份进行校验或校验不严谨，导致可以绕过用户身份校验或篡改校验结果，从而能够重置任意用户的密码，甚至包括管理员的密码。测试过程：1、通过修改返回数据包中的标识篡改身份校验结果从而进入输入新密码的步骤，成功重置用户密码2、手机或邮箱验证码过于简单，可以直接爆破，从而进入下一步重置用户密码3、发送手机或邮箱验证码，验证码直接在发送数据包的返回数据包中泄露，导致绕过验证直接重置用户密码风险分析：攻击者可利用该方式重置任意用户的密码，从而登陆系统获取相应的操作权限，甚至直接重置管理员密码，获取到系统管理员权限。加固建议：建议在重置密码的功能点中，禁止仅以返回数据包中的标识作为跳转下一步的标识，更新密码时，再一次在服务端对用户身份进行校验，或直接使用服务端保存session进行对应用户密码的更新，加强验证码的校验机制，禁止反馈验证码到客户端，验证码不可复用，且存在较短的时效性。5.6 密码重置url可爆破风险名称：密码重置url可爆破风险级别：高风险风险描述：系统密码重置的url中，使用时间戳或弱token作为当前用户重置密码的链接区分，导致可以通过爆破的手段直接获取到用户的密码重置链接地址。测试过程：1、输入任意的邮箱地址，发送密码重置链接，然后通过爆破链接中的时间戳或token值，直接获取该邮箱用户的重置链接进行密码重置。风险分析：攻击者可利用该漏洞重置任意邮箱用户的密码，从而获取到该用户的系统权限进行操作。加固建议：使用md5加盐随机码或自定义加密方式等加密时间戳或token5.7 批量重置所有用户密码风险名称：批量重置所有用户密码风险级别：高风险风险描述：系统使用客户端传递的身份凭证作为修改密码的用户身份依据，且更新密码的数据包可以重复发送，导致可以批量的修改userid等重置所有用户的密码测试过程：1、更新密码的最后一步，通过userid，username等客户端传递的数据进行更新对应用户密码，且该数据包可以重复发送，导致可以修改userid等批量重置所有用户密码风险分析：攻击者利用该漏洞，可以直接批量快速重置所有系统用户的密码，甚至包括管理员密码，加固建议：使用服务端的session等信息校验用户身份，并修改密码5.8 修改任意用户信息风险名称：修改任意用户信息风险级别：高风险风险描述：系统未对用户权限进行限制，普通用户可修改同级甚至超级管理员的用户资料信息测试过程：1、修改自己的个人信息时，抓取数据包，篡改用户凭证（userid等），直接修改到其它用户的个人信息。2、管理员修改用户信息的API接口没有权限限制，任意已登陆用户只要知道API地址，就可以直接访问进行修改任意用户信息风险分析：攻击者可利用任意用户操控同级用户或者管理员权限进行操作，通过管理员权限进行增删改查用户资料等操作甚至影响系统安全加固建议：建议对各级用户进行权限限制，例如水平越权服务端通过Cookie获取当前用户ID，Cookie进行加密传输，无法修改加密信息。垂直越权需要对每个页面的加载之前进行权限验证即可5.9 支付逻辑漏洞风险名称：支付逻辑漏洞风险级别：高风险风险描述：用户在支付过程中，通过修改提交数据包的数据，实行“刷钱”、“免费购买”等非工作逻辑行为测试过程：1、支付时，截取数据包，修改单价为负数，导致用户不花钱甚至直接余额增长，且买到了商品2、支付时，截取数据包，篡改购买数量为负数或尽可能大，导致低价格购买大量商品等情况。风险分析：支付逻辑代码控制不严谨，对输入参数控制不严格，导致绕过，异常购买加固建议：对购买参数进行严格的过滤，如购买数量为大于0的整数，产品单价不能为负数，并且对支付界面做一些异常处理等5.10 恶意注册用户风险名称：恶意注册用户风险级别：中风险风险描述：在用户注册过程中通过截取数据包，重放注册数据包绕过验证码进行批量注册测试过程：1、用户注册功能，无验证码，抓取注册的数据包，重复发送，批量注册大量账号2、用户注册功能，验证码可绕过或爆破，重复发送注册的数据包，批量注册大量账号风险分析：后台未校验验证码的使用次数和时间，只校验了其准确性，可被利用进行多次注册加固建议：后台校验验证码的使用测试和时间 5.11 注册覆盖风险名称：注册覆盖风险级别：高风险风险描述：在注册时，系统未对新注册的账户名进行校验是否已存在，导致直接覆盖了已存在用户的注册用户名和密码，可以登陆该用户进行操作。测试过程：1、注册时，输入已存在用户的手机号或用户名等登陆名，直接注册，成功后登陆该账号，可以获取到该账号所有的信息以及进行相关权限的操作风险分析：利用该漏洞，可以直接覆盖所有账号的密码，登陆任意已存在账号，并进行账号对应权限的操作加固建议：注册时校验用户名或手机号等是否已存在 5.12 手机号/用户名爆破风险名称：手机号/用户名爆破风险级别：低风险风险描述：用户注册，登陆，忘记密码功能，用户名或手机号的单独校验存在与否，且无验证码，或验证码可绕过，导致可以批量爆破获取大量已存在的用户名或手机号测试过程：1、在注册，登陆，忘记密码功能，抓取数据包，发现用户名或手机号单独校验是否存在，且该数据包可以重复发送，利用burpsuite进行批量爆破操作风险分析：利用该漏洞，可以获取到系统大量的已存在用户名或手机号，并用于进一步渗透。加固建议：加入验证码防止暴力破解，或限制数据包访问频率，或模糊化反馈信息 5.13 验证码重放攻击风险名称：验证码重放攻击风险级别：中风险风险描述：在提交信息的时候，输入的验证码通过抓包进行重放，重放时验证码没有进行重置更新，造成重复信息提交，可能引起重放攻击测试过程：1、在存在验证码的功能点，如登陆，直接截取登陆校验数据包，验证码没有自动更新，可以重复提交校验的数据包，爆破用户名密码风险分析：可能遭到恶意攻击者进行重复留言，恶意注册等重放攻击加固建议：增加验证码时效性，限制验证码不可复用，且自动更新 5.14 手机验证码暴力破解风险名称：手机验证码爆力破解风险级别：高风险风险描述：通过暴力破解手机验证码，猜解正确的验证码的数值从而进行验证测试过程：1、直接利用burpsuite抓取校验手机验证码的数据包，对验证码进行暴力破解风险分析：弱验证码可导致恶意攻击者进行暴力猜解，导致进行一些修改密码，修改信息的一些恶意操作加固建议：增强验证码混淆度，为数字字母等，增加验证码时效机制 5.15 验证码绕过风险名称：验证码绕过风险级别：高风险风险描述：服务端没有对手机/邮箱验证码进行二次校验，导致当攻击者可以利用修改返回值的方式直接跳转到设置新密码页面，然后重置用户的密码测试过程：1、输入任意的手机/邮箱验证码，截取返回数据包，修改返回数据包中的标识值（ok,scuess,true等），直接进入下一步设置新密码风险分析：通过修改返回数据包，可绕过短信/邮箱验证码直接重置该账号密码加固建议：服务端对手机/邮箱的验证码进行二次校验 5.16 短信验证码泄露风险名称：短信验证码劫泄露风险级别：高风险风险描述：在进行短信功能验证模块时，用户通过抓取数据包得知验证码的数值，从而进行验证绕过测试过程：1、发送短信验证码时，利用burpsuite直接截取返回数据包，发现返回数据包中存在发送的验证码明文，直接使用该验证码进入下一步风险分析：通过抓取的数据包得知验证码的数值进行验证，绕过了短信验证功能模块加固建议：短信验证码禁止发送给客户端，而是由服务端直接发送给手机 5.17 验证码无绑定风险名称：验证码无绑定风险级别：高风险风险描述：验证码没有与唯一的手机号/邮箱绑定校验，导致可以使用其它手机/邮箱的验证码成功验证，从而绕过验证机制测试过程：1、输入任意手机号/邮箱发送验证码，再输入自己的手机号/邮箱发送验证码，利用自己的手机/邮箱收到的验证码，与第一次发送验证码的手机号/邮箱进行校验，成功绕过验证进入下一步风险分析：利用该漏洞，可以绕过手机/邮箱验证码的校验机制，直接进入下一步进行操作加固建议：验证码与手机/邮箱进行绑定校验 5.18 验证码不唯一风险名称：验证码不唯一风险级别：高风险风险描述：手机/邮箱验证码可以同时存在多个，导致可以同时发送大量验证码，然后轻易的就可以利用爆破得到其中一个正确验证码并使用，从而绕过验证码校验测试过程：1、同时给同一手机/邮箱发送两个验证码，然后使用第一次发送的验证码进行校验，发现可以校验成功，则可以同时发送多个验证码给同一手机/邮箱，只要爆破出其中一个就可以进入下一步，大大降低了爆破难度。风险分析：利用该漏洞，攻击者可以轻易的就爆破得到正确的手机/邮箱验证码，绕过手机/邮箱校验从而进入下一步操作加固建议：限制同一手机/邮箱，在同一时间只能拥有一个正确的验证码 5.19 短信轰炸风险名称：短信轰炸风险级别：中风险风险描述：短信验证功能可向绑定手机发送任意次数验证码测试过程：1、抓取发送手机验证码的数据包，利用burpsuite大量重复发送该数据包成功风险分析：该漏洞可向绑定手机发送验证信息，可以用自写脚本遍历银行卡号发送任意数量短信，影响用户体验以及造成短信服务过度消费加固建议：发送功能处加入验证码限制，或限制短信发送频次 5.20 邮件轰炸风险名称：邮件轰炸风险级别：中风险风险描述：邮件验证功能可向绑定手机发送任意次数验证码测试过程：1、抓取发送邮箱验证码的数据包，利用burpsuite大量重复发送该数据包成功风险分析：该漏洞可向绑定邮箱发送验证信息，可以用自写脚本遍历银行卡号发送任意数量邮件验证码，影响用户体验以及造成邮件服务过度消费加固建议：发送功能处加入验证码限制，或限制邮件发送频次 5.21 密保答案泄露风险名称：密保答案泄露风险级别：高风险风险描述：密保答案直接在返回数据包中泄露，导致可以直接使用泄露的答案绕过密保校验，进入下一步设置新密码测试过程：1、忘记密码功能，使用密保的方式重置密码，获取密保问题的时候，抓取数据包，发现返回数据包中同时存在密保问题和答案，直接使用该问题和答案，成功进入下一步设置新密码风险分析：利用该漏洞，攻击者可以修改任意有密保的用户密码，从而登陆系统获取相应权限加固建议：密保答案禁止返回给客户端 5.22 不安全的Sessionid机制风险名称：不安全的Sessionid机制风险级别：高风险风险描述：用于登陆用户身份识别判断的SessionId保存于客户端或url中，且只要客户端存在已分配未过期的SessionId值时，登陆后台系统不会重新分配SessionId，而是直接使用已分配的SessionId作为登陆后的凭证，导致可以钓鱼或中间人攻击获取和覆盖用户sessionid，得到用户账号权限测试过程：1、登陆系统，发现sessionid直接存在于url当中2、在cookie中设置seesionid值，并登陆系统，发现系统直接使用该sessionid值作为登录后的身份凭证，未重新更新分配sessionid风险分析：利用该漏洞，攻击者可以对后台用户进行钓鱼，中间人等多种手段的攻击，且一旦成功则获取到该用户所有的操作权限。加固建议：1、 禁止以客户端传递的sessionid作为登陆之后的身份凭证，应以每次登陆，服务端新生成的凭证为准2、 禁止未登陆便分配sessionid给客户端，且作为登陆之后的用户凭证3、 sessionid禁止保存于url和客户端中 六、敏感信息保护类6.1 数据库错误信息风险名称：数据库错误信息风险级别：低风险风险描述：在发生输入错误时，数据库报错提示过于详细，可能导致恶意攻击者的进一步利用测试过程：漏洞证明： 正常页面回显。 报错页面回显。风险分析：可能导致数据库系统敏感信息的泄露或者被进行更深一步的攻击利用加固建议：屏蔽或者隐藏记录此类信息， 6.2 敏感信息提示泄露风险名称：敏感信息提示泄露风险级别：中风险风险描述：精准的提示信息讲给恶意攻击者带来明确的攻击信息测试过程：测试过程：： 用户猜解返回： 风险分析：恶意攻击者可根据提示的信息，判断系统是否存在该用户，造成信息泄漏或者对齐有效的攻击加固建议：模糊化提示信息，如提示“用户名或密码不正确”，“用户名或密码错误”等 6.3 内部IP泄露风险名称：内部IP泄露风险级别：低风险风险描述：应用程序代码中可能包含一些注释语句或测试语句，组织机构的内部IP可能出现在这些不被执行的语句中测试过程：漏洞证明：发送不存在的脚本页面均会返回本地内网真实IP 服务器配置错误回显，处理不当造成泄露内网真实IP。风险分析：此信息在渗透测试中属于辅助信息，攻击者通过此信息可对内部网络结构进行大致的了解，以便渗透到内网时进行利用加固建议：删除相关注释语句、测试语句，或者使用域名替换真实IP 6.4 报错敏感信息泄露风险名称：报错敏感信息泄露风险级别：低风险风险描述：攻击者可通过此风险，获取系统敏感信息，如：数据库信息、服务器信息、源代码查询语句结构等测试过程： 邮箱尝试注入 返回sql数据库报错页面。风险分析：攻击者可先根据系统提示精心构造错误，使服务器爆出更明确的敏感信息加固建议：建议只输出基本信息或相对能排错的信息，对于敏感信息（如：数据库查询语句、服务器信息等）不要泄漏 6.5 数据库明文存储风险名称：数据库明文存储风险级别：中风险风险描述：数据库使用明文传输，如果存在漏洞，数据库的敏感信息将直接会泄露测试过程：漏洞证明： 加密密码采用MD5，可破解。 破解成功。风险分析：采用明文存储的敏感信息，存在漏洞的系统中，可悲攻击者直接获取并利用加固建议：建议使用MD5+Salt加密存储敏感信息 6.6 注释敏感信息泄露风险名称：注释敏感信息泄露风险级别：低风险风险描述：攻击者可能会收集有关 Web 应用程序的敏感信息，如用户名、密码、机器名或敏感文件位置测试过程： 开发商处理页面脚本，修改页面信息处理不当。打开脚本Url：http://www.wanhu.com.cn/wangzhankaifa/ezsite 得知厦门银行门户网站实在这里购买系统并实施搭建web服务器搭建。 风险分析：攻击者可能会收集有关Web程序的敏感路径等信息，收集到相关敏感信息能辅助进一步的渗透加固建议： 请勿在 HTML 注释中遗留任何重要信息（如文件名或文件路径） 从生产站点注释中除去以前（或未来）站点链接的跟踪信息 避免在 HTML 注释中放置敏感信息 确保 HTML 注释不包括源代码片段 确保程序员没有遗留重要信息 6.7 文件内泄露敏感信息风险名称：文件内泄露敏感信息风险级别：低风险风险描述：在HTML、JS、CSS文件中包含敏感信息，导致敏感信息被恶意攻击者收集利用操作测试过程： 泄漏真实路径信息。风险分析：攻击者可能会收集有关Web程序的敏感路径等信息，收集到相关敏感信息能辅助进一步的渗透加固建议：1.请勿在 HTML 注释中遗留任何重要信息（如文件名或文件路径）2.请勿在 JS文件中遗留任何重要信息（如文件名或文件路径）3.请勿在 CSS文件中遗留任何重要信息（如文件名或文件路径） 6.8 JBOSS管理敏感信息泄露风险名称：JBOSS管理敏感信息泄露风险级别：低风险风险描述：JBOSS服务器敏感信息泄露，使攻击者可更快速了解到服务器部署内容，攻击者可根据对应版本的漏洞进行进一步渗透测试过程：风险分析：攻击者可得到JBOSS服务器的敏感信息，从而构造更深一层的攻击加固建议：在服务器端配置禁止互联网用户访问该页面 6.9 站点的绝对路径泄露风险名称：站点的绝对路径泄露风险级别：中风险风险描述：由于未对服务器返回的出错信息进行良好的处理，一旦用户提交了异常的数据或指令后，服务器将会返回异常的出错信息，通常会包含敏感的配置内容，如WEB绝对路径、数据库路径等测试过程： 风险分析：此信息在渗透测试中属于辅助性的关键信息，获取绝对路径后攻击者即可了解WEB站点的存放目录，随后可以配合先前获取的权限进行Webshll等恶意文件的上传，通过此信息，攻击者可以很快的定位到上传后文件的访问路径，进而进行下一步攻击加固建议：建立错误信息预控制机制，在脚本中加入出错后的处理机制，一旦访问者提交了异常数据，立即返回预定制的出错页面，或者直接返回首页 6.10 Robots包含敏感信息风险名称：Robots包含敏感信息风险级别：低风险风险描述：在网站robots.txt文件中包含敏感信息，可能造成信息泄露测试过程： 风险分析：Robots.txt文件包含敏感的路径信息，系统信息，可能被恶意攻击者利用进行更深一层的攻击加固建议：严格规范robots.txt内数据信息，删除无用的数据 6.11 敏感信息泄露风险名称：敏感信息泄露风险级别：高风险风险描述：发现临时存储的敏感文件，可任意查看敏感文件内容，包括数据库的配置信息测试过程：风险分析：服务器配置信息或数据库配置信息非法获取，导致服务器可能被入侵加固建议：删除服务器无用的、临时的或者备份的文件 6.12 WSDL接口信息泄漏风险名称：WSDL接口信息泄露风险级别：中风险风险描述：WSDL接口信息泄露，通过泄露可获取系统WSDL信息测试过程：http://gpms.foton.com.cn/uapws/service/nc.itf.ses.inittool.PortalSESInitToolService?wsdl 风险分析：攻击者可通过问问WSDL接口获取系统支持的方法信息并构造相关数据包实现访问系统接口的功能，严重时可导致未授权获取系统信息加固建议：1、 限制对WSDL接口的访问限制1、 限制对Services目录的访问 6.13帮助页面疑似泄露内部功能风险名称：帮助页面疑似泄露内部功能风险级别：低风险风险描述：界面存在帮助页面，可能泄露登陆后功能，有可能被恶意攻击者进行更深一层的攻击测试过程：风险分析：攻击者可利用该页面了解内部功能，可用来制定详细攻击方案加固建议：修改页面，将该功能隐藏，或设计为登录后显示 6.14 配置信息文件泄露风险名称：配置信息文件泄漏风险级别：高风险风险描述：在目录中找到了备份/临时的配置文件。现已证实，此文件包含 Web 应用程序部署描述符 (通常存储在文件中 /WEB-INF/web.xml)。当 web 服务器备份时，开发者创建这种类型的文件进行备份他们的工作或由管理员创建测试过程： System.web信息风险分析：这些配置文件将泄露敏感信息、目录等信息，攻击者可根据收集泄露的提示信息深一步制定攻击方案加固建议：从 web 服务器中删除该文件，建议在组织中实施安全策略不允许从Web访问的目录创建临时备份文件 6.15 Cookie内包含敏感信息风险名称：Cookie内包含敏感信息风险级别：低风险风险描述：在Cookie内部包含敏感信息，指定字段信息，如用户名等测试过程：Cookie泄漏用户名。风险分析：攻击者可根据收集泄露的提示信息深一步制定攻击方案加固建议：加密Cookie字段，加密相关敏感信息字段 6.16 SVN/GIT等源代码泄露风险名称：SVN/GIT等源代码泄露风险级别：高风险风险描述：造成SVN源代码漏洞的主要原因是管理员操作不规范。在使用SVN管理本地代码过程中，会自动生成一个名为.svn的隐藏文件夹，其中包含重要的源代码信息。当前大量开发人员使用GIT进行版本控制，对站点自动部署。如果配置不当，可能会将.git文件夹直接部署到线上环境，这就引起了GIT泄露漏洞测试过程：风险分析：恶意攻击者可以利用该漏洞下载网站的源代码，再从源代码里获得数据库的连接密码；或者通过源代码分析出新的系统漏洞，从而进一步入侵系统加固建议：删除指定SVN生成的各种文件，如“/.svn/entries”，删除指定GIT生成的各种文件，如”/ .git/index”等 七、配置管理类7.1 目录遍历风险名称：目录遍历风险级别：中风险风险描述：路径遍历漏洞允许恶意攻击者突破Web应用程序的安全控制，直接访问攻击者想要的敏感数据 ，包括配置文件、日志、源代码等，配合其它漏洞的综合利用，攻击者可以轻易的获取更高的权限。测试过程：利用目录枚举工具例如：dirbuster、御剑后台扫描等当枚举结果存在upload、images等敏感文件目录可以访问时，证明开启了目录遍历。 风险分析：该漏洞可能导致攻击者可以使用浏览Web站点的所以目录及文件，甚至可以越权浏览到系统文件等重要文件数据加固建议：设置好对应文件的访问权限，安全Domino URL的OpenFileResource等危险命令 7.2 服务端允许列目录风险风险名称：服务端允许列目录风险风险级别：高风险风险描述：目录未做限制，未授权用户可非法访问该目录下的文件测试过程：利用目录枚举工具例如：dirbuster、御剑后台扫描等当枚举结果存在upload、images等敏感文件目录可以访问时，证明开启了目录遍历。 风险分析：Web 服务器或应用程序服务器是以不安全的方式配置的加固建议：确保该目录不包含敏感信息，或者您从网络服务器配置中限制目录列表的访问 7.3 发现隐藏目录风险名称：发现隐藏目录风险级别：低风险风险描述：提示信息可以判断系统是否存在此目录或功能模块测试过程：根据输入不同的目录名，根据响应包不同的响应结果可以发现隐藏的目录。不存在的目录响应： 存在的目录响应： 风险分析：该漏洞可能导致攻击者可以使用穷举目录名或常用目录名，并通过提示信息来判断系统是否存在此目录或功能模块加固建议：自定义错误页面，当服务器发生403错误时，跳至默认的错误页面。防止暴力猜解 7.4 存在备份文件风险名称：存在备份文件风险级别：中风险风险描述：多余的备份文件可能会泄露重要的信息测试过程：利用目录枚举工具例如：dirbuster、御剑后台扫描等当枚举结果存在bak、rar、sql等敏感文件可以访问证明存在敏感文件。 风险分析：检测到敏感的备份文件、临时文件，可能导致旧的程序漏洞被利用加固建议：请勿将文件的备份文件放置在Web服务器的根目录下，当站点更新时，请将文件删除或者移动到虚拟目录以外的目录，确保在虚拟目录下只有实际在使用的文件 7.5 存在测试界面风险名称：存在测试界面风险级别：低风险风险描述：有时开发者会忘记从生产环境中除去某些调试或测试页面。这些页面有可能包括 Web 用户所不应访问的敏感信息。它们也可能易受到攻击，且或有助于攻击者获取服务器的相关信息，以帮助进行攻击测试过程：通过目录扫描软件，会发现一些test.txt等测试存留文件 风险分析：攻击者可能会利用测试界面对网站进行攻击从而导致网站的资源受到窃取或者破坏加固建议：删除网站中的测试界面数据以及临时文件 7.6 存在WEB默认首页风险名称：存在Web默认界面风险级别：低风险风险描述：未配置首页信息，导致Apache存在默认首页，可能是恶意攻击者进行近一步攻击测试过程：通过目录扫描发现存在的默认首页例如一个nginx安装成功的默认首页： 风险分析：攻击者可以通过此风险来获取Web中间件级版本信息，根据已有漏洞进行攻击加固建议：建议删除默认首页，配置自定义首页信息 7.7 服务器端口开放过多风险名称：服务器端口开放过多风险级别：中风险风险描述：该服务器开放过多的端口，导致一旦出现新的系统漏洞或者蠕虫病毒，可能导致服务器被入侵，存在安全隐患测试过程：通常互联网系统应只开放80 http和443 https两种端口互联网最有可能开放的10个TCP端口。80 (http)23 (telnet)22 (ssh)443 (https)3389 (ms-term-serv)445 (microsoft-ds)139 (netbios-ssn)21 (ftp)135 (msrpc)25 (smtp)最有可能开放的10个UDP端口。137 (netbios-ns)161 (snmp)1434 (ms-sql-m)123 (ntp)138 (netbios-dgm)445 (microsoft-ds)135 (msrpc)67 (dhcps)139 (netbios-ssn)53 (domain)风险分析：服务器都开放很多端口，导致一旦出现新的系统漏洞或者蠕虫病毒，可能会导致服务器被入侵，有安全隐患加固建议：架设硬件防火墙，将端口隐藏在内网，或者对服务器进行加固，将一些不需要使用的端口关闭 7.8 HP Management服务器系统管理口开放风险名称：HP Management服务器系统管理口开放风险级别：中风险风险描述：HP Management提供对服务器的远程系统管理支持，管理员可以通过此接口对服务器进行系统状态查看，远程控制等功能测试过程：通过端口扫描发现开放的管理端口 风险分析：此接口的登录接口为HTTPS，通过Web进行访问，开放管理接口的同时将面临登录口令被暴力探测的风险，若猜测成功，攻击者将拥有该主机的控制权加固建议：评估是否有必要开放HP Management远程管理接口，建议将端口进行关闭 7.9 管理控制台对外开放风险名称：管理控制台对外开放风险级别：中风险风险描述：服务器管理控制台界面开放，可能容易被猜解到，导致攻击者可以暴力破解帐号密码或利用进行下一步攻击测试过程：例如tomcat管理后台地址是8080端口 风险分析：恶意攻击者可对网站后台管理界面进行暴力破解等一系列攻击，可能对导致网站数据泄露等危害加固建议： 管理后台的服务绑定到内网IP上，禁止开放在外网。 如果该管理后台必须提供给外网访问，则未登录页面不要显示过多内容，防止敏感信息泄漏，登录帐号需经过认证，且密码设置规则尽量复杂，增加验证码，以防止暴力破解 7.10 WebLogic管理界面开放风险名称：WebLogic管理界面开放风险级别：高风险风险描述：WebLogic服务器默认安装后，为管理员提供了Web方式的管理入口，如果没有限制，任何人都可以访问到管理页面，可能导致管理员口令被暴力破解测试过程：通过端口扫描通常管理界面开放在7001端口 风险分析：在公网开放WebLigic管理接口可能遭受恶意攻击者的暴力口令猜测攻击；WebLigic后台的管理权限较大，可直接对操作系统进行修改、执行命令等操作，因此一旦管理入口被突破，将给系统本身带来较大危害，并影响其他服务器安全加固建议：1、更改WebLogic默认管理口令（weblogic/weblogic），建议设置复杂的不易猜测的目录名。同时建议帐号不要使用通用的admin、root等。给猜测带来更大的复杂性。使用强壮的口令策略2、建议将业务系统访问端口与WebLogic管理接口进行分离3、对WebLogic管理接口配置访问控制，使外网普通用户无法直接访问。或对外关闭管理接口 7.11 启用OPTIONS方法风险名称：启用OPTIONS方法风险级别：低风险风险描述：WEB服务器配置允许一个（或多个）HTTP方法，这些方法可能表示在服务器上启用了WebDAV，可能允许未授权的用户对其进行利用测试过程：利用HTTP的OPTIONS请求访问系统，若系统返回HTTP请求方法信息证明OPTIONS方法开启。 风险分析：攻击者可能会在WEB服务器上载、修改或删除WEB页面、脚本和文件加固建议：如果服务器不需要支持WebDAV，请务必禁用它，或禁止不必要的HTTP方法 7.12 不安全的HTTP请求方法风险名称：不安全的HTTP请求方法风险级别：中风险风险描述：Web服务器开启了不必要的方法，如DELETE，PUT等方法，可能导致恶意用户破坏服务器资源测试过程：利用HTTP的OPTIONS请求访问系统，通过返回的内容知道开启的方法。 风险分析：可能导致信息泄漏，跨站脚本漏洞，文件上传等风险加固建议：如非必要，仅启用GET和POST方法 7.13 启用ASP.NET调试风险名称：启用ASP.NET调试风险级别：低风险风险描述：可能会收集有关 Web 应用程序的敏感信息，如用户名、密码、或敏感文件位置测试过程：利用HTTP的DEBUGS请求访问系统，通过返回的内容收集敏感的信息。 风险分析：Microsoft ASP.NET 很容易受到信息泄露攻击。攻击者可以发送一个通知是否支持调试支持的恶意请求。攻击者可以利用 DEBUG 动词来发送恶意请求加固建议：在 ASP.NET 中禁用调试，编辑 web.config 文件，使它含有下列属性： 7.14 启用TRACE方法风险名称：启用TRACE方法风险级别：低风险风险描述：在此Web服务器上启用HTTP TRACE方法。在Web浏览器中存在其他跨域漏洞的情况下，可以从支持HTTP TRACE方法的任何域读取敏感的标头信息测试过程：利用trace方法访问系统 Trace被禁用 风险分析：攻击者可以通过TRACE方法返回的信息了解到网站前端的某些信息也可以进行XSS攻击，盗取会话Cookie、获取账户、模拟其他用户身份，甚至可篡改网页，即使网站对关键页面启用了HttpOnly头标记，禁止脚本读取Cookie信息时，通过使用TRACE方法，攻击者可以绕过这个限制，读取Cookie信息加固建议：禁用 Web 服务器的TRACE方法 7.15 Slow HTTP Dos 慢速拒绝服务攻击风险名称：Slow HTTP Dos 慢速拒绝服务攻击风险级别：中风险风险描述：存在HTTP慢速拒绝服务攻击风险（Slow HTTP Denial of Service Attack），可造成服务器被拒绝服务攻击测试过程：利用慢攻击工具slowhttptest对可能存在的风险的服务器发起测试攻击 风险分析：Web服务器很容易受到慢HTTP DOS（拒绝服务）攻击，一个HTTP请求是不完整的，或者转移率很低，服务器把资源忙等待其余的数据。如果服务器保存资源太多忙，这创造了一个拒绝服务加固建议：修改中间件配置，设置会话超时时间，设置最少入站传输速率 7.16 缺少“Content-Security-Policy”头风险名称：缺少“Content-Security-Policy”头风险级别：低风险风险描述：“Content-Security-Policy”头主要是定义页面可以加载哪些资源，减少XSS的风险，缺少则可能会被恶意攻击者加载恶意信息，对网站造成损失测试过程：查看response头信息：若配置了在头信息中会有 Content-Security-Policy信息 风险分析：缺少“Content-Security-Policy”头可能会让恶意用户在页面上加载一个恶意的信息，以导致用户信息，网站信息泄露的风险加固建议：启用“Content-Security-Policy”头 7.17 缺少“X-XSS-Protection”头风险名称：缺少“X-XSS-Protection”头风险级别：低风险风险描述：虽说主流浏览器存在XSS的保护机制，但是效果不太完美，关闭此选项可能会造成XSS攻击的风险测试过程：查看response头信息：若配置了在头信息中会有X-XSS-Protection信息 风险分析：缺少“X-XSS-Protection”头，可能会加大攻击者利用XSS对网站进行攻击，可能会导致不必要的损失加固建议：启用“X-XSS-Protection”头 7.18 缺少“X-Content-Type-Options”头风险名称：缺少“X-Content-Type-Options”头风险级别：低风险风险描述：互联网上的资源有各种类型，通常浏览器会根据响应头的Content-Type字段来分辨它们的类型，然而，有些资源的Content-Type是错的或者未定义。这时，某些浏览器会启用MIME-sniffing来猜测该资源的类型，解析内容并执行测试过程：查看response头信息：若配置了在头信息中会有X-Content-Type-Options信息 风险分析：缺少“X-Content-Type-Options”头可能会造成恶意用户上传恶意文件，危害网站的安全加固建议：启用“X-Content-Type-Options”头 7.19 X-Frame-Options未配置风险名称：X-Frame-Options未配置风险级别：低风险风险描述：HTTP 响应头信息中的X-Frame-Options，可以指示浏览器是否应该加载一个 iframe 中的页面。如果服务器响应头信息中没有X-Frame-Options，则该网站存在ClickJacking攻击风险测试过程：查看response头信息： 风险分析：如果服务器响应头信息中没有X-Frame-Options，则该网站存在ClickJacking攻击风险，网站可以通过设置 X-Frame-Options 阻止站点内的页面被其他页面嵌入从而防止点击劫持加固建议：修改web服务器配置，添加X-Frame-Options响应头。赋值有如下三种：1、DENY：不能被嵌入到任何iframe或者frame中。2、SAMEORIGIN:页面只能被本站页面嵌入到iframe或者frame中。3、ALLOW-FROM url：只能被嵌入到指定域名的框架中。例如：apache可配置http.conf如下： Header always append X-Frame-Options “DENY” 7.20 启用自动完成的密码类型输入风险名称：启用自动完成的密码类型输入风险级别：低风险风险描述：当一个新的用户名和密码输入表单式，并提交表单时，浏览器会询问如果密码是否保存。此后显示表单时，用户名和密码将自动填充或完成的输入用户名。具有本地访问权限的攻击者可以获取从浏览器缓存中的明文密码测试过程：登陆失败后，系统返回登陆界面时，账号密码已经自动填充。风险分析：登录框未限制历史信息隐藏，可能会造成信息泄露的风险加固建议：密码自动完成填充应在敏感的应用中被禁用。 要禁用自动完成功能，您可以使用类似代码：&lt;INPUT TYPE=”密码”AUTOCOMPLETE=”关闭” &amp;gt 7.21 Banner信息泄露风险名称：Banner信息泄露风险级别：低风险风险描述：服务器Response信息中泄露了服务器组件等信息测试过程：查看response信息 风险分析：若攻击者获知服务器组件等信息及版本信息，会使下一步的攻击和漏洞测试提供便利加固建议：建议屏蔽或简单显示此类信息 7.22 长密码拒绝服务攻击风险名称：长密码拒绝服务攻击风险级别：中风险风险描述：未对密码输入长度做有效限制，存在密码长度过长，服务端处理消耗大量资源，可造成服务器被拒绝服务攻击测试过程：在密码栏输入超长密码字符并提交，提交后服务器无法访问。风险分析：当攻击者输入密码长度达到服务端处理极限，或者连续发送长密码请求，导致服务端处理时资源耗尽，产生拒绝服务加固建议：限制有效密码输入长度 7.23 编辑器漏洞风险名称：编辑器漏洞风险级别：高风险风险描述：Ewebeditor，fckeditor，kindeditor，southidceditor，cfeditor等很多浏览器本身包含漏洞，可导致恶意攻击者进行目录遍历，webshell上传等，从而窃取服务器信息或者获取目标服务器权限测试过程：利用用目录枚举工具例如：dirbuster、御剑后台扫描等工具确认编辑器地址枚举后可尝试历遍、上传等操作。风险分析：可通过编辑器漏洞窃取服务器敏感信息或者获取到服务器权限加固建议：1.更新编辑器至最新版本2.修改编辑器默认管理后台访问权限3.修改编辑器默认管理界面，口令4.更多编辑器漏洞介绍请查看以下网址：编辑器漏洞手册 - 血梦博客 - 专注于网络安全|黑客学习|渗透测试|代码审计|国内最专业的黑客技术博客 八、框架漏洞8.1 Struts2代码执行漏洞风险名称：Struts2代码执行漏洞风险级别：高风险风险描述：Struts2是一个基于MVC设计模式的Web应用框架，当Apache Struts2开了其动态方法Dynamic Method Invocation,会允许远程的攻击者使用method:前缀执行任意构造的链式ONGL，影响版本如下：&lt;2.3.20.2，2.3.24.0-2.3.24.2，2.3.28.0-2.3.28.1&gt;测试过程：使用专用POC检测工具进行测试扫描。不同版本的漏洞位置不一样，需要自行下载测试工具。风险分析：攻击者可利用该漏洞执行任意命令如写入后门、上传木马等进而完全控制服务器，盗取网站数据加固建议：升级Struts2到最新版本，下载地址http://struts.apache.org/ 8.2 jBoss远程执行漏洞风险名称：jBoss远程执行漏洞风险级别：高风险风险描述：jBoss默认配置会有一个后台漏洞，漏洞函数为addURL()，会远程下载一个war压缩包并解压访问后台，通过写入war压缩文件webshell的url地址，从而获得webshell获得服务器的权限测试过程：使用专用POC检测工具进行测试扫描。不同版本的漏洞位置不一样，需要自行下载测试工具。风险分析：远程执行下在一个包含恶意文件的war文件，从而获得服务器权限加固建议：1.在 ${jboss.server.home.dir}/deploy下面找到jmx-console.war目录编辑WEB-INF/web.xml文件 去掉 security-constraint 块的注释，使其起作用2.编辑WEB-INF/jboss-web.xml去掉 security-domain 块的注释 ，security-domain值的映射文件为 login-config.xml3.编辑WEB-INF/classes/jmx-console-users.properties添加用户名密码 8.3 Thinkphp命令执行风险名称：ThinkPHP命令执行漏洞风险级别：高风险风险描述：ThinkPHP是国内使用比较广泛的一款老牌PHPMVC框架，Think主要问题在于Dispatcher.class.php文件，文件中把pathinfo作为restful类型URL进行解析的，主要作用是把pathinfo中的数据解析并合并到$_GET数组中。在用正则解析pathinfo的时候$var[‘\\1’]=\\2” 又是双引号，而双引号中的php变量语法能够被解析，所以造成了任意代码执行漏洞。测试过程：使用专用POC检测工具进行测试扫描。不同版本的漏洞位置不一样，需要自行下载测试工具。风险分析：攻击者可利用该漏洞执行任意命令如写入后门、上传木马等进而完全控制服务器，盗取网站数据加固建议： 升级ThinkPHP到最新版本。 框架下载 - ThinkPHP框架 将$var[‘\\1’]=\\2” 双引号改写成单引号 8.4 Spring MVC 命令执行漏洞风险名称：Spring MVC 命令执行漏洞（CVE-2010-1622）风险级别：高风险风险描述：由于Spring框架允许使用客户端所提供的数据来更新对象，而这以机制允许攻击者修改class.classloader加载对象的类加载器属性，这可能导致执行任意命令测试过程：使用专用POC检测工具进行测试扫描。不同版本的漏洞位置不一样，需要自行下载测试工具。风险分析：这个漏洞将直接危害到使用Spring MVC框架的网站加固建议：升级 Spring 到最新版本。 http://spring.io/ 8.5 Django命令执行漏洞风险名称：Django命令执行漏洞风险级别：高风险风险描述：Django0.95版本存在命令执行漏洞，攻击者就可以构造出包含有恶意代码的序列化字串，将其传递给服务器，服务器在解析即反序列化会话的同时，就有可能导致任意命令执行测试过程：使用专用POC检测工具进行测试扫描。不同版本的漏洞位置不一样，需要自行下载测试工具。风险分析：服务器在解析即反序列化会话时，有可能导致任意命令执行加固建议：升级Django 到最新版本。Download Django | Django 8.6 Java反序列化任意命令执行漏洞风险名称：Java反序列化任意命令执行漏洞风险级别：高风险风险描述：Weblogic Java反序列化可导致任意命令执行测试过程：使用专用POC检测工具进行测试扫描。不同版本的漏洞位置不一样，需要自行下载测试工具。不同版本的漏洞位置不一样，需要自行下载测试工具。风险分析：攻击者利用此漏洞可直接威胁服务器安全，高级别的攻击，会造成严重影响加固建议：建议尽快升级Weblogic版本，下载最新补丁，及时更新 九、服务漏洞9.1 IIS写文件漏洞风险名称：IIS写文件漏洞风险级别：高风险风险描述：恶意攻击者可以向该目录写入文件，通过HTTP协议的PUT方法，向该目录写入文件或以指定的内容覆盖当前目录下的现有文件测试过程：第一步，通过OPTIONS探测服务器所支持的HTTP方法，（这里决定后面能不能操作）第二步，通过PUT方法向服务器上传脚本文件第三步，通过Move或Copy方法改名风险分析：可能会被上传带有后门的恶意程序，从而获取到对服务器的控制权，从而造成数据丢失或者系统损坏等加固建议：禁用WebDAV功能，或者关闭不安全的HTTP方法 9.2 IIS解析漏洞风险名称：IIS解析漏洞风险级别：高风险风险描述：当建立*.asa、*.asp格式的文件夹时，其目录下的任意文件都将被IIS当作ASP文件来解析。2.当文件为*.asp;1.jpg时，IIS6.0同样会以ASP脚本来执行测试过程：Iis、apach、php分别有不同的测试方法，详情可参考： https://blog.csdn.net/hitwangpeng/article/details/46913957 险分析 IIS6.0解析文件时，存在两个解析漏洞，攻击者可利用解析漏洞获取webshell加固建议：升级IIS版本，对上传进行过滤 9.3 Apache解析漏洞风险名称：Apache解析漏洞风险级别：高风险风险描述：Apache在解析文件时当遇到无法识别的扩展名时，将会从后向前解析，直到遇到识别的扩展名为止测试过程：Iis、apach、php分别有不同的测试方法，详情可参考：当apache 容器碰到不认识的扩展名时，将会从后面向前解析，直到碰到认识的扩展名为止，如果都不认识，则会暴露其源代码。这种方法可以绕过基于黑名单的检查。 Apache认识的扩展名保存在安装目录下”/conf/mime.types”文件中。风险分析：如果开发人员在控制上传文件是，判断文件名是否是PHP、ASP、ASPX、ASA、CER、ASPX等脚本扩展名，如果是，则不允许上传，这是攻击者就有可能上传1.php.rar等扩展名来绕过程序检测，配合解析漏洞，或得webshell加固建议： 版本升级 使用白盒测试对上传做控制 9.4 CGI路径解析漏洞风险名称：CGI路径解析漏洞风险级别：高风险风险描述：在使用Nginx作为web server时，一般使用fastcgi的方式调用脚本解释器，当访问一个不存在的文件时，会解析上级路径文件测试过程：在PHP的配置文件中有一个关键的选项cgi.fix_pathinfo在本机中位于C:\\wamp\\bin\\php\\php5.3.10\\php.ini，默认是开启的，当URL中有不存在的文件，PHP就会向前递归解析风险分析：通过上传一张包含恶意代码的文件，使用fastcgi方式调用脚本编辑器，构造攻击，从而导致包含恶意代码的文件执行加固建议：将配置文件中的cgi.fix_pathinfo设置为0 EOF## 一、认证测试类 1.1 敏感数据明文传输风险名称：敏感数据明文传输风险级别：中风险风险描述：恶意攻击者可能通过嗅探等攻击方式截取用户的登录信息测试过程：浏览网站的过程中可使用抓包工具抓取请求包，查看请求和返回的信息中是否含有用户的敏感信息，如用户名、密码及个人信息（姓名、身份证号、手机号及住址等等）风险分析：恶意攻击者如果对网站所在的网段进行嗅探，则当用户登录的时候该攻击者就可以获取到用户的用户名和密码等信息加固建议：进行数据传输时，对用户名和密码信息进行先加密、再发送的模式，可以有效的规避登录凭证被攻击者截取利用1.2 后台存在默认密码风险名称：后台存在默认密码风险级别：高风险风险描述：网站存在默认的后台管理密码，恶意攻击者凭借默认密码随意登入管理系统测试过程：使用形如账号为admin，密码为123456，尝试登录网站风险分析：恶意攻击者登入系统后，可进行增删改查操作，从而导致信息泄露以及服务器被入侵加固建议：立刻修改默认密码，使用数字，特殊符号，大小写字母混合的高强度密码1.3 新用户使用默认密码风险名称：新用户使用默认密码风险级别：高风险风险描述：新用户登录普遍存在使用默认密码现象，无初次登录修改密码策略测试过程：新用户可使用密码为123456/111111/888888（根据系统提示的默认密码），登录网站风险分析：可利用此方法尝试获取其他用户的敏感信息，造成不必要的风险加固建议：建议增加初次登录修改密码策略，初始密码必须需要修改才能使用1.4 账户无错误锁定机制风险名称：账户无错误锁定机制风险级别：低风险风险描述：攻击者可通过暴力破解、口令猜解等手段，尝试攻击获取管理账户的权限测试过程：使用错误的账户/密码登录，抓包后重放多次（如10次或以上），查看其返回是否一致，是否无账户登录错误锁定机制风险分析：账户无锁定策略可能会导致攻击者尝试攻击破解获取账户的权限加固建议：建议用户登录时添加锁定策略，错误次数达到指定次数以上锁定该账户指定时长，或者锁定IP等手段，不同权限等级的账户使用不同的锁定策略1.5 认证绕过风险名称：认证绕过风险级别：高风险风险描述：通过会话标识、参数来管理认证（Session IDs）因此如果使用会话标识或参数可推倒其产生结果算法，就回给一个恶意攻击者去发现其他的有效的会话标识或用户参数，从而冒充通过认证的用户进行操作测试过程：输入任意账户密码，提交数据时拦截请求的响应包，修改为登录成功的响应标识（返回成功+测试账户或其他用户会话标识）后放行。风险分析：通过构造会话标识、参数来猜解用户的会话标识、参数，冒充用户进行操作加固建议：使用高强度的加密算法加密会话标识段参数段1.6 认证重放攻击风险名称：认证重放攻击风险级别：高风险风险描述：攻击者发送一个目标主机已经接收过的包，特别是在认证过程中，用于认证用户身份所接收的包测试过程：向服务器重放请求包，查看请求是否成功执行风险分析：攻击者可以用重放方式伪装成用户，冒充用户进行下一步操作加固建议：1、可以利用时间戳进行防御，这个方法实现的前提是服务器的时间必须和用户的时间保持同步，在同一个时间，服务器和用户每隔一段时间就会更改自己的标识，用户输入登录之后，一段时间后标识就会改变，时间戳越小越保险2、加随机数3、加流水号1.7 认证弱口令风险名称：认证弱口令风险级别：高风险风险描述：弱口令是指容易被人猜测到或被破解工具破解的口令，一些仅包含简单数字或字母的简单口令，如“1234”、“abcd”、“admin”、“888888”等测试过程：已知账户，使用弱口令形如“1234”、“abcd”、“admin”、“888888”等密码尝试登录风险分析：通过弱口令攻击者可以进入后台修改资料，进入金融系统盗取钱财，进入OA系统可以获取企业内部资料，进入监控系统可以进行实时监控等等加固建议： 不使用空口令或者系统缺省的口令 口令长度不小于八个字符 口令应该符合四分之三原则，既应包括大小写字母，数字和特殊字符中至少三项 至少90天内更换一次口令，防止未被发现的入侵者继续使用该口令 1.8 不安全的验证码风险名称：不安全的验证码风险级别：中风险风险描述：通过截取数据包，重复多次使用同一验证码，或验证码存在一定规律测试过程：输入正确验证码并提交事务，截取带正确验证码的请求包，将该请求包进行重放，看事务是否正常执行或是否有一致的响应风险分析：验证码更新机制较弱，较规律性可能会导致恶意攻击者的恶意利用加固建议：增强验证码随机性，增强验证码更新机制1.9 验证码前端校验风险名称：验证码前端校验风险级别：高风险风险描述：通过截取数据包，分析返回值中是否含有验证码，可用于绕过验证测试过程：点击获取验证码后查看返回的响应包，是否含有明文的验证码或base64编码的验证码图片。风险分析：验证码返回至前端，可能被攻击者用于绕过验证，如绕过手机验证码或邮箱等验证加固建议：验证码校验放在后台执行，禁止返回至前端1.10 暴力破解风险名称：暴力破解风险级别：高风险风险描述：在登录页面，输入用户名密码后，未设置验证码机制，可利用暴力破解窃取用户信息测试过程：使用Burp Suite里Intruder模块尝试进行暴力破解风险分析：登录界面缺少多因子验证机制，恶意攻击者可通过暴力猜解用户的用户名密码信息加固建议：登录界面添加动态随机验证码辅助认证1.11 用户名/账户可以枚举风险名称：用户名/账户可以枚举风险级别：中风险风险描述：通过登录失败时服务器反馈的信息来判断是否存在有效账户测试过程：通过登录的返回信息,显示“用户名/密码不正确”，或响应包返回的信息不一致，即可判断有此漏洞，可使用Burp Suite里Intruder模块进行用户名/账户枚举风险分析：攻击者可以通过尝试登录网页回复信息判断账户是否存在，如果网页回复信息如下：• 客户端请求：有效的用户/密码错误-“服务器回答： ‘密码不正确’• 客户端请求：错误的用户/密码错误-“服务器回答： ‘用户名不存在’通过上述答复，用户就能知道第一次请求的是一个有效的用户名，因此可以枚举有效用户列表加固建议：在登录认证失败时回复统一使用“账户或密码错误”，而不是直接返回“账户错误”，“密码错误”等信息1.12 HTTP认证泄露漏洞风险名称：HTTP认证泄漏漏洞风险级别：中风险风险描述：Web目录开启了HTTP Basic认证，但未做IP限制，导致攻击者可以暴力破解帐号破解或者其他进一步的操作测试过程：尝试打开该站点下/basic/index.php，成功打开，可尝试登录或进行暴力破解风险分析：未对Web目录进行IP登录限制可能会被恶意攻击者利用构造攻击加固建议：对指定目录进行限制IP访问 二、会话管理类2.1 会话固定攻击风险名称：会话固定攻击风险级别：高风险风险描述：Web服务的Session ID是不变的，会话ID通过URL地址的查询参数携带道服务器，服务器不做检查，Web会话可能被劫持利用测试过程：可在不同浏览器，重复/重新登录用户账号，观察其携带的参数是否不变，如不变，可尝试在清空缓存的状态下，直接打开带有该参数的链接，看该账号是否登录成功，是否可以正常使用该账号下的权限进行增删查改风险分析：指Web服务的会话ID是确知不变的，攻击者为受害者确定一个会话ID从而达到攻击的目的加固建议：1.用户登录时生成新的Session ID。判断用户是否包含有效的会话标识符，否则服务器将会要求用户重新登录。2.设置HttpOnly，关闭透明化Session ID，User-Agent验证，Token校验等2.2 URL重定向漏洞风险名称：重定向漏洞风险级别：中风险风险描述：攻击者可以将 参数中URL 值引入任意开发者的URL或钓鱼网站测试过程：修改参数中的合法URL为非法URL，然后查看是否能正常跳转或者响应包是否包含了任意的构造URL风险分析：部分HTTP参数会保留 URL 值，且会导致 Web 应用程序将请求重定向到指定的 URL，攻击者可以将 URL 值改成指向恶意站点，从而顺利启用网络钓鱼欺骗并窃得用户凭证加固建议：避免重定向到基于参数值的外部站点。倘若必须如此，请务必验证应用程序重定向到的 URL，避免重定向到不明站点 2.3 点击劫持漏洞风险名称：点击劫持漏洞风险级别：低风险风险描述：通过覆盖不可见的框架误导受害者点击，虽然受害者点击的是他所看到的网页，但其实他所点击的是被黑客精心构建的另一个置于原网页上面的透明页面。这种攻击利用了HTML标签的透明属性测试过程：使用标签将测试URL嵌入至测试页面中，查看测试页面打开后是否能正常加载或使用。风险分析：通过劫持功能页面，可以诱骗受害者输入敏感数据，截取数据加固建议：X-FRAME-OPTIONS是微软提出的一个HTTP头，专门用来防御利用嵌套的点击劫持攻击。并且在IE8、Firefox3.6、Chrome4以上的版本均能很好的支持。这个头有三个值：DENY // 拒绝任何域加载SAMEORIGIN // 允许同源域下加载ALLOW-FROM // 可以定义允许frame加载的页面地址PHP中设置：header(“X-FRAME-OPTIONS:DENY”) 2.4 Apache HttpOnly Cookie泄露风险名称：Apache HttpOnly Cookie泄露风险级别：中风险风险描述：Apache HTTP Server 2.2.x到2.2.21在构建Bad Request（aka 400）错误文档期间没有正确地限制头信息，这允许远程攻击者通过构造的脚本获得HttpOnly Cookie的值测试过程：利用恶意构造的脚本，使用户cookie大于4k，再请求该网站时会得到响应为400且当前用户cookie会显示出来，再使用正则匹配即可得出正常的cookie值风险分析：攻击者可通过恶意Js脚本来访问/窃取网站的Cookie信息，并在稍后用于身份盗窃或用户伪装从而达到获取相关权限、数据等目的加固建议：将Apache升级到最新版本2.5 Cookie缺失HttpOnly标识风险名称：Cookie缺失HttpOnly标识风险级别：低风险风险描述：未启用HttpOnly属性可能导致 Cookie被窃取。窃取的Cookie可以包含标识站点用户的敏感信息，攻击者可以重放窃取的Cookie，以便伪装成用户或获取敏感信息测试过程：查看响应包中的cookie中是否含有HttpOnly标识风险分析：该属性未设置可能会导致跨站脚本威胁，可能导致Cookie及站点用户的资料被窃取加固建议：在Cookie中加上HttpOnly标识，以下网址为详细介绍Cookie中的HttpOnly标识HttpCookie.HttpOnly 属性 (System.Web) | Microsoft Learn2.6 Cookie缺失Secure属性风险名称：Cookie缺失Secure属性风险级别：低风险风险描述：当Secure属性设置为Flase时，Cookie存在被窃听的风险测试过程：使用https协议，用测试账号成功登录某站点，在不登出的情况下，再使用http协议访问该站点，确认是否会跳转至登录页面，或确认使用http协议访问过程中cookie是否正常发送风险分析：只有当Secure属性设置为True时，Cookie只有在HTTPS协议下才能上传到服务器，而在HTTP协议下是没法上传的，未设置Secure的Cookie存在被窃听的风险加固建议：启用Cookie中的Secure属性，以下网址为详细介绍Cookie中的Secure属性HttpCookie.Secure 属性 (System.Web) | Microsoft Learn2.7 Cookie-Domain属性设置不当风险名称：Cookie-Domain属性设置不当风险级别：低风险风险描述：Domain表示的是Cookie所在的域，Domain设置错误，攻击者可以进行跨域访问测试过程：抓取数据包查看cookie的domain属性设定是否合理风险分析：如果Domain设置错误，则允许其它存在漏洞的服务器接收到Cookie加固建议：应该将 Domain 设置为需要接收该 Cookie 的服务器。例如：如果应用存在于 app.mysite.com 服务器上，那幺它应该被设置成”;domain=app.mysite.com”而不能设置成 domain=.mysite.com2.8 请求Token 泄漏风险名称：请求Token泄漏风险级别：中风险风险描述：功能访问时Token可获取，可对本部分功能进行暴力猜解等攻击测试过程：观察Token是否可破解，如使用MD5加密，或使用时间戳（请求或服务器时间）为Token等等。风险分析：可利用该地址使用自写脚本对部分功能进行暴力猜解如：私密问题答案等加固建议：建议Token在请求时生成并不返回到客户端，改为内置函数2.9 CSRF漏洞风险名称：CSRF漏洞风险级别：高风险风险描述：CSRF（跨站请求伪造），是指利用受害者尚未失效的身份认证信息（cookie、会话等），诱骗其点击恶意链接或者访问包含攻击代码的页面，在受害人不知情的情况下以受害者的身份向（身份认证信息所对应的）服务器发送请求，从而完成非法操作（如转账、改密等）。测试过程：使用CSRFTester或Burp Suite中Engagement tools构造CSRF Poc为HTML，修改表单中某些参数，使用浏览器打开该HTML，提交表单后查看响应结果，看该操作是否成功执行。风险分析：未验证Referrer或者使用Token导致用户或者管理员可被CSRF添加，加固建议： 在表单中添加form token（隐藏域中的随机字符串）； 请求referrer验证； 关键请求使用验证码 2.10 WebLogic SSRF漏洞风险名称：WebLogic SSRF漏洞风险级别：高风险风险描述：WebLogic 10.0.2-10.3.6版本的SearchPublicRegistries.jsp处会引起SSRF漏洞测试过程：可以使用UDDI功能对 WebLogic 可访问的所有主机端口进行探测。探测到的服务会返回合法的 SOAP 响应信息，甚至可以看到相应的完整信息。例如，可使用 https://[vulnerablehost]/uddiexplorer/SearchPublicRegistries.jsp?operator=http://10.0.0.4:23&amp;rdoSearch=name&amp;txtSearchname=sdf&amp;txtSearchkey=&amp;txtSearchfor=&amp;selfor=Business+location&amp;btnSubmit=Search尝试探测某内部主机是否监听23 端口。风险分析：攻击者可以利用该漏洞绕过访问限制（如防火墙），进而将受感染的服务器作为代理进行端口扫描，甚至访问系统中的数据，加固建议：1.如果业务不需要UDDI功能，就关闭这个功能。可以删除uddiexporer文件夹，可以可在/weblogicPath/server/lib/uddiexplorer.war解压后，注释掉上面的jsp再打包。2.安装oracle的更新包。http://www.oracle.com/technetwork/topics/security/cpujul2014-1972956.html 2.11无会话超时设置 风险名称：无会话超时设置风险级别：中风险风险描述：会话超时设置不当。即用户使用公共计算机访问网站，离开时，该用户没有点击退出，而是直接关闭浏览器。攻击者在一个小时后能使用相同浏览器通过身份认证。测试过程：登录后静置或直接关闭网页，一小时后再直接打开主页链接进行操作，如访问资料或修改资料等。风险分析：没有会话超时限制，攻击者在长时间后能使用相同浏览器通过身份认证，使用受害者的账号对数据进行更改，如增加垃圾数据或删改数据等操作。加固建议：限制会话寿命，增加合适的会话超时限制。2.12会话标识未失效漏洞风险名称：会话标识未失效漏洞风险级别：中风险风险描述：会话标识未失效导致登录校验绕过，即攻击者可以在浏览器中打开系统登录后的主页直接登入系统，获取账户操作权限。测试过程：使用账号密码成功登录后点击退出系统，再在浏览器中直接打开登录后的主页。风险分析：攻击者无需用户账户或密码即可绕过登录验证，使用受害者的账号对数据进行更改，如增加垃圾数据或删改数据等有害正常业务的操作。加固建议：用户登出系统后要销毁会话标识 三、数据校验类3.1 XSS跨站脚本攻击-存储型风险名称：XSS跨站脚本攻击-存储型风险级别：高风险风险描述：XSS跨站脚本攻击是通过在网页中加入恶意代码，当访问者浏览网页时恶意代码会被执行或者通过给管理员发信息的方式诱使管理员浏览，从而获得管理员权限，控制整个网站。攻击者利用跨站请求伪造能够轻松地强迫用户的浏览器发出非故意的HTTP请求，如诈骗性的电汇请求、修改口令和下载非法的内容等请求测试过程：Message一栏输入测试代码，提交。 风险分析：该漏洞可能被攻击者利用窃取或操纵客户会话和Cookie，它们可能用于模仿合法用户，从而使黑客能够以合法用户身份登录系统进行渗透。可执行攻击者恶意脚本加固建议：1.对产生漏洞模块的传入参数进行有效性检测2.当客户端输入限定值意外的字符后，立即转向自定义的错误页，而不能使用服务器默认的错误输出方式3.对以上标签进行危险字符过滤，禁止(‘、”、+、%、&amp;、&lt;&gt;、（）、;、等)特殊字符的传入4.对应用层防火墙配置策略进行审查，是否配置了过滤特殊字符 3.2 XSS跨站脚本攻击-反射型风险名称：XSS跨站脚本攻击-反射型风险级别：高风险风险描述：跨站脚本攻击是通过在网页中加入恶意代码，当访问者浏览网页时恶意代码会被执行或者通过给管理员发信息的方式诱使管理员浏览，从而获得管理员权限，控制整个网站。攻击者利用跨站请求伪造能够轻松地强迫用户的浏览器发出非故意的HTTP请求，如诈骗性的电汇请求、修改口令和下载非法的内容等请求测试过程：查询时，输入测试代码，提交 风险分析：该漏洞可能被攻击者利用窃取或操纵客户会话和Cookie，它们可能用于模仿合法用户，从而使黑客能够以合法用户身份登录系统进行渗透。可执行攻击者恶意脚本加固建议：1.对产生漏洞模块的传入参数进行有效性检测2.当客户端输入限定值意外的字符后，立即转向自定义的错误页，而不能使用服务器默认的错误输出方式3.对以上标签进行危险字符过滤，禁止(‘、”、+、%、&amp;、&lt;&gt;、（）、;、等)特殊字符的传入4.对应用层防火墙配置策略进行审查，是否配置了过滤特殊字符 3.3 SQL注入风险名称：SQL注入风险级别：高风险风险描述：恶意攻击者可通过SQL注入漏洞构造SQL注入语句，对服务器端返回特定的错误信息来获取有利用价值的信息，甚至可篡改数据库中的内容并进行提权测试过程：参数aid存在注入。 风险分析：因没有对用户输入数据的合法性进行判断和限制，应用程序存在安全隐患。用户可以提交一段数据库查询代码，根据程序返回的结果，获得数据库内容，如库名、表名、字段名、数据内容等。进一步可修改数据，甚至操控服务器加固建议：1.对产生漏洞模块的传入参数进行有效性检测，对传入的参数进行限定2.当用户输入限定字符时，立刻转向自定义的错误页，不能使用服务器默认的错误输出方式3.对以上标签进行危险字符过滤，禁止(‘、”、+、%、&amp;、&lt;&gt;、（）、;、and、select等)特殊字符的传入4.加密数据库内存储信息5.与数据库链接并访问数据时，使用参数化查询方式进行链接访问 3.4 CRLF注入风险名称：CRLF注入风险级别：高风险风险描述：HTTP消息头截断注入，可以向http消息头写入或覆盖任意数据测试过程： 抓取数据包，正常数据包如下。 抓取数据包，在language参数加入%0aSet-cookie:JSPSESSID%3D1111，输入通过验证。 风险分析：HTTP使用CRLF来表示每一行的结束。这就意味着用户可以通过CRLF注入自定义HTTP Header，导致用户可以不经过应用层直接与Server对话。HTTP Header的定义就是基于这样的”Key:Value”的结构，用CRLF命令表示一行的结尾。”Location:”头用来表示重定向的URL地址，”Set-Cookie:”头用来设置Cookies。如果用户的输入经过验证，其中存在CRLF的字符就可以被用来达到欺骗的目的加固建议：服务端检测传递参数是否包含“%0d%0a”，对参数进行危险字符过滤，禁止(“%0d”、“%0a”等)特殊字符的传入3.5 XPath注入风险名称：XPath注入风险级别：高风险风险描述：XPath注入攻击利用两种技术，即XPath扫描和 XPath查询布尔化。通过该攻击，攻击者可以控制用来进行XPath查询的XML数据库。这种攻击可以有效地对付使用XPath查询（和XML数据库） 来执行身份验证、查找或者其它操作测试过程：正常查询如下http://192.168.0.104/bWAPP/xmli_2.php?genre=action&amp;action=search 构造查询语句http://192.168.0.104/bWAPP/xmli_2.php?genre=action&#39;)] | //* | //*[(‘ &amp;action=search 注入成功。风险分析：因没有对用户输入数据的合法性进行判断和限制，应用程序存在安全隐患。用户可以提交一段数据库查询代码，根据程序返回的结果，获得数据库内容，如库名、表名、字段名、数据内容等。进一步可修改数据，甚至操控服务器加固建议：1.数据提交到服务器上端，在服务端正式处理这批数据之前，对提交数据的合法性进行验证2.检查提交的数据是否包含特殊字符，对特殊字符进行编码转换或替换、删除敏感字符或字符串3.对于系统出现的错误信息，以IE错误编码信息替换，屏蔽系统本身的出错信息4.参数化XPath查询，将需要构建的XPath查询表达式，以变量的形式表示，变量不是可以执行的脚本5.通过MD5、SSL等加密算法，对于数据敏感信息和在数据传输过程中加密，即使某些非法用户通过非法手法获取数据包，看到的也是加密后的信息。3.6 XML注入风险名称：XML注入风险级别：高风险风险描述：XML注入是通过改写XML的数据内容来实现。XML通常用于存储数据，如果用户提供的数据是以XML的方式进行存储，那么对攻击者来说添加恶意代码至XML中进行攻击测试过程：输入836239账户，显示的余额100，可兑换的只有3类奖品。 修改应答包，构造xml代码。 此刻显示的多了2000和3000的积分奖品。 风险分析：Web程序代码中把用户提交的参数未做过滤就直接输出到XML中，可能引起XML注入攻击加固建议：1.对产生漏洞模块的传入参数进行有效性检测，对传入的参数进行限定2.当用户输入限定字符时，立刻转向自定义的错误页，不能使用服务器默认的错误输出方式3.对以上标签进行危险字符过滤，禁止(‘、”、+、%、&amp;、&lt;&gt;、（）、;、and、select等)特殊字符的传入4.在代码级输出时对XML特殊字符（“&lt;”、“&gt;”、“&gt;]]”）进行转义 3.7 ORM注入风险名称：ORM注入风险级别：高风险风险描述：ORM注入几乎与SQL注入攻击相同。但是注入漏洞存在于由ORM工具生成的代码中测试过程： Sqlin参数存在注入漏洞，于是： 风险分析： 在大多数情况下，ORM层中的漏洞是没有正确验证输入参数的定制代码的结果。大多数ORM工具提供安全的函数来逃避用户输入。但是，如果不使用这些函数，并且开发人员使用接受用户输入的自定义函数，则可能执行SQL注入攻击加固建议：1.使用ORM提供的安全函数2.当用户输入限定字符时，立刻转向自定义的错误页，不能使用服务器默认的错误输出方式3.对标签进行危险字符过滤，禁止(‘、”、+、%、&amp;、&lt;&gt;、（）、;、and、select等)特殊字符的传入 3.8 SSI注入风险名称：SSI注入风险级别：高风险风险描述：Web服务器通常允许开发人员在静态HTML中嵌入小片段的动态代码，而不必处理全部的服务器端或客户端语言，称作服务器包含(SSI)在网页内容被返回给用户之前，服务器会执行网页内容中的SSI标签。恶意攻击者输入的内容可以显示在页面中测试过程：在first name输入测试代码 可以看到由于没有正确配置服务器，我们已经可以看到网站目录中所有文件打开一个终端，启动端口4444上的netcat侦听器再次提交 反弹shell,连接成功，可以执行命令。 风险分析：此漏洞允许攻击者将代码插入到HTML代码中执行，通过构造甚至执行远程代码执行加固建议：1.清理用户输入:禁止可能支持SSI的模式或字符2.由于SSI会带来许多安全风险，建议您不在Web站点中使用SSI3.9 HTTP响应头注入风险名称：HTTP响应头注入风险级别：高风险风险描述：Web程序代码中把用户提交的参数未做过滤就直接输出到HTTP响应头中，攻击者可以利用该漏洞来注入HTTP响应头，可以造成XSS攻击、欺骗用户下载恶意可执行文件等攻击测试过程：输入foobar%0a%0aContent-Length:%200%0a%0a%0a%0aHTTP/1.1%20200%20OK%0a%0aContent-Type:%20texthtml%0a%0aContent-Length:%2047%0a%0a%0d%0aHacked 风险分析：通过恶意攻击者构造的参数直接输入到HTTP响应头中，从而进行攻击加固建议： 在设置HTTP响应头的代码中，过滤回车换行（%0d%0a、%0D%0A)字符。 不采用有漏洞版本的Apache服务器，同时对参数做合法性校验以及长度限制，谨慎的根据用户所传入参数做HTTP返回包的Header设置3.10 XXE外部实体注入风险名称：XXE外部实体注入风险级别：高风险风险描述：系统存在XXE外部实体注入，可通过外部引用dtd的方式获取系统文件信息测试过程： 构造post数据包，注入成功。 风险分析：攻击者可利用外部引用dtd的方式来执行服务器系统命令，从而获取服务器敏感信息，可造成资料丢失等风险产生加固建议：1.检查所使用的底层XML解析库，默认禁止外部实体的解析2.使用第三方应用代码及时升级补丁3.同时增强对系统的监控，防止此问题被人利用3.11 命令注入漏洞风险名称：命令注入漏洞风险级别：高风险风险描述：Web程序代码中把用户提交的参数未做过滤就直接使用Shell执行，攻击者可以执行任意系统命令测试过程：输入127.0.0.1提交，正常结果如下 输入127.0.0.1&amp;net user，提交。用户名被列举出来了。 风险分析：Web程序代码中把用户提交的参数未做过滤就直接输出，通过修改参数，攻击者可直接使用Shell，对系统执行命令加固建议：1.对产生漏洞模块的传入参数进行有效性检测，对传入的参数进行限定2.当用户输入限定字符时，立刻转向自定义的错误页，不能使用服务器默认的错误输出方式3.在代码级调用Shell时，对命令行中的特殊字符进行转义（|、&amp;、；等），防止执行其他非法命令。3.12 本地文件包含漏洞风险名称：本地文件包含漏洞风险级别：高风险风险描述：测试发现下载相关链接中参数未进行过滤，用户可任意下载文件测试过程：http://192.168.116.129/DVWA-master/vulnerabilities/fi/?page=include.php构造urlhttp://192.168.116.129/DVWA-master/vulnerabilities/fi/?page=/etc/shadow 报错，显示没有这个文件，说明不是服务器系统不是Linux，但同时暴露了服务器文件的绝对路径构造url（绝对路径）成功读取了服务器的php.ini文件 风险分析：由于程序员未对用户可控的变量进行输入检查，导致用户可以控制被包含的文件，成功利用时可以使服务器将特定文件当成服务端脚本执行，从而导致攻击者可获取一定的服务器权限，同时可能导致服务器上的敏感配置文件被攻击者读取加固建议：建议对URL参数内容进行检测和过滤，禁止参数内容中出现 “.”“\\”“?”“空字符”“/”“%”等特殊字符。同时保持现有文件与目录访问权限，防范利用此漏洞读取服务器配置文件3.13 远程文件包含漏洞风险名称：远程文件包含漏洞风险级别：高风险风险描述：如果PHP的配置选项allow_url_include为on的话,则include/require函数是可以加载远程文件的，这种漏洞被成为远程文件包含测试过程：在远程服务器 192.168.116.128上传一个文件 phpinfo.txt 构造urlhttp://192.168.116.129/DVWA-master/vulnerabilities/fi/?page=http://192.168.116.128/phpinfo.txt远程执行命令成功 风险分析：由于程序员未对用户可控的变量进行输入检查，导致用户可以控制被包含的文件，成功利用时可以使服务器将特定文件当成服务端脚本执行，从而导致攻击者可获取一定的服务器权限，同时可能导致服务器上的敏感配置文件被攻击者读取加固建议： 修改配置文件，在php.ini中进行设置allow_url_include = ‘off’，在.htaccess中进行设置php_flag allow_url_include off 建议对URL参数内容进行检测和过滤，禁止参数内容中出现 “.”“\\”“?”“空字符”“/”“%”等特殊字符。同时保持现有文件与目录访问权限，防范利用此漏洞读取服务器配置文件3.14 文件上传漏洞风险名称：文件上传漏洞风险级别：高风险风险描述：接受文件上传的Web程序未对文件类型和格式做合法性校验，导致攻击者可以上传Webshell（.php、.jsp等）或者非期望格式的文件（.jpg后缀的HTML文件）测试过程：上传文件，选择文件进行上传 得知上传路径/hackable/uploads/test.php，使用菜刀连接。 风险分析：未对上传文件的格式内容进行校验，恶意攻击者通过上传包含恶意代码的文件，从而攻击利用获得服务器的权限加固建议：对上传文件格式进行严格控制，建立文件格式白名单制，限定只允许上传文档类或图片类格式附件，如PDF、DOC、JPG、GIF等，除名单内的任何格式均不能上传**3.15 **风险名称：未验证文件上传类型风险级别：中风险风险描述：通过检测，发现未对上传文件类型进行严格控制，可以上传asp、exe、asa、1.asp;1.jpg等危险类型文件测试过程：新增资料处，可以选择任意类型的文件上传。 风险分析：经过分析，当前对上传文件进行逻辑路径的分离是较为合理的架构方式，能够防范Webshell的解析执行并起到防盗链的效果，但是由于未对上传文件格式进行限制，一旦后台管理被突破，不法分子就可以将木马地址绑定在pdf文件中，或将pdf文档替换成exe木马，从而对访问本站的用户造成一定的危害加固建议：对上传文件格式进行严格控制，建立文件格式白名单制，限定只允许上传文档类或图片类格式附件，如PDF、DOC、JPG、GIF等，除名单内的任何格式均不能上传 3.16 本地校验绕过风险名称：本地校验绕过风险级别：中风险风险描述：恶意攻击者截取数据绕过本地验证上传恶意文件，从而进行恶意攻击测试过程：直接上传其它类型的文件，被禁止上传 先上传图片，通过抓取数据包，修改文件后缀为jsp，上传成功。 风险分析：恶意攻击者通过阶段数据包，上传而恶意文件从而对服务器，网站进行破坏攻击加固建议：对于文件上传等校验应在前后端均进行校验。 四、通信安全类4.1 未使用加密传输协议风险名称：未使用加密传输协议风险级别：低风险风险描述：服务器Request信息中涉及系统敏感信息，HTTP协议明文传送该敏感信息测试过程：利用数据拦截工具，制作一个中间人攻击的场景，获取到一个登陆操作的请求包，发现包中的登陆账号密码都是明文传输 风险分析：可导致账户敏感信息泄露，攻击者可以截获上述信息，查看、篡改数据内容，或者进一步攻击加固建议：建议对敏感信息数据以加密方式传输4.2通过未加密信道发送敏感数据风险名称：通过未加密信道发送敏感数据风险级别：中风险风险描述：在目此表单是从不安全网页（HTTP）页面提供的。此页面可能使用中间人攻击劫持，攻击者可以替换表单目标测试过程：利用数据拦截工具，制作一个中间人攻击的场景，发现一个未使用https加密通信的网站，从拦截的请求包中发现一个未加密处理及传输的表单，可以在表单中获取到用户提交的表单信息。 风险分析：可能受到恶意攻击者的劫持，可替换原目标网站加固建议：数据所在的表单应该被安全的（HTTPS）页面提供服务**4.3 SSL/TLS RC4 信息泄露漏洞 **风险名称：SSL/TLS RC4 信息泄露漏洞风险级别：中风险风险描述：在TLS协议和SSL协议中使用的RC4算法可以允许远程攻击者获取由包含多个单字节偏置引起的敏感信息。攻击者可以通过使用相同明文进行纯文本恢复攻击并获取敏感信息的大量会话中的密文的统计分析来利用此漏洞测试过程：利用nmap扫描工具下的脚本，执行下列语句：nmap -p 443 –script=ssl-enum-ciphers TARGET风险分析：恶意攻击者可通过此漏洞恢复纯文本信息，因此造成信息泄露加固建议：1.切换到使用CBC模式密码套件2.切换到使用AEAD密码组，如AES-GCM3.更多修复信息： On the Security of RC4 in TLS 4.4 OpenSSL Heartbleed漏洞风险名称：OpenSSL Heartbleed漏洞风险级别：高风险风险描述：SSL标准包含一个心跳选项，允许连接一端的主机发出一条简短的信息确认另一端的主机是否存活，并获取反馈。可以通过巧妙的手段发出恶意心跳信息，欺骗另一端的主机泄露机密信息，受影响的主机可能会因此而被骗，并发送服务器内存中的信息测试过程：利用nmap扫描工具下的脚本，执行下列语句：nmap -p 443 –script= ssl-heartbleed TARGET确定存在heartbleed漏洞后可利用msf工具模块进行漏洞利用 风险分析：窃取对方主机内存中的信息，对方的内存信息可能存在用户名，密码等敏感信息加固建议：建议到官方更新最新OpenSSL版本，官方网站网址为：www.openssl.org4.5 OpenSSL CCS注入风险名称：OpenSSL CCS注入风险级别：高风险风险描述：CCS消息本应该是在握手加密参数协商完成之后最终确认消息发送之前来发送，但是CCS消息却在加密参数协商完成之前发送，中间人攻击可以利用这点特性在一个SSL握手过程中向客户端和服务端分别发送一个CCS包并用长度为零的预主密钥来协商会话密钥，这样攻击者就可以知道会话密钥 并可以篡改或截获SSL通信数据测试过程：利用nmap扫描工具下的脚本，执行下列语句：Nmap -p 443 –script=ssl-ccs-injection TARGET风险分析：攻击者可以发起中间人攻击并利用此漏洞篡改或监听SSL加密传输的数据加固建议：建议到官方更新最新OpenSSL版本，官方网站网址为：www.openssl.org 4.6 OpenSSL POODLE漏洞风险名称：OpenSSL POODLE注入风险级别：中风险风险描述：俗称“贵宾犬”漏洞，此漏洞是针对SSL3.0中CBC模式加密算法的一种Padding Oracle攻击，可以让攻击者获取SSL通信中的部分信息明文，如果将明文中的重要部分获取了，比如Cookie,Session，则信息的安全则出现了隐患测试过程：利用nmap扫描工具下的脚本，执行下列语句：Nmap -p 443 –script=ssl-poodle TARGET风险分析：黑客可利用“POODLE”漏洞劫持用户与网站之间传输的数据，窃取用户名、密码等敏感信息。此外，攻击者还可随意篡改用户接收到的信息，甚至向传输数据中植入恶意代码，进而对用户进行钓鱼、挂马等一系列攻击加固建议：建议到官方更新最新OpenSSL版本，官方网站网址为：www.openssl.org 4.7 OpenSSL Encrypt-Then-Mac renegotiation DDOS漏洞风险名称：OpenSSL Encrypt-Then-Mac renegotiation DDOS漏洞风险级别：中风险风险描述：OpenSSL 1.1.0版本在握手阶段的重协商过程中，所用的Encrypt-Then-Mac扩展若不在初始握手中（或反之易然），则会造成OpenSSL崩溃（取决于密码套件），服务器和客户端均受到影响测试过程：检测openssl的版本，若版本是1.1.0则漏洞存在。风险分析：恶意攻击者可对存在此漏洞的服务器和客户端进行拒绝服务攻击加固建议：建议到官方更新最新OpenSSL版本，官方网站网址为：www.openssl.orgOpenSSL Project已经为此发布了一个安全公告（20170216）以及相应补丁地址：https://www.openssl.org/news/secadv/20170216.txt 4.8 OpenSSL受戒礼漏洞风险名称：OpenSSL受戒礼漏洞风险级别：低风险风险描述：服务器支持RC4协议，存在受戒礼攻击（Bar Mitzvah Attack）风险测试过程：利用openssl工具，执行下列语句: 1openssl s_client -TARGET:443 –cipher RC4 如果能够查看到证书信息，那么就是存在风险漏洞如果显示sslv3 alerthandshake failure,表示该服务器没有这个漏洞。风险分析：攻击者可能解密经过RC4加密的通信数据，从而造成用户敏感信息、数据泄漏加固建议：1、禁止apache服务器使用RC4加密算法vi /etc/httpd/conf.d/ssl.conf修改为如下配置SSLCipherSuite HIGH:MEDIUM:!aNULL:!MD5:!RC4需要重启apache服务/etc/init.d/httpd restart2、在WebLogic配置文件中填写只允许服务器支持的加密协议，例如：想要支持的加密协议A想要支持的加密协议B3.更多修复信息：《Attacking SSL when using RC4》.Itsik Mantin.BLACK HAT ASIA 2015.访问的文章审核中… - FreeBuf网络安全行业门户4.9 OpenSSL Weak ciphers漏洞风险名称：OpenSSL Weak ciphers漏洞风险级别：中风险风险描述：远程主机支持SSL加密，提供弱加密或者不加密的应用测试过程：利用nmap扫描工具下的脚本，执行下列语句：Nmap -p 443 –script=ssl-enum-ciphers TARGET风险分析：远程主机支持SSL加密使用弱密码，如果在同一网段中更容易被利用，可能造成敏感数据泄漏加固建议：配置受影响的应用程序以避免使用弱加密SSL,详情请查阅: https://www.openssl.org/ 五、业务流程安全类5.1 越权漏洞风险名称：越权漏洞风险级别：高风险风险描述：服务器端对用户提出的数据操作请求过分信任，忽略了对该用户操作权限的判定，导致恶意攻击者账号拥有了其他账户的增删改查功能测试过程：1、在需要登陆的功能点中，查看url，header头部，post数据中是否有userid，username，token等身份id或名称的字段，通过修改这些字段重新发包测试是否增删改查到其它用户的数据2、使用普通权限用户，直接访问高权限用户（管理员）才能访问的功能点和API等风险分析：服务器过分信任用户提交的数据请求并且未对用户权限进行判定，可能导致恶意攻击者拥有其他用户的操作权限，平行越权可导致相同权限的用户之间可以进行增改删查等功能，可能造成大批量数据泄露，垂直越权可导致低权限的用户拥有着高权限的执行操作能力，可能会造成更严重的安全事故加固建议：在进行用户操作时，通过Session判断该用户是否具有该功能的操作权限5.2 用户未授权访问风险名称：用户未授权访问风险级别：高风险风险描述：未授权访问页面，未授权就可访问指定资源测试过程：1、通过目录扫描，直接扫描到需要登陆才能访问的功能点地址，并成功访问2、通过正常登陆后，收集登陆后的各功能点url地址、操作地址和API等，退出登陆或使用另一浏览器进行测试这些地址和操作在未登录时能否访问操作风险分析：攻击者如为外部人员，可通过此风险查询管理功能，实行更有针对性的攻击加固建议：建议对指定界面内容进行访问授权，只收授权成功才有权限进行访问5.3 后台管理系统未授权访问风险名称：后台管理系统未授权访问风险级别：高风险风险描述：网站中，部分界面只有管理员才能够访问，但是未对用户访问权限进行设置，导致用户只要构造出了正确的URL，就能够访问到这些网页，存在未授权访问后台管理系统，存在未授权审批添加修改网站数据测试过程：1、直接扫描后台目录文件，直接访问扫描到的后台功能地址2、登陆后台后，收集后台功能点、API等地址，退出后台，未登陆状态直接访问后台各功能点和API风险分析：未经授权访问网站管理后台，未授权对数据进行增改删查操作加固建议：基于页面严格规范访问控制5.4 绕过原密码修改密码风险名称：绕过原密码修改密码风险级别：高风险风险描述：绕过修改密码时原密码的安全限制，从而达到任意原密码即可修改当前密码的目的测试过程：1、原密码与修改密码分开两步，通过修改url地址直接跳转到修改密码的步骤从而直接绕过了原密码的校验2、原密码与新密码修改分开两步，通过修改原密码校验步骤的返回数据包（改为ok，success，true，1等成功标识），从而直接跳转到下一步输入新密码风险分析：在不知道原密码的情况下，绕过原密码的安全限制，任意修改员工的密码加固建议：建议在服务端判断原密码的正确性，服务端在原密码校验后才允许修改密码5.5 任意重置用户密码风险名称：任意重置用户密码风险级别：高风险风险描述：系统未对重置密码的用户身份进行校验或校验不严谨，导致可以绕过用户身份校验或篡改校验结果，从而能够重置任意用户的密码，甚至包括管理员的密码。测试过程：1、通过修改返回数据包中的标识篡改身份校验结果从而进入输入新密码的步骤，成功重置用户密码2、手机或邮箱验证码过于简单，可以直接爆破，从而进入下一步重置用户密码3、发送手机或邮箱验证码，验证码直接在发送数据包的返回数据包中泄露，导致绕过验证直接重置用户密码风险分析：攻击者可利用该方式重置任意用户的密码，从而登陆系统获取相应的操作权限，甚至直接重置管理员密码，获取到系统管理员权限。加固建议：建议在重置密码的功能点中，禁止仅以返回数据包中的标识作为跳转下一步的标识，更新密码时，再一次在服务端对用户身份进行校验，或直接使用服务端保存session进行对应用户密码的更新，加强验证码的校验机制，禁止反馈验证码到客户端，验证码不可复用，且存在较短的时效性。5.6 密码重置url可爆破风险名称：密码重置url可爆破风险级别：高风险风险描述：系统密码重置的url中，使用时间戳或弱token作为当前用户重置密码的链接区分，导致可以通过爆破的手段直接获取到用户的密码重置链接地址。测试过程：1、输入任意的邮箱地址，发送密码重置链接，然后通过爆破链接中的时间戳或token值，直接获取该邮箱用户的重置链接进行密码重置。风险分析：攻击者可利用该漏洞重置任意邮箱用户的密码，从而获取到该用户的系统权限进行操作。加固建议：使用md5加盐随机码或自定义加密方式等加密时间戳或token5.7 批量重置所有用户密码风险名称：批量重置所有用户密码风险级别：高风险风险描述：系统使用客户端传递的身份凭证作为修改密码的用户身份依据，且更新密码的数据包可以重复发送，导致可以批量的修改userid等重置所有用户的密码测试过程：1、更新密码的最后一步，通过userid，username等客户端传递的数据进行更新对应用户密码，且该数据包可以重复发送，导致可以修改userid等批量重置所有用户密码风险分析：攻击者利用该漏洞，可以直接批量快速重置所有系统用户的密码，甚至包括管理员密码，加固建议：使用服务端的session等信息校验用户身份，并修改密码5.8 修改任意用户信息风险名称：修改任意用户信息风险级别：高风险风险描述：系统未对用户权限进行限制，普通用户可修改同级甚至超级管理员的用户资料信息测试过程：1、修改自己的个人信息时，抓取数据包，篡改用户凭证（userid等），直接修改到其它用户的个人信息。2、管理员修改用户信息的API接口没有权限限制，任意已登陆用户只要知道API地址，就可以直接访问进行修改任意用户信息风险分析：攻击者可利用任意用户操控同级用户或者管理员权限进行操作，通过管理员权限进行增删改查用户资料等操作甚至影响系统安全加固建议：建议对各级用户进行权限限制，例如水平越权服务端通过Cookie获取当前用户ID，Cookie进行加密传输，无法修改加密信息。垂直越权需要对每个页面的加载之前进行权限验证即可5.9 支付逻辑漏洞风险名称：支付逻辑漏洞风险级别：高风险风险描述：用户在支付过程中，通过修改提交数据包的数据，实行“刷钱”、“免费购买”等非工作逻辑行为测试过程：1、支付时，截取数据包，修改单价为负数，导致用户不花钱甚至直接余额增长，且买到了商品2、支付时，截取数据包，篡改购买数量为负数或尽可能大，导致低价格购买大量商品等情况。风险分析：支付逻辑代码控制不严谨，对输入参数控制不严格，导致绕过，异常购买加固建议：对购买参数进行严格的过滤，如购买数量为大于0的整数，产品单价不能为负数，并且对支付界面做一些异常处理等5.10 恶意注册用户风险名称：恶意注册用户风险级别：中风险风险描述：在用户注册过程中通过截取数据包，重放注册数据包绕过验证码进行批量注册测试过程：1、用户注册功能，无验证码，抓取注册的数据包，重复发送，批量注册大量账号2、用户注册功能，验证码可绕过或爆破，重复发送注册的数据包，批量注册大量账号风险分析：后台未校验验证码的使用次数和时间，只校验了其准确性，可被利用进行多次注册加固建议：后台校验验证码的使用测试和时间 5.11 注册覆盖风险名称：注册覆盖风险级别：高风险风险描述：在注册时，系统未对新注册的账户名进行校验是否已存在，导致直接覆盖了已存在用户的注册用户名和密码，可以登陆该用户进行操作。测试过程：1、注册时，输入已存在用户的手机号或用户名等登陆名，直接注册，成功后登陆该账号，可以获取到该账号所有的信息以及进行相关权限的操作风险分析：利用该漏洞，可以直接覆盖所有账号的密码，登陆任意已存在账号，并进行账号对应权限的操作加固建议：注册时校验用户名或手机号等是否已存在 5.12 手机号/用户名爆破风险名称：手机号/用户名爆破风险级别：低风险风险描述：用户注册，登陆，忘记密码功能，用户名或手机号的单独校验存在与否，且无验证码，或验证码可绕过，导致可以批量爆破获取大量已存在的用户名或手机号测试过程：1、在注册，登陆，忘记密码功能，抓取数据包，发现用户名或手机号单独校验是否存在，且该数据包可以重复发送，利用burpsuite进行批量爆破操作风险分析：利用该漏洞，可以获取到系统大量的已存在用户名或手机号，并用于进一步渗透。加固建议：加入验证码防止暴力破解，或限制数据包访问频率，或模糊化反馈信息 5.13 验证码重放攻击风险名称：验证码重放攻击风险级别：中风险风险描述：在提交信息的时候，输入的验证码通过抓包进行重放，重放时验证码没有进行重置更新，造成重复信息提交，可能引起重放攻击测试过程：1、在存在验证码的功能点，如登陆，直接截取登陆校验数据包，验证码没有自动更新，可以重复提交校验的数据包，爆破用户名密码风险分析：可能遭到恶意攻击者进行重复留言，恶意注册等重放攻击加固建议：增加验证码时效性，限制验证码不可复用，且自动更新 5.14 手机验证码暴力破解风险名称：手机验证码爆力破解风险级别：高风险风险描述：通过暴力破解手机验证码，猜解正确的验证码的数值从而进行验证测试过程：1、直接利用burpsuite抓取校验手机验证码的数据包，对验证码进行暴力破解风险分析：弱验证码可导致恶意攻击者进行暴力猜解，导致进行一些修改密码，修改信息的一些恶意操作加固建议：增强验证码混淆度，为数字字母等，增加验证码时效机制 5.15 验证码绕过风险名称：验证码绕过风险级别：高风险风险描述：服务端没有对手机/邮箱验证码进行二次校验，导致当攻击者可以利用修改返回值的方式直接跳转到设置新密码页面，然后重置用户的密码测试过程：1、输入任意的手机/邮箱验证码，截取返回数据包，修改返回数据包中的标识值（ok,scuess,true等），直接进入下一步设置新密码风险分析：通过修改返回数据包，可绕过短信/邮箱验证码直接重置该账号密码加固建议：服务端对手机/邮箱的验证码进行二次校验 5.16 短信验证码泄露风险名称：短信验证码劫泄露风险级别：高风险风险描述：在进行短信功能验证模块时，用户通过抓取数据包得知验证码的数值，从而进行验证绕过测试过程：1、发送短信验证码时，利用burpsuite直接截取返回数据包，发现返回数据包中存在发送的验证码明文，直接使用该验证码进入下一步风险分析：通过抓取的数据包得知验证码的数值进行验证，绕过了短信验证功能模块加固建议：短信验证码禁止发送给客户端，而是由服务端直接发送给手机 5.17 验证码无绑定风险名称：验证码无绑定风险级别：高风险风险描述：验证码没有与唯一的手机号/邮箱绑定校验，导致可以使用其它手机/邮箱的验证码成功验证，从而绕过验证机制测试过程：1、输入任意手机号/邮箱发送验证码，再输入自己的手机号/邮箱发送验证码，利用自己的手机/邮箱收到的验证码，与第一次发送验证码的手机号/邮箱进行校验，成功绕过验证进入下一步风险分析：利用该漏洞，可以绕过手机/邮箱验证码的校验机制，直接进入下一步进行操作加固建议：验证码与手机/邮箱进行绑定校验 5.18 验证码不唯一风险名称：验证码不唯一风险级别：高风险风险描述：手机/邮箱验证码可以同时存在多个，导致可以同时发送大量验证码，然后轻易的就可以利用爆破得到其中一个正确验证码并使用，从而绕过验证码校验测试过程：1、同时给同一手机/邮箱发送两个验证码，然后使用第一次发送的验证码进行校验，发现可以校验成功，则可以同时发送多个验证码给同一手机/邮箱，只要爆破出其中一个就可以进入下一步，大大降低了爆破难度。风险分析：利用该漏洞，攻击者可以轻易的就爆破得到正确的手机/邮箱验证码，绕过手机/邮箱校验从而进入下一步操作加固建议：限制同一手机/邮箱，在同一时间只能拥有一个正确的验证码 5.19 短信轰炸风险名称：短信轰炸风险级别：中风险风险描述：短信验证功能可向绑定手机发送任意次数验证码测试过程：1、抓取发送手机验证码的数据包，利用burpsuite大量重复发送该数据包成功风险分析：该漏洞可向绑定手机发送验证信息，可以用自写脚本遍历银行卡号发送任意数量短信，影响用户体验以及造成短信服务过度消费加固建议：发送功能处加入验证码限制，或限制短信发送频次 5.20 邮件轰炸风险名称：邮件轰炸风险级别：中风险风险描述：邮件验证功能可向绑定手机发送任意次数验证码测试过程：1、抓取发送邮箱验证码的数据包，利用burpsuite大量重复发送该数据包成功风险分析：该漏洞可向绑定邮箱发送验证信息，可以用自写脚本遍历银行卡号发送任意数量邮件验证码，影响用户体验以及造成邮件服务过度消费加固建议：发送功能处加入验证码限制，或限制邮件发送频次 5.21 密保答案泄露风险名称：密保答案泄露风险级别：高风险风险描述：密保答案直接在返回数据包中泄露，导致可以直接使用泄露的答案绕过密保校验，进入下一步设置新密码测试过程：1、忘记密码功能，使用密保的方式重置密码，获取密保问题的时候，抓取数据包，发现返回数据包中同时存在密保问题和答案，直接使用该问题和答案，成功进入下一步设置新密码风险分析：利用该漏洞，攻击者可以修改任意有密保的用户密码，从而登陆系统获取相应权限加固建议：密保答案禁止返回给客户端 5.22 不安全的Sessionid机制风险名称：不安全的Sessionid机制风险级别：高风险风险描述：用于登陆用户身份识别判断的SessionId保存于客户端或url中，且只要客户端存在已分配未过期的SessionId值时，登陆后台系统不会重新分配SessionId，而是直接使用已分配的SessionId作为登陆后的凭证，导致可以钓鱼或中间人攻击获取和覆盖用户sessionid，得到用户账号权限测试过程：1、登陆系统，发现sessionid直接存在于url当中2、在cookie中设置seesionid值，并登陆系统，发现系统直接使用该sessionid值作为登录后的身份凭证，未重新更新分配sessionid风险分析：利用该漏洞，攻击者可以对后台用户进行钓鱼，中间人等多种手段的攻击，且一旦成功则获取到该用户所有的操作权限。加固建议：1、 禁止以客户端传递的sessionid作为登陆之后的身份凭证，应以每次登陆，服务端新生成的凭证为准2、 禁止未登陆便分配sessionid给客户端，且作为登陆之后的用户凭证3、 sessionid禁止保存于url和客户端中 六、敏感信息保护类6.1 数据库错误信息风险名称：数据库错误信息风险级别：低风险风险描述：在发生输入错误时，数据库报错提示过于详细，可能导致恶意攻击者的进一步利用测试过程：漏洞证明： 正常页面回显。 报错页面回显。风险分析：可能导致数据库系统敏感信息的泄露或者被进行更深一步的攻击利用加固建议：屏蔽或者隐藏记录此类信息， 6.2 敏感信息提示泄露风险名称：敏感信息提示泄露风险级别：中风险风险描述：精准的提示信息讲给恶意攻击者带来明确的攻击信息测试过程：测试过程：： 用户猜解返回： 风险分析：恶意攻击者可根据提示的信息，判断系统是否存在该用户，造成信息泄漏或者对齐有效的攻击加固建议：模糊化提示信息，如提示“用户名或密码不正确”，“用户名或密码错误”等 6.3 内部IP泄露风险名称：内部IP泄露风险级别：低风险风险描述：应用程序代码中可能包含一些注释语句或测试语句，组织机构的内部IP可能出现在这些不被执行的语句中测试过程：漏洞证明：发送不存在的脚本页面均会返回本地内网真实IP 服务器配置错误回显，处理不当造成泄露内网真实IP。风险分析：此信息在渗透测试中属于辅助信息，攻击者通过此信息可对内部网络结构进行大致的了解，以便渗透到内网时进行利用加固建议：删除相关注释语句、测试语句，或者使用域名替换真实IP 6.4 报错敏感信息泄露风险名称：报错敏感信息泄露风险级别：低风险风险描述：攻击者可通过此风险，获取系统敏感信息，如：数据库信息、服务器信息、源代码查询语句结构等测试过程： 邮箱尝试注入 返回sql数据库报错页面。风险分析：攻击者可先根据系统提示精心构造错误，使服务器爆出更明确的敏感信息加固建议：建议只输出基本信息或相对能排错的信息，对于敏感信息（如：数据库查询语句、服务器信息等）不要泄漏 6.5 数据库明文存储风险名称：数据库明文存储风险级别：中风险风险描述：数据库使用明文传输，如果存在漏洞，数据库的敏感信息将直接会泄露测试过程：漏洞证明： 加密密码采用MD5，可破解。 破解成功。风险分析：采用明文存储的敏感信息，存在漏洞的系统中，可悲攻击者直接获取并利用加固建议：建议使用MD5+Salt加密存储敏感信息 6.6 注释敏感信息泄露风险名称：注释敏感信息泄露风险级别：低风险风险描述：攻击者可能会收集有关 Web 应用程序的敏感信息，如用户名、密码、机器名或敏感文件位置测试过程： 开发商处理页面脚本，修改页面信息处理不当。打开脚本Url：http://www.wanhu.com.cn/wangzhankaifa/ezsite 得知厦门银行门户网站实在这里购买系统并实施搭建web服务器搭建。 风险分析：攻击者可能会收集有关Web程序的敏感路径等信息，收集到相关敏感信息能辅助进一步的渗透加固建议： 请勿在 HTML 注释中遗留任何重要信息（如文件名或文件路径） 从生产站点注释中除去以前（或未来）站点链接的跟踪信息 避免在 HTML 注释中放置敏感信息 确保 HTML 注释不包括源代码片段 确保程序员没有遗留重要信息 6.7 文件内泄露敏感信息风险名称：文件内泄露敏感信息风险级别：低风险风险描述：在HTML、JS、CSS文件中包含敏感信息，导致敏感信息被恶意攻击者收集利用操作测试过程： 泄漏真实路径信息。风险分析：攻击者可能会收集有关Web程序的敏感路径等信息，收集到相关敏感信息能辅助进一步的渗透加固建议：1.请勿在 HTML 注释中遗留任何重要信息（如文件名或文件路径）2.请勿在 JS文件中遗留任何重要信息（如文件名或文件路径）3.请勿在 CSS文件中遗留任何重要信息（如文件名或文件路径） 6.8 JBOSS管理敏感信息泄露风险名称：JBOSS管理敏感信息泄露风险级别：低风险风险描述：JBOSS服务器敏感信息泄露，使攻击者可更快速了解到服务器部署内容，攻击者可根据对应版本的漏洞进行进一步渗透测试过程：风险分析：攻击者可得到JBOSS服务器的敏感信息，从而构造更深一层的攻击加固建议：在服务器端配置禁止互联网用户访问该页面 6.9 站点的绝对路径泄露风险名称：站点的绝对路径泄露风险级别：中风险风险描述：由于未对服务器返回的出错信息进行良好的处理，一旦用户提交了异常的数据或指令后，服务器将会返回异常的出错信息，通常会包含敏感的配置内容，如WEB绝对路径、数据库路径等测试过程： 风险分析：此信息在渗透测试中属于辅助性的关键信息，获取绝对路径后攻击者即可了解WEB站点的存放目录，随后可以配合先前获取的权限进行Webshll等恶意文件的上传，通过此信息，攻击者可以很快的定位到上传后文件的访问路径，进而进行下一步攻击加固建议：建立错误信息预控制机制，在脚本中加入出错后的处理机制，一旦访问者提交了异常数据，立即返回预定制的出错页面，或者直接返回首页 6.10 Robots包含敏感信息风险名称：Robots包含敏感信息风险级别：低风险风险描述：在网站robots.txt文件中包含敏感信息，可能造成信息泄露测试过程： 风险分析：Robots.txt文件包含敏感的路径信息，系统信息，可能被恶意攻击者利用进行更深一层的攻击加固建议：严格规范robots.txt内数据信息，删除无用的数据 6.11 敏感信息泄露风险名称：敏感信息泄露风险级别：高风险风险描述：发现临时存储的敏感文件，可任意查看敏感文件内容，包括数据库的配置信息测试过程：风险分析：服务器配置信息或数据库配置信息非法获取，导致服务器可能被入侵加固建议：删除服务器无用的、临时的或者备份的文件 6.12 WSDL接口信息泄漏风险名称：WSDL接口信息泄露风险级别：中风险风险描述：WSDL接口信息泄露，通过泄露可获取系统WSDL信息测试过程：http://gpms.foton.com.cn/uapws/service/nc.itf.ses.inittool.PortalSESInitToolService?wsdl 风险分析：攻击者可通过问问WSDL接口获取系统支持的方法信息并构造相关数据包实现访问系统接口的功能，严重时可导致未授权获取系统信息加固建议：1、 限制对WSDL接口的访问限制1、 限制对Services目录的访问 6.13帮助页面疑似泄露内部功能风险名称：帮助页面疑似泄露内部功能风险级别：低风险风险描述：界面存在帮助页面，可能泄露登陆后功能，有可能被恶意攻击者进行更深一层的攻击测试过程：风险分析：攻击者可利用该页面了解内部功能，可用来制定详细攻击方案加固建议：修改页面，将该功能隐藏，或设计为登录后显示 6.14 配置信息文件泄露风险名称：配置信息文件泄漏风险级别：高风险风险描述：在目录中找到了备份/临时的配置文件。现已证实，此文件包含 Web 应用程序部署描述符 (通常存储在文件中 /WEB-INF/web.xml)。当 web 服务器备份时，开发者创建这种类型的文件进行备份他们的工作或由管理员创建测试过程： System.web信息风险分析：这些配置文件将泄露敏感信息、目录等信息，攻击者可根据收集泄露的提示信息深一步制定攻击方案加固建议：从 web 服务器中删除该文件，建议在组织中实施安全策略不允许从Web访问的目录创建临时备份文件 6.15 Cookie内包含敏感信息风险名称：Cookie内包含敏感信息风险级别：低风险风险描述：在Cookie内部包含敏感信息，指定字段信息，如用户名等测试过程：Cookie泄漏用户名。风险分析：攻击者可根据收集泄露的提示信息深一步制定攻击方案加固建议：加密Cookie字段，加密相关敏感信息字段 6.16 SVN/GIT等源代码泄露风险名称：SVN/GIT等源代码泄露风险级别：高风险风险描述：造成SVN源代码漏洞的主要原因是管理员操作不规范。在使用SVN管理本地代码过程中，会自动生成一个名为.svn的隐藏文件夹，其中包含重要的源代码信息。当前大量开发人员使用GIT进行版本控制，对站点自动部署。如果配置不当，可能会将.git文件夹直接部署到线上环境，这就引起了GIT泄露漏洞测试过程：风险分析：恶意攻击者可以利用该漏洞下载网站的源代码，再从源代码里获得数据库的连接密码；或者通过源代码分析出新的系统漏洞，从而进一步入侵系统加固建议：删除指定SVN生成的各种文件，如“/.svn/entries”，删除指定GIT生成的各种文件，如”/ .git/index”等 七、配置管理类7.1 目录遍历风险名称：目录遍历风险级别：中风险风险描述：路径遍历漏洞允许恶意攻击者突破Web应用程序的安全控制，直接访问攻击者想要的敏感数据 ，包括配置文件、日志、源代码等，配合其它漏洞的综合利用，攻击者可以轻易的获取更高的权限。测试过程：利用目录枚举工具例如：dirbuster、御剑后台扫描等当枚举结果存在upload、images等敏感文件目录可以访问时，证明开启了目录遍历。 风险分析：该漏洞可能导致攻击者可以使用浏览Web站点的所以目录及文件，甚至可以越权浏览到系统文件等重要文件数据加固建议：设置好对应文件的访问权限，安全Domino URL的OpenFileResource等危险命令 7.2 服务端允许列目录风险风险名称：服务端允许列目录风险风险级别：高风险风险描述：目录未做限制，未授权用户可非法访问该目录下的文件测试过程：利用目录枚举工具例如：dirbuster、御剑后台扫描等当枚举结果存在upload、images等敏感文件目录可以访问时，证明开启了目录遍历。 风险分析：Web 服务器或应用程序服务器是以不安全的方式配置的加固建议：确保该目录不包含敏感信息，或者您从网络服务器配置中限制目录列表的访问 7.3 发现隐藏目录风险名称：发现隐藏目录风险级别：低风险风险描述：提示信息可以判断系统是否存在此目录或功能模块测试过程：根据输入不同的目录名，根据响应包不同的响应结果可以发现隐藏的目录。不存在的目录响应： 存在的目录响应： 风险分析：该漏洞可能导致攻击者可以使用穷举目录名或常用目录名，并通过提示信息来判断系统是否存在此目录或功能模块加固建议：自定义错误页面，当服务器发生403错误时，跳至默认的错误页面。防止暴力猜解 7.4 存在备份文件风险名称：存在备份文件风险级别：中风险风险描述：多余的备份文件可能会泄露重要的信息测试过程：利用目录枚举工具例如：dirbuster、御剑后台扫描等当枚举结果存在bak、rar、sql等敏感文件可以访问证明存在敏感文件。 风险分析：检测到敏感的备份文件、临时文件，可能导致旧的程序漏洞被利用加固建议：请勿将文件的备份文件放置在Web服务器的根目录下，当站点更新时，请将文件删除或者移动到虚拟目录以外的目录，确保在虚拟目录下只有实际在使用的文件 7.5 存在测试界面风险名称：存在测试界面风险级别：低风险风险描述：有时开发者会忘记从生产环境中除去某些调试或测试页面。这些页面有可能包括 Web 用户所不应访问的敏感信息。它们也可能易受到攻击，且或有助于攻击者获取服务器的相关信息，以帮助进行攻击测试过程：通过目录扫描软件，会发现一些test.txt等测试存留文件 风险分析：攻击者可能会利用测试界面对网站进行攻击从而导致网站的资源受到窃取或者破坏加固建议：删除网站中的测试界面数据以及临时文件 7.6 存在WEB默认首页风险名称：存在Web默认界面风险级别：低风险风险描述：未配置首页信息，导致Apache存在默认首页，可能是恶意攻击者进行近一步攻击测试过程：通过目录扫描发现存在的默认首页例如一个nginx安装成功的默认首页： 风险分析：攻击者可以通过此风险来获取Web中间件级版本信息，根据已有漏洞进行攻击加固建议：建议删除默认首页，配置自定义首页信息 7.7 服务器端口开放过多风险名称：服务器端口开放过多风险级别：中风险风险描述：该服务器开放过多的端口，导致一旦出现新的系统漏洞或者蠕虫病毒，可能导致服务器被入侵，存在安全隐患测试过程：通常互联网系统应只开放80 http和443 https两种端口互联网最有可能开放的10个TCP端口。80 (http)23 (telnet)22 (ssh)443 (https)3389 (ms-term-serv)445 (microsoft-ds)139 (netbios-ssn)21 (ftp)135 (msrpc)25 (smtp)最有可能开放的10个UDP端口。137 (netbios-ns)161 (snmp)1434 (ms-sql-m)123 (ntp)138 (netbios-dgm)445 (microsoft-ds)135 (msrpc)67 (dhcps)139 (netbios-ssn)53 (domain)风险分析：服务器都开放很多端口，导致一旦出现新的系统漏洞或者蠕虫病毒，可能会导致服务器被入侵，有安全隐患加固建议：架设硬件防火墙，将端口隐藏在内网，或者对服务器进行加固，将一些不需要使用的端口关闭 7.8 HP Management服务器系统管理口开放风险名称：HP Management服务器系统管理口开放风险级别：中风险风险描述：HP Management提供对服务器的远程系统管理支持，管理员可以通过此接口对服务器进行系统状态查看，远程控制等功能测试过程：通过端口扫描发现开放的管理端口 风险分析：此接口的登录接口为HTTPS，通过Web进行访问，开放管理接口的同时将面临登录口令被暴力探测的风险，若猜测成功，攻击者将拥有该主机的控制权加固建议：评估是否有必要开放HP Management远程管理接口，建议将端口进行关闭 7.9 管理控制台对外开放风险名称：管理控制台对外开放风险级别：中风险风险描述：服务器管理控制台界面开放，可能容易被猜解到，导致攻击者可以暴力破解帐号密码或利用进行下一步攻击测试过程：例如tomcat管理后台地址是8080端口 风险分析：恶意攻击者可对网站后台管理界面进行暴力破解等一系列攻击，可能对导致网站数据泄露等危害加固建议： 管理后台的服务绑定到内网IP上，禁止开放在外网。 如果该管理后台必须提供给外网访问，则未登录页面不要显示过多内容，防止敏感信息泄漏，登录帐号需经过认证，且密码设置规则尽量复杂，增加验证码，以防止暴力破解 7.10 WebLogic管理界面开放风险名称：WebLogic管理界面开放风险级别：高风险风险描述：WebLogic服务器默认安装后，为管理员提供了Web方式的管理入口，如果没有限制，任何人都可以访问到管理页面，可能导致管理员口令被暴力破解测试过程：通过端口扫描通常管理界面开放在7001端口 风险分析：在公网开放WebLigic管理接口可能遭受恶意攻击者的暴力口令猜测攻击；WebLigic后台的管理权限较大，可直接对操作系统进行修改、执行命令等操作，因此一旦管理入口被突破，将给系统本身带来较大危害，并影响其他服务器安全加固建议：1、更改WebLogic默认管理口令（weblogic/weblogic），建议设置复杂的不易猜测的目录名。同时建议帐号不要使用通用的admin、root等。给猜测带来更大的复杂性。使用强壮的口令策略2、建议将业务系统访问端口与WebLogic管理接口进行分离3、对WebLogic管理接口配置访问控制，使外网普通用户无法直接访问。或对外关闭管理接口 7.11 启用OPTIONS方法风险名称：启用OPTIONS方法风险级别：低风险风险描述：WEB服务器配置允许一个（或多个）HTTP方法，这些方法可能表示在服务器上启用了WebDAV，可能允许未授权的用户对其进行利用测试过程：利用HTTP的OPTIONS请求访问系统，若系统返回HTTP请求方法信息证明OPTIONS方法开启。 风险分析：攻击者可能会在WEB服务器上载、修改或删除WEB页面、脚本和文件加固建议：如果服务器不需要支持WebDAV，请务必禁用它，或禁止不必要的HTTP方法 7.12 不安全的HTTP请求方法风险名称：不安全的HTTP请求方法风险级别：中风险风险描述：Web服务器开启了不必要的方法，如DELETE，PUT等方法，可能导致恶意用户破坏服务器资源测试过程：利用HTTP的OPTIONS请求访问系统，通过返回的内容知道开启的方法。 风险分析：可能导致信息泄漏，跨站脚本漏洞，文件上传等风险加固建议：如非必要，仅启用GET和POST方法 7.13 启用ASP.NET调试风险名称：启用ASP.NET调试风险级别：低风险风险描述：可能会收集有关 Web 应用程序的敏感信息，如用户名、密码、或敏感文件位置测试过程：利用HTTP的DEBUGS请求访问系统，通过返回的内容收集敏感的信息。 风险分析：Microsoft ASP.NET 很容易受到信息泄露攻击。攻击者可以发送一个通知是否支持调试支持的恶意请求。攻击者可以利用 DEBUG 动词来发送恶意请求加固建议：在 ASP.NET 中禁用调试，编辑 web.config 文件，使它含有下列属性： 7.14 启用TRACE方法风险名称：启用TRACE方法风险级别：低风险风险描述：在此Web服务器上启用HTTP TRACE方法。在Web浏览器中存在其他跨域漏洞的情况下，可以从支持HTTP TRACE方法的任何域读取敏感的标头信息测试过程：利用trace方法访问系统 Trace被禁用 风险分析：攻击者可以通过TRACE方法返回的信息了解到网站前端的某些信息也可以进行XSS攻击，盗取会话Cookie、获取账户、模拟其他用户身份，甚至可篡改网页，即使网站对关键页面启用了HttpOnly头标记，禁止脚本读取Cookie信息时，通过使用TRACE方法，攻击者可以绕过这个限制，读取Cookie信息加固建议：禁用 Web 服务器的TRACE方法 7.15 Slow HTTP Dos 慢速拒绝服务攻击风险名称：Slow HTTP Dos 慢速拒绝服务攻击风险级别：中风险风险描述：存在HTTP慢速拒绝服务攻击风险（Slow HTTP Denial of Service Attack），可造成服务器被拒绝服务攻击测试过程：利用慢攻击工具slowhttptest对可能存在的风险的服务器发起测试攻击 风险分析：Web服务器很容易受到慢HTTP DOS（拒绝服务）攻击，一个HTTP请求是不完整的，或者转移率很低，服务器把资源忙等待其余的数据。如果服务器保存资源太多忙，这创造了一个拒绝服务加固建议：修改中间件配置，设置会话超时时间，设置最少入站传输速率 7.16 缺少“Content-Security-Policy”头风险名称：缺少“Content-Security-Policy”头风险级别：低风险风险描述：“Content-Security-Policy”头主要是定义页面可以加载哪些资源，减少XSS的风险，缺少则可能会被恶意攻击者加载恶意信息，对网站造成损失测试过程：查看response头信息：若配置了在头信息中会有 Content-Security-Policy信息 风险分析：缺少“Content-Security-Policy”头可能会让恶意用户在页面上加载一个恶意的信息，以导致用户信息，网站信息泄露的风险加固建议：启用“Content-Security-Policy”头 7.17 缺少“X-XSS-Protection”头风险名称：缺少“X-XSS-Protection”头风险级别：低风险风险描述：虽说主流浏览器存在XSS的保护机制，但是效果不太完美，关闭此选项可能会造成XSS攻击的风险测试过程：查看response头信息：若配置了在头信息中会有X-XSS-Protection信息 风险分析：缺少“X-XSS-Protection”头，可能会加大攻击者利用XSS对网站进行攻击，可能会导致不必要的损失加固建议：启用“X-XSS-Protection”头 7.18 缺少“X-Content-Type-Options”头风险名称：缺少“X-Content-Type-Options”头风险级别：低风险风险描述：互联网上的资源有各种类型，通常浏览器会根据响应头的Content-Type字段来分辨它们的类型，然而，有些资源的Content-Type是错的或者未定义。这时，某些浏览器会启用MIME-sniffing来猜测该资源的类型，解析内容并执行测试过程：查看response头信息：若配置了在头信息中会有X-Content-Type-Options信息 风险分析：缺少“X-Content-Type-Options”头可能会造成恶意用户上传恶意文件，危害网站的安全加固建议：启用“X-Content-Type-Options”头 7.19 X-Frame-Options未配置风险名称：X-Frame-Options未配置风险级别：低风险风险描述：HTTP 响应头信息中的X-Frame-Options，可以指示浏览器是否应该加载一个 iframe 中的页面。如果服务器响应头信息中没有X-Frame-Options，则该网站存在ClickJacking攻击风险测试过程：查看response头信息： 风险分析：如果服务器响应头信息中没有X-Frame-Options，则该网站存在ClickJacking攻击风险，网站可以通过设置 X-Frame-Options 阻止站点内的页面被其他页面嵌入从而防止点击劫持加固建议：修改web服务器配置，添加X-Frame-Options响应头。赋值有如下三种：1、DENY：不能被嵌入到任何iframe或者frame中。2、SAMEORIGIN:页面只能被本站页面嵌入到iframe或者frame中。3、ALLOW-FROM url：只能被嵌入到指定域名的框架中。例如：apache可配置http.conf如下： Header always append X-Frame-Options “DENY” 7.20 启用自动完成的密码类型输入风险名称：启用自动完成的密码类型输入风险级别：低风险风险描述：当一个新的用户名和密码输入表单式，并提交表单时，浏览器会询问如果密码是否保存。此后显示表单时，用户名和密码将自动填充或完成的输入用户名。具有本地访问权限的攻击者可以获取从浏览器缓存中的明文密码测试过程：登陆失败后，系统返回登陆界面时，账号密码已经自动填充。风险分析：登录框未限制历史信息隐藏，可能会造成信息泄露的风险加固建议：密码自动完成填充应在敏感的应用中被禁用。 要禁用自动完成功能，您可以使用类似代码：&lt;INPUT TYPE=”密码”AUTOCOMPLETE=”关闭” &amp;gt 7.21 Banner信息泄露风险名称：Banner信息泄露风险级别：低风险风险描述：服务器Response信息中泄露了服务器组件等信息测试过程：查看response信息 风险分析：若攻击者获知服务器组件等信息及版本信息，会使下一步的攻击和漏洞测试提供便利加固建议：建议屏蔽或简单显示此类信息 7.22 长密码拒绝服务攻击风险名称：长密码拒绝服务攻击风险级别：中风险风险描述：未对密码输入长度做有效限制，存在密码长度过长，服务端处理消耗大量资源，可造成服务器被拒绝服务攻击测试过程：在密码栏输入超长密码字符并提交，提交后服务器无法访问。风险分析：当攻击者输入密码长度达到服务端处理极限，或者连续发送长密码请求，导致服务端处理时资源耗尽，产生拒绝服务加固建议：限制有效密码输入长度 7.23 编辑器漏洞风险名称：编辑器漏洞风险级别：高风险风险描述：Ewebeditor，fckeditor，kindeditor，southidceditor，cfeditor等很多浏览器本身包含漏洞，可导致恶意攻击者进行目录遍历，webshell上传等，从而窃取服务器信息或者获取目标服务器权限测试过程：利用用目录枚举工具例如：dirbuster、御剑后台扫描等工具确认编辑器地址枚举后可尝试历遍、上传等操作。风险分析：可通过编辑器漏洞窃取服务器敏感信息或者获取到服务器权限加固建议：1.更新编辑器至最新版本2.修改编辑器默认管理后台访问权限3.修改编辑器默认管理界面，口令4.更多编辑器漏洞介绍请查看以下网址：编辑器漏洞手册 - 血梦博客 - 专注于网络安全|黑客学习|渗透测试|代码审计|国内最专业的黑客技术博客 八、框架漏洞8.1 Struts2代码执行漏洞风险名称：Struts2代码执行漏洞风险级别：高风险风险描述：Struts2是一个基于MVC设计模式的Web应用框架，当Apache Struts2开了其动态方法Dynamic Method Invocation,会允许远程的攻击者使用method:前缀执行任意构造的链式ONGL，影响版本如下：&lt;2.3.20.2，2.3.24.0-2.3.24.2，2.3.28.0-2.3.28.1&gt;测试过程：使用专用POC检测工具进行测试扫描。不同版本的漏洞位置不一样，需要自行下载测试工具。风险分析：攻击者可利用该漏洞执行任意命令如写入后门、上传木马等进而完全控制服务器，盗取网站数据加固建议：升级Struts2到最新版本，下载地址http://struts.apache.org/ 8.2 jBoss远程执行漏洞风险名称：jBoss远程执行漏洞风险级别：高风险风险描述：jBoss默认配置会有一个后台漏洞，漏洞函数为addURL()，会远程下载一个war压缩包并解压访问后台，通过写入war压缩文件webshell的url地址，从而获得webshell获得服务器的权限测试过程：使用专用POC检测工具进行测试扫描。不同版本的漏洞位置不一样，需要自行下载测试工具。风险分析：远程执行下在一个包含恶意文件的war文件，从而获得服务器权限加固建议：1.在 ${jboss.server.home.dir}/deploy下面找到jmx-console.war目录编辑WEB-INF/web.xml文件 去掉 security-constraint 块的注释，使其起作用2.编辑WEB-INF/jboss-web.xml去掉 security-domain 块的注释 ，security-domain值的映射文件为 login-config.xml3.编辑WEB-INF/classes/jmx-console-users.properties添加用户名密码 8.3 Thinkphp命令执行风险名称：ThinkPHP命令执行漏洞风险级别：高风险风险描述：ThinkPHP是国内使用比较广泛的一款老牌PHPMVC框架，Think主要问题在于Dispatcher.class.php文件，文件中把pathinfo作为restful类型URL进行解析的，主要作用是把pathinfo中的数据解析并合并到$_GET数组中。在用正则解析pathinfo的时候$var[‘\\1’]=\\2” 又是双引号，而双引号中的php变量语法能够被解析，所以造成了任意代码执行漏洞。测试过程：使用专用POC检测工具进行测试扫描。不同版本的漏洞位置不一样，需要自行下载测试工具。风险分析：攻击者可利用该漏洞执行任意命令如写入后门、上传木马等进而完全控制服务器，盗取网站数据加固建议： 升级ThinkPHP到最新版本。 框架下载 - ThinkPHP框架 将$var[‘\\1’]=\\2” 双引号改写成单引号 8.4 Spring MVC 命令执行漏洞风险名称：Spring MVC 命令执行漏洞（CVE-2010-1622）风险级别：高风险风险描述：由于Spring框架允许使用客户端所提供的数据来更新对象，而这以机制允许攻击者修改class.classloader加载对象的类加载器属性，这可能导致执行任意命令测试过程：使用专用POC检测工具进行测试扫描。不同版本的漏洞位置不一样，需要自行下载测试工具。风险分析：这个漏洞将直接危害到使用Spring MVC框架的网站加固建议：升级 Spring 到最新版本。 http://spring.io/ 8.5 Django命令执行漏洞风险名称：Django命令执行漏洞风险级别：高风险风险描述：Django0.95版本存在命令执行漏洞，攻击者就可以构造出包含有恶意代码的序列化字串，将其传递给服务器，服务器在解析即反序列化会话的同时，就有可能导致任意命令执行测试过程：使用专用POC检测工具进行测试扫描。不同版本的漏洞位置不一样，需要自行下载测试工具。风险分析：服务器在解析即反序列化会话时，有可能导致任意命令执行加固建议：升级Django 到最新版本。Download Django | Django 8.6 Java反序列化任意命令执行漏洞风险名称：Java反序列化任意命令执行漏洞风险级别：高风险风险描述：Weblogic Java反序列化可导致任意命令执行测试过程：使用专用POC检测工具进行测试扫描。不同版本的漏洞位置不一样，需要自行下载测试工具。不同版本的漏洞位置不一样，需要自行下载测试工具。风险分析：攻击者利用此漏洞可直接威胁服务器安全，高级别的攻击，会造成严重影响加固建议：建议尽快升级Weblogic版本，下载最新补丁，及时更新 九、服务漏洞9.1 IIS写文件漏洞风险名称：IIS写文件漏洞风险级别：高风险风险描述：恶意攻击者可以向该目录写入文件，通过HTTP协议的PUT方法，向该目录写入文件或以指定的内容覆盖当前目录下的现有文件测试过程：第一步，通过OPTIONS探测服务器所支持的HTTP方法，（这里决定后面能不能操作）第二步，通过PUT方法向服务器上传脚本文件第三步，通过Move或Copy方法改名风险分析：可能会被上传带有后门的恶意程序，从而获取到对服务器的控制权，从而造成数据丢失或者系统损坏等加固建议：禁用WebDAV功能，或者关闭不安全的HTTP方法 9.2 IIS解析漏洞风险名称：IIS解析漏洞风险级别：高风险风险描述：当建立*.asa、*.asp格式的文件夹时，其目录下的任意文件都将被IIS当作ASP文件来解析。2.当文件为*.asp;1.jpg时，IIS6.0同样会以ASP脚本来执行测试过程：Iis、apach、php分别有不同的测试方法，详情可参考： https://blog.csdn.net/hitwangpeng/article/details/46913957 险分析 IIS6.0解析文件时，存在两个解析漏洞，攻击者可利用解析漏洞获取webshell加固建议：升级IIS版本，对上传进行过滤 9.3 Apache解析漏洞风险名称：Apache解析漏洞风险级别：高风险风险描述：Apache在解析文件时当遇到无法识别的扩展名时，将会从后向前解析，直到遇到识别的扩展名为止测试过程：Iis、apach、php分别有不同的测试方法，详情可参考：当apache 容器碰到不认识的扩展名时，将会从后面向前解析，直到碰到认识的扩展名为止，如果都不认识，则会暴露其源代码。这种方法可以绕过基于黑名单的检查。 Apache认识的扩展名保存在安装目录下”/conf/mime.types”文件中。风险分析：如果开发人员在控制上传文件是，判断文件名是否是PHP、ASP、ASPX、ASA、CER、ASPX等脚本扩展名，如果是，则不允许上传，这是攻击者就有可能上传1.php.rar等扩展名来绕过程序检测，配合解析漏洞，或得webshell加固建议： 版本升级 使用白盒测试对上传做控制 9.4 CGI路径解析漏洞风险名称：CGI路径解析漏洞风险级别：高风险风险描述：在使用Nginx作为web server时，一般使用fastcgi的方式调用脚本解释器，当访问一个不存在的文件时，会解析上级路径文件测试过程：在PHP的配置文件中有一个关键的选项cgi.fix_pathinfo在本机中位于C:\\wamp\\bin\\php\\php5.3.10\\php.ini，默认是开启的，当URL中有不存在的文件，PHP就会向前递归解析风险分析：通过上传一张包含恶意代码的文件，使用fastcgi方式调用脚本编辑器，构造攻击，从而导致包含恶意代码的文件执行加固建议：将配置文件中的cgi.fix_pathinfo设置为0 一、认证测试类1.1 敏感数据明文传输风险名称：敏感数据明文传输风险级别：中风险风险描述：恶意攻击者可能通过嗅探等攻击方式截取用户的登录信息测试过程：浏览网站的过程中可使用抓包工具抓取请求包，查看请求和返回的信息中是否含有用户的敏感信息，如用户名、密码及个人信息（姓名、身份证号、手机号及住址等等）风险分析：恶意攻击者如果对网站所在的网段进行嗅探，则当用户登录的时候该攻击者就可以获取到用户的用户名和密码等信息加固建议：进行数据传输时，对用户名和密码信息进行先加密、再发送的模式，可以有效的规避登录凭证被攻击者截取利用1.2 后台存在默认密码风险名称：后台存在默认密码风险级别：高风险风险描述：网站存在默认的后台管理密码，恶意攻击者凭借默认密码随意登入管理系统测试过程：使用形如账号为admin，密码为123456，尝试登录网站风险分析：恶意攻击者登入系统后，可进行增删改查操作，从而导致信息泄露以及服务器被入侵加固建议：立刻修改默认密码，使用数字，特殊符号，大小写字母混合的高强度密码1.3 新用户使用默认密码风险名称：新用户使用默认密码风险级别：高风险风险描述：新用户登录普遍存在使用默认密码现象，无初次登录修改密码策略测试过程：新用户可使用密码为123456/111111/888888（根据系统提示的默认密码），登录网站风险分析：可利用此方法尝试获取其他用户的敏感信息，造成不必要的风险加固建议：建议增加初次登录修改密码策略，初始密码必须需要修改才能使用1.4 账户无错误锁定机制风险名称：账户无错误锁定机制风险级别：低风险风险描述：攻击者可通过暴力破解、口令猜解等手段，尝试攻击获取管理账户的权限测试过程：使用错误的账户/密码登录，抓包后重放多次（如10次或以上），查看其返回是否一致，是否无账户登录错误锁定机制风险分析：账户无锁定策略可能会导致攻击者尝试攻击破解获取账户的权限加固建议：建议用户登录时添加锁定策略，错误次数达到指定次数以上锁定该账户指定时长，或者锁定IP等手段，不同权限等级的账户使用不同的锁定策略1.5 认证绕过风险名称：认证绕过风险级别：高风险风险描述：通过会话标识、参数来管理认证（Session IDs）因此如果使用会话标识或参数可推倒其产生结果算法，就回给一个恶意攻击者去发现其他的有效的会话标识或用户参数，从而冒充通过认证的用户进行操作测试过程：输入任意账户密码，提交数据时拦截请求的响应包，修改为登录成功的响应标识（返回成功+测试账户或其他用户会话标识）后放行。风险分析：通过构造会话标识、参数来猜解用户的会话标识、参数，冒充用户进行操作加固建议：使用高强度的加密算法加密会话标识段参数段1.6 认证重放攻击风险名称：认证重放攻击风险级别：高风险风险描述：攻击者发送一个目标主机已经接收过的包，特别是在认证过程中，用于认证用户身份所接收的包测试过程：向服务器重放请求包，查看请求是否成功执行风险分析：攻击者可以用重放方式伪装成用户，冒充用户进行下一步操作加固建议：1、可以利用时间戳进行防御，这个方法实现的前提是服务器的时间必须和用户的时间保持同步，在同一个时间，服务器和用户每隔一段时间就会更改自己的标识，用户输入登录之后，一段时间后标识就会改变，时间戳越小越保险2、加随机数3、加流水号1.7 认证弱口令风险名称：认证弱口令风险级别：高风险风险描述：弱口令是指容易被人猜测到或被破解工具破解的口令，一些仅包含简单数字或字母的简单口令，如“1234”、“abcd”、“admin”、“888888”等测试过程：已知账户，使用弱口令形如“1234”、“abcd”、“admin”、“888888”等密码尝试登录风险分析：通过弱口令攻击者可以进入后台修改资料，进入金融系统盗取钱财，进入OA系统可以获取企业内部资料，进入监控系统可以进行实时监控等等加固建议： 不使用空口令或者系统缺省的口令 口令长度不小于八个字符 口令应该符合四分之三原则，既应包括大小写字母，数字和特殊字符中至少三项 至少90天内更换一次口令，防止未被发现的入侵者继续使用该口令 1.8 不安全的验证码风险名称：不安全的验证码风险级别：中风险风险描述：通过截取数据包，重复多次使用同一验证码，或验证码存在一定规律测试过程：输入正确验证码并提交事务，截取带正确验证码的请求包，将该请求包进行重放，看事务是否正常执行或是否有一致的响应风险分析：验证码更新机制较弱，较规律性可能会导致恶意攻击者的恶意利用加固建议：增强验证码随机性，增强验证码更新机制1.9 验证码前端校验风险名称：验证码前端校验风险级别：高风险风险描述：通过截取数据包，分析返回值中是否含有验证码，可用于绕过验证测试过程：点击获取验证码后查看返回的响应包，是否含有明文的验证码或base64编码的验证码图片。风险分析：验证码返回至前端，可能被攻击者用于绕过验证，如绕过手机验证码或邮箱等验证加固建议：验证码校验放在后台执行，禁止返回至前端1.10 暴力破解风险名称：暴力破解风险级别：高风险风险描述：在登录页面，输入用户名密码后，未设置验证码机制，可利用暴力破解窃取用户信息测试过程：使用Burp Suite里Intruder模块尝试进行暴力破解风险分析：登录界面缺少多因子验证机制，恶意攻击者可通过暴力猜解用户的用户名密码信息加固建议：登录界面添加动态随机验证码辅助认证1.11 用户名/账户可以枚举风险名称：用户名/账户可以枚举风险级别：中风险风险描述：通过登录失败时服务器反馈的信息来判断是否存在有效账户测试过程：通过登录的返回信息,显示“用户名/密码不正确”，或响应包返回的信息不一致，即可判断有此漏洞，可使用Burp Suite里Intruder模块进行用户名/账户枚举风险分析：攻击者可以通过尝试登录网页回复信息判断账户是否存在，如果网页回复信息如下：• 客户端请求：有效的用户/密码错误-“服务器回答： ‘密码不正确’• 客户端请求：错误的用户/密码错误-“服务器回答： ‘用户名不存在’通过上述答复，用户就能知道第一次请求的是一个有效的用户名，因此可以枚举有效用户列表加固建议：在登录认证失败时回复统一使用“账户或密码错误”，而不是直接返回“账户错误”，“密码错误”等信息1.12 HTTP认证泄露漏洞风险名称：HTTP认证泄漏漏洞风险级别：中风险风险描述：Web目录开启了HTTP Basic认证，但未做IP限制，导致攻击者可以暴力破解帐号破解或者其他进一步的操作测试过程：尝试打开该站点下/basic/index.php，成功打开，可尝试登录或进行暴力破解风险分析：未对Web目录进行IP登录限制可能会被恶意攻击者利用构造攻击加固建议：对指定目录进行限制IP访问 二、会话管理类2.1 会话固定攻击风险名称：会话固定攻击风险级别：高风险风险描述：Web服务的Session ID是不变的，会话ID通过URL地址的查询参数携带道服务器，服务器不做检查，Web会话可能被劫持利用测试过程：可在不同浏览器，重复/重新登录用户账号，观察其携带的参数是否不变，如不变，可尝试在清空缓存的状态下，直接打开带有该参数的链接，看该账号是否登录成功，是否可以正常使用该账号下的权限进行增删查改风险分析：指Web服务的会话ID是确知不变的，攻击者为受害者确定一个会话ID从而达到攻击的目的加固建议：1.用户登录时生成新的Session ID。判断用户是否包含有效的会话标识符，否则服务器将会要求用户重新登录。2.设置HttpOnly，关闭透明化Session ID，User-Agent验证，Token校验等2.2 URL重定向漏洞风险名称：重定向漏洞风险级别：中风险风险描述：攻击者可以将 参数中URL 值引入任意开发者的URL或钓鱼网站测试过程：修改参数中的合法URL为非法URL，然后查看是否能正常跳转或者响应包是否包含了任意的构造URL风险分析：部分HTTP参数会保留 URL 值，且会导致 Web 应用程序将请求重定向到指定的 URL，攻击者可以将 URL 值改成指向恶意站点，从而顺利启用网络钓鱼欺骗并窃得用户凭证加固建议：避免重定向到基于参数值的外部站点。倘若必须如此，请务必验证应用程序重定向到的 URL，避免重定向到不明站点 2.3 点击劫持漏洞风险名称：点击劫持漏洞风险级别：低风险风险描述：通过覆盖不可见的框架误导受害者点击，虽然受害者点击的是他所看到的网页，但其实他所点击的是被黑客精心构建的另一个置于原网页上面的透明页面。这种攻击利用了HTML标签的透明属性测试过程：使用标签将测试URL嵌入至测试页面中，查看测试页面打开后是否能正常加载或使用。风险分析：通过劫持功能页面，可以诱骗受害者输入敏感数据，截取数据加固建议：X-FRAME-OPTIONS是微软提出的一个HTTP头，专门用来防御利用嵌套的点击劫持攻击。并且在IE8、Firefox3.6、Chrome4以上的版本均能很好的支持。这个头有三个值：DENY // 拒绝任何域加载SAMEORIGIN // 允许同源域下加载ALLOW-FROM // 可以定义允许frame加载的页面地址PHP中设置：header(“X-FRAME-OPTIONS:DENY”) 2.4 Apache HttpOnly Cookie泄露风险名称：Apache HttpOnly Cookie泄露风险级别：中风险风险描述：Apache HTTP Server 2.2.x到2.2.21在构建Bad Request（aka 400）错误文档期间没有正确地限制头信息，这允许远程攻击者通过构造的脚本获得HttpOnly Cookie的值测试过程：利用恶意构造的脚本，使用户cookie大于4k，再请求该网站时会得到响应为400且当前用户cookie会显示出来，再使用正则匹配即可得出正常的cookie值风险分析：攻击者可通过恶意Js脚本来访问/窃取网站的Cookie信息，并在稍后用于身份盗窃或用户伪装从而达到获取相关权限、数据等目的加固建议：将Apache升级到最新版本2.5 Cookie缺失HttpOnly标识风险名称：Cookie缺失HttpOnly标识风险级别：低风险风险描述：未启用HttpOnly属性可能导致 Cookie被窃取。窃取的Cookie可以包含标识站点用户的敏感信息，攻击者可以重放窃取的Cookie，以便伪装成用户或获取敏感信息测试过程：查看响应包中的cookie中是否含有HttpOnly标识风险分析：该属性未设置可能会导致跨站脚本威胁，可能导致Cookie及站点用户的资料被窃取加固建议：在Cookie中加上HttpOnly标识，以下网址为详细介绍Cookie中的HttpOnly标识HttpCookie.HttpOnly 属性 (System.Web) | Microsoft Learn2.6 Cookie缺失Secure属性风险名称：Cookie缺失Secure属性风险级别：低风险风险描述：当Secure属性设置为Flase时，Cookie存在被窃听的风险测试过程：使用https协议，用测试账号成功登录某站点，在不登出的情况下，再使用http协议访问该站点，确认是否会跳转至登录页面，或确认使用http协议访问过程中cookie是否正常发送风险分析：只有当Secure属性设置为True时，Cookie只有在HTTPS协议下才能上传到服务器，而在HTTP协议下是没法上传的，未设置Secure的Cookie存在被窃听的风险加固建议：启用Cookie中的Secure属性，以下网址为详细介绍Cookie中的Secure属性HttpCookie.Secure 属性 (System.Web) | Microsoft Learn2.7 Cookie-Domain属性设置不当风险名称：Cookie-Domain属性设置不当风险级别：低风险风险描述：Domain表示的是Cookie所在的域，Domain设置错误，攻击者可以进行跨域访问测试过程：抓取数据包查看cookie的domain属性设定是否合理风险分析：如果Domain设置错误，则允许其它存在漏洞的服务器接收到Cookie加固建议：应该将 Domain 设置为需要接收该 Cookie 的服务器。例如：如果应用存在于 app.mysite.com 服务器上，那幺它应该被设置成”;domain=app.mysite.com”而不能设置成 domain=.mysite.com2.8 请求Token 泄漏风险名称：请求Token泄漏风险级别：中风险风险描述：功能访问时Token可获取，可对本部分功能进行暴力猜解等攻击测试过程：观察Token是否可破解，如使用MD5加密，或使用时间戳（请求或服务器时间）为Token等等。风险分析：可利用该地址使用自写脚本对部分功能进行暴力猜解如：私密问题答案等加固建议：建议Token在请求时生成并不返回到客户端，改为内置函数2.9 CSRF漏洞风险名称：CSRF漏洞风险级别：高风险风险描述：CSRF（跨站请求伪造），是指利用受害者尚未失效的身份认证信息（cookie、会话等），诱骗其点击恶意链接或者访问包含攻击代码的页面，在受害人不知情的情况下以受害者的身份向（身份认证信息所对应的）服务器发送请求，从而完成非法操作（如转账、改密等）。测试过程：使用CSRFTester或Burp Suite中Engagement tools构造CSRF Poc为HTML，修改表单中某些参数，使用浏览器打开该HTML，提交表单后查看响应结果，看该操作是否成功执行。风险分析：未验证Referrer或者使用Token导致用户或者管理员可被CSRF添加，加固建议： 在表单中添加form token（隐藏域中的随机字符串）； 请求referrer验证； 关键请求使用验证码 2.10 WebLogic SSRF漏洞风险名称：WebLogic SSRF漏洞风险级别：高风险风险描述：WebLogic 10.0.2-10.3.6版本的SearchPublicRegistries.jsp处会引起SSRF漏洞测试过程：可以使用UDDI功能对 WebLogic 可访问的所有主机端口进行探测。探测到的服务会返回合法的 SOAP 响应信息，甚至可以看到相应的完整信息。例如，可使用 https://[vulnerablehost]/uddiexplorer/SearchPublicRegistries.jsp?operator=http://10.0.0.4:23&amp;rdoSearch=name&amp;txtSearchname=sdf&amp;txtSearchkey=&amp;txtSearchfor=&amp;selfor=Business+location&amp;btnSubmit=Search尝试探测某内部主机是否监听23 端口。风险分析：攻击者可以利用该漏洞绕过访问限制（如防火墙），进而将受感染的服务器作为代理进行端口扫描，甚至访问系统中的数据，加固建议：1.如果业务不需要UDDI功能，就关闭这个功能。可以删除uddiexporer文件夹，可以可在/weblogicPath/server/lib/uddiexplorer.war解压后，注释掉上面的jsp再打包。2.安装oracle的更新包。http://www.oracle.com/technetwork/topics/security/cpujul2014-1972956.html 2.11无会话超时设置 风险名称：无会话超时设置风险级别：中风险风险描述：会话超时设置不当。即用户使用公共计算机访问网站，离开时，该用户没有点击退出，而是直接关闭浏览器。攻击者在一个小时后能使用相同浏览器通过身份认证。测试过程：登录后静置或直接关闭网页，一小时后再直接打开主页链接进行操作，如访问资料或修改资料等。风险分析：没有会话超时限制，攻击者在长时间后能使用相同浏览器通过身份认证，使用受害者的账号对数据进行更改，如增加垃圾数据或删改数据等操作。加固建议：限制会话寿命，增加合适的会话超时限制。2.12会话标识未失效漏洞风险名称：会话标识未失效漏洞风险级别：中风险风险描述：会话标识未失效导致登录校验绕过，即攻击者可以在浏览器中打开系统登录后的主页直接登入系统，获取账户操作权限。测试过程：使用账号密码成功登录后点击退出系统，再在浏览器中直接打开登录后的主页。风险分析：攻击者无需用户账户或密码即可绕过登录验证，使用受害者的账号对数据进行更改，如增加垃圾数据或删改数据等有害正常业务的操作。加固建议：用户登出系统后要销毁会话标识 三、数据校验类3.1 XSS跨站脚本攻击-存储型风险名称：XSS跨站脚本攻击-存储型风险级别：高风险风险描述：XSS跨站脚本攻击是通过在网页中加入恶意代码，当访问者浏览网页时恶意代码会被执行或者通过给管理员发信息的方式诱使管理员浏览，从而获得管理员权限，控制整个网站。攻击者利用跨站请求伪造能够轻松地强迫用户的浏览器发出非故意的HTTP请求，如诈骗性的电汇请求、修改口令和下载非法的内容等请求测试过程：Message一栏输入测试代码，提交。 风险分析：该漏洞可能被攻击者利用窃取或操纵客户会话和Cookie，它们可能用于模仿合法用户，从而使黑客能够以合法用户身份登录系统进行渗透。可执行攻击者恶意脚本加固建议：1.对产生漏洞模块的传入参数进行有效性检测2.当客户端输入限定值意外的字符后，立即转向自定义的错误页，而不能使用服务器默认的错误输出方式3.对以上标签进行危险字符过滤，禁止(‘、”、+、%、&amp;、&lt;&gt;、（）、;、等)特殊字符的传入4.对应用层防火墙配置策略进行审查，是否配置了过滤特殊字符 3.2 XSS跨站脚本攻击-反射型风险名称：XSS跨站脚本攻击-反射型风险级别：高风险风险描述：跨站脚本攻击是通过在网页中加入恶意代码，当访问者浏览网页时恶意代码会被执行或者通过给管理员发信息的方式诱使管理员浏览，从而获得管理员权限，控制整个网站。攻击者利用跨站请求伪造能够轻松地强迫用户的浏览器发出非故意的HTTP请求，如诈骗性的电汇请求、修改口令和下载非法的内容等请求测试过程：查询时，输入测试代码，提交 风险分析：该漏洞可能被攻击者利用窃取或操纵客户会话和Cookie，它们可能用于模仿合法用户，从而使黑客能够以合法用户身份登录系统进行渗透。可执行攻击者恶意脚本加固建议：1.对产生漏洞模块的传入参数进行有效性检测2.当客户端输入限定值意外的字符后，立即转向自定义的错误页，而不能使用服务器默认的错误输出方式3.对以上标签进行危险字符过滤，禁止(‘、”、+、%、&amp;、&lt;&gt;、（）、;、等)特殊字符的传入4.对应用层防火墙配置策略进行审查，是否配置了过滤特殊字符 3.3 SQL注入风险名称：SQL注入风险级别：高风险风险描述：恶意攻击者可通过SQL注入漏洞构造SQL注入语句，对服务器端返回特定的错误信息来获取有利用价值的信息，甚至可篡改数据库中的内容并进行提权测试过程：参数aid存在注入。 风险分析：因没有对用户输入数据的合法性进行判断和限制，应用程序存在安全隐患。用户可以提交一段数据库查询代码，根据程序返回的结果，获得数据库内容，如库名、表名、字段名、数据内容等。进一步可修改数据，甚至操控服务器加固建议：1.对产生漏洞模块的传入参数进行有效性检测，对传入的参数进行限定2.当用户输入限定字符时，立刻转向自定义的错误页，不能使用服务器默认的错误输出方式3.对以上标签进行危险字符过滤，禁止(‘、”、+、%、&amp;、&lt;&gt;、（）、;、and、select等)特殊字符的传入4.加密数据库内存储信息5.与数据库链接并访问数据时，使用参数化查询方式进行链接访问 3.4 CRLF注入风险名称：CRLF注入风险级别：高风险风险描述：HTTP消息头截断注入，可以向http消息头写入或覆盖任意数据测试过程： 抓取数据包，正常数据包如下。 抓取数据包，在language参数加入%0aSet-cookie:JSPSESSID%3D1111，输入通过验证。 风险分析：HTTP使用CRLF来表示每一行的结束。这就意味着用户可以通过CRLF注入自定义HTTP Header，导致用户可以不经过应用层直接与Server对话。HTTP Header的定义就是基于这样的”Key:Value”的结构，用CRLF命令表示一行的结尾。”Location:”头用来表示重定向的URL地址，”Set-Cookie:”头用来设置Cookies。如果用户的输入经过验证，其中存在CRLF的字符就可以被用来达到欺骗的目的加固建议：服务端检测传递参数是否包含“%0d%0a”，对参数进行危险字符过滤，禁止(“%0d”、“%0a”等)特殊字符的传入3.5 XPath注入风险名称：XPath注入风险级别：高风险风险描述：XPath注入攻击利用两种技术，即XPath扫描和 XPath查询布尔化。通过该攻击，攻击者可以控制用来进行XPath查询的XML数据库。这种攻击可以有效地对付使用XPath查询（和XML数据库） 来执行身份验证、查找或者其它操作测试过程：正常查询如下http://192.168.0.104/bWAPP/xmli_2.php?genre=action&amp;action=search 构造查询语句http://192.168.0.104/bWAPP/xmli_2.php?genre=action&#39;)] | //* | //*[(‘ &amp;action=search 注入成功。风险分析：因没有对用户输入数据的合法性进行判断和限制，应用程序存在安全隐患。用户可以提交一段数据库查询代码，根据程序返回的结果，获得数据库内容，如库名、表名、字段名、数据内容等。进一步可修改数据，甚至操控服务器加固建议：1.数据提交到服务器上端，在服务端正式处理这批数据之前，对提交数据的合法性进行验证2.检查提交的数据是否包含特殊字符，对特殊字符进行编码转换或替换、删除敏感字符或字符串3.对于系统出现的错误信息，以IE错误编码信息替换，屏蔽系统本身的出错信息4.参数化XPath查询，将需要构建的XPath查询表达式，以变量的形式表示，变量不是可以执行的脚本5.通过MD5、SSL等加密算法，对于数据敏感信息和在数据传输过程中加密，即使某些非法用户通过非法手法获取数据包，看到的也是加密后的信息。3.6 XML注入风险名称：XML注入风险级别：高风险风险描述：XML注入是通过改写XML的数据内容来实现。XML通常用于存储数据，如果用户提供的数据是以XML的方式进行存储，那么对攻击者来说添加恶意代码至XML中进行攻击测试过程：输入836239账户，显示的余额100，可兑换的只有3类奖品。 修改应答包，构造xml代码。 此刻显示的多了2000和3000的积分奖品。 风险分析：Web程序代码中把用户提交的参数未做过滤就直接输出到XML中，可能引起XML注入攻击加固建议：1.对产生漏洞模块的传入参数进行有效性检测，对传入的参数进行限定2.当用户输入限定字符时，立刻转向自定义的错误页，不能使用服务器默认的错误输出方式3.对以上标签进行危险字符过滤，禁止(‘、”、+、%、&amp;、&lt;&gt;、（）、;、and、select等)特殊字符的传入4.在代码级输出时对XML特殊字符（“&lt;”、“&gt;”、“&gt;]]”）进行转义 3.7 ORM注入风险名称：ORM注入风险级别：高风险风险描述：ORM注入几乎与SQL注入攻击相同。但是注入漏洞存在于由ORM工具生成的代码中测试过程： Sqlin参数存在注入漏洞，于是： 风险分析： 在大多数情况下，ORM层中的漏洞是没有正确验证输入参数的定制代码的结果。大多数ORM工具提供安全的函数来逃避用户输入。但是，如果不使用这些函数，并且开发人员使用接受用户输入的自定义函数，则可能执行SQL注入攻击加固建议：1.使用ORM提供的安全函数2.当用户输入限定字符时，立刻转向自定义的错误页，不能使用服务器默认的错误输出方式3.对标签进行危险字符过滤，禁止(‘、”、+、%、&amp;、&lt;&gt;、（）、;、and、select等)特殊字符的传入 3.8 SSI注入风险名称：SSI注入风险级别：高风险风险描述：Web服务器通常允许开发人员在静态HTML中嵌入小片段的动态代码，而不必处理全部的服务器端或客户端语言，称作服务器包含(SSI)在网页内容被返回给用户之前，服务器会执行网页内容中的SSI标签。恶意攻击者输入的内容可以显示在页面中测试过程：在first name输入测试代码 可以看到由于没有正确配置服务器，我们已经可以看到网站目录中所有文件打开一个终端，启动端口4444上的netcat侦听器再次提交 反弹shell,连接成功，可以执行命令。 风险分析：此漏洞允许攻击者将代码插入到HTML代码中执行，通过构造甚至执行远程代码执行加固建议：1.清理用户输入:禁止可能支持SSI的模式或字符2.由于SSI会带来许多安全风险，建议您不在Web站点中使用SSI3.9 HTTP响应头注入风险名称：HTTP响应头注入风险级别：高风险风险描述：Web程序代码中把用户提交的参数未做过滤就直接输出到HTTP响应头中，攻击者可以利用该漏洞来注入HTTP响应头，可以造成XSS攻击、欺骗用户下载恶意可执行文件等攻击测试过程：输入foobar%0a%0aContent-Length:%200%0a%0a%0a%0aHTTP/1.1%20200%20OK%0a%0aContent-Type:%20texthtml%0a%0aContent-Length:%2047%0a%0a%0d%0aHacked 风险分析：通过恶意攻击者构造的参数直接输入到HTTP响应头中，从而进行攻击加固建议： 在设置HTTP响应头的代码中，过滤回车换行（%0d%0a、%0D%0A)字符。 不采用有漏洞版本的Apache服务器，同时对参数做合法性校验以及长度限制，谨慎的根据用户所传入参数做HTTP返回包的Header设置3.10 XXE外部实体注入风险名称：XXE外部实体注入风险级别：高风险风险描述：系统存在XXE外部实体注入，可通过外部引用dtd的方式获取系统文件信息测试过程： 构造post数据包，注入成功。 风险分析：攻击者可利用外部引用dtd的方式来执行服务器系统命令，从而获取服务器敏感信息，可造成资料丢失等风险产生加固建议：1.检查所使用的底层XML解析库，默认禁止外部实体的解析2.使用第三方应用代码及时升级补丁3.同时增强对系统的监控，防止此问题被人利用3.11 命令注入漏洞风险名称：命令注入漏洞风险级别：高风险风险描述：Web程序代码中把用户提交的参数未做过滤就直接使用Shell执行，攻击者可以执行任意系统命令测试过程：输入127.0.0.1提交，正常结果如下 输入127.0.0.1&amp;net user，提交。用户名被列举出来了。 风险分析：Web程序代码中把用户提交的参数未做过滤就直接输出，通过修改参数，攻击者可直接使用Shell，对系统执行命令加固建议：1.对产生漏洞模块的传入参数进行有效性检测，对传入的参数进行限定2.当用户输入限定字符时，立刻转向自定义的错误页，不能使用服务器默认的错误输出方式3.在代码级调用Shell时，对命令行中的特殊字符进行转义（|、&amp;、；等），防止执行其他非法命令。3.12 本地文件包含漏洞风险名称：本地文件包含漏洞风险级别：高风险风险描述：测试发现下载相关链接中参数未进行过滤，用户可任意下载文件测试过程：http://192.168.116.129/DVWA-master/vulnerabilities/fi/?page=include.php构造urlhttp://192.168.116.129/DVWA-master/vulnerabilities/fi/?page=/etc/shadow 报错，显示没有这个文件，说明不是服务器系统不是Linux，但同时暴露了服务器文件的绝对路径构造url（绝对路径）成功读取了服务器的php.ini文件 风险分析：由于程序员未对用户可控的变量进行输入检查，导致用户可以控制被包含的文件，成功利用时可以使服务器将特定文件当成服务端脚本执行，从而导致攻击者可获取一定的服务器权限，同时可能导致服务器上的敏感配置文件被攻击者读取加固建议：建议对URL参数内容进行检测和过滤，禁止参数内容中出现 “.”“\\”“?”“空字符”“/”“%”等特殊字符。同时保持现有文件与目录访问权限，防范利用此漏洞读取服务器配置文件3.13 远程文件包含漏洞风险名称：远程文件包含漏洞风险级别：高风险风险描述：如果PHP的配置选项allow_url_include为on的话,则include/require函数是可以加载远程文件的，这种漏洞被成为远程文件包含测试过程：在远程服务器 192.168.116.128上传一个文件 phpinfo.txt 构造urlhttp://192.168.116.129/DVWA-master/vulnerabilities/fi/?page=http://192.168.116.128/phpinfo.txt远程执行命令成功 风险分析：由于程序员未对用户可控的变量进行输入检查，导致用户可以控制被包含的文件，成功利用时可以使服务器将特定文件当成服务端脚本执行，从而导致攻击者可获取一定的服务器权限，同时可能导致服务器上的敏感配置文件被攻击者读取加固建议： 修改配置文件，在php.ini中进行设置allow_url_include = ‘off’，在.htaccess中进行设置php_flag allow_url_include off 建议对URL参数内容进行检测和过滤，禁止参数内容中出现 “.”“\\”“?”“空字符”“/”“%”等特殊字符。同时保持现有文件与目录访问权限，防范利用此漏洞读取服务器配置文件3.14 文件上传漏洞风险名称：文件上传漏洞风险级别：高风险风险描述：接受文件上传的Web程序未对文件类型和格式做合法性校验，导致攻击者可以上传Webshell（.php、.jsp等）或者非期望格式的文件（.jpg后缀的HTML文件）测试过程：上传文件，选择文件进行上传 得知上传路径/hackable/uploads/test.php，使用菜刀连接。 风险分析：未对上传文件的格式内容进行校验，恶意攻击者通过上传包含恶意代码的文件，从而攻击利用获得服务器的权限加固建议：对上传文件格式进行严格控制，建立文件格式白名单制，限定只允许上传文档类或图片类格式附件，如PDF、DOC、JPG、GIF等，除名单内的任何格式均不能上传**3.15 **风险名称：未验证文件上传类型风险级别：中风险风险描述：通过检测，发现未对上传文件类型进行严格控制，可以上传asp、exe、asa、1.asp;1.jpg等危险类型文件测试过程：新增资料处，可以选择任意类型的文件上传。 风险分析：经过分析，当前对上传文件进行逻辑路径的分离是较为合理的架构方式，能够防范Webshell的解析执行并起到防盗链的效果，但是由于未对上传文件格式进行限制，一旦后台管理被突破，不法分子就可以将木马地址绑定在pdf文件中，或将pdf文档替换成exe木马，从而对访问本站的用户造成一定的危害加固建议：对上传文件格式进行严格控制，建立文件格式白名单制，限定只允许上传文档类或图片类格式附件，如PDF、DOC、JPG、GIF等，除名单内的任何格式均不能上传 3.16 本地校验绕过风险名称：本地校验绕过风险级别：中风险风险描述：恶意攻击者截取数据绕过本地验证上传恶意文件，从而进行恶意攻击测试过程：直接上传其它类型的文件，被禁止上传 先上传图片，通过抓取数据包，修改文件后缀为jsp，上传成功。 风险分析：恶意攻击者通过阶段数据包，上传而恶意文件从而对服务器，网站进行破坏攻击加固建议：对于文件上传等校验应在前后端均进行校验。 四、通信安全类4.1 未使用加密传输协议风险名称：未使用加密传输协议风险级别：低风险风险描述：服务器Request信息中涉及系统敏感信息，HTTP协议明文传送该敏感信息测试过程：利用数据拦截工具，制作一个中间人攻击的场景，获取到一个登陆操作的请求包，发现包中的登陆账号密码都是明文传输 风险分析：可导致账户敏感信息泄露，攻击者可以截获上述信息，查看、篡改数据内容，或者进一步攻击加固建议：建议对敏感信息数据以加密方式传输4.2通过未加密信道发送敏感数据风险名称：通过未加密信道发送敏感数据风险级别：中风险风险描述：在目此表单是从不安全网页（HTTP）页面提供的。此页面可能使用中间人攻击劫持，攻击者可以替换表单目标测试过程：利用数据拦截工具，制作一个中间人攻击的场景，发现一个未使用https加密通信的网站，从拦截的请求包中发现一个未加密处理及传输的表单，可以在表单中获取到用户提交的表单信息。 风险分析：可能受到恶意攻击者的劫持，可替换原目标网站加固建议：数据所在的表单应该被安全的（HTTPS）页面提供服务**4.3 SSL/TLS RC4 信息泄露漏洞 **风险名称：SSL/TLS RC4 信息泄露漏洞风险级别：中风险风险描述：在TLS协议和SSL协议中使用的RC4算法可以允许远程攻击者获取由包含多个单字节偏置引起的敏感信息。攻击者可以通过使用相同明文进行纯文本恢复攻击并获取敏感信息的大量会话中的密文的统计分析来利用此漏洞测试过程：利用nmap扫描工具下的脚本，执行下列语句：nmap -p 443 –script=ssl-enum-ciphers TARGET风险分析：恶意攻击者可通过此漏洞恢复纯文本信息，因此造成信息泄露加固建议：1.切换到使用CBC模式密码套件2.切换到使用AEAD密码组，如AES-GCM3.更多修复信息： On the Security of RC4 in TLS 4.4 OpenSSL Heartbleed漏洞风险名称：OpenSSL Heartbleed漏洞风险级别：高风险风险描述：SSL标准包含一个心跳选项，允许连接一端的主机发出一条简短的信息确认另一端的主机是否存活，并获取反馈。可以通过巧妙的手段发出恶意心跳信息，欺骗另一端的主机泄露机密信息，受影响的主机可能会因此而被骗，并发送服务器内存中的信息测试过程：利用nmap扫描工具下的脚本，执行下列语句：nmap -p 443 –script= ssl-heartbleed TARGET确定存在heartbleed漏洞后可利用msf工具模块进行漏洞利用 风险分析：窃取对方主机内存中的信息，对方的内存信息可能存在用户名，密码等敏感信息加固建议：建议到官方更新最新OpenSSL版本，官方网站网址为：www.openssl.org4.5 OpenSSL CCS注入风险名称：OpenSSL CCS注入风险级别：高风险风险描述：CCS消息本应该是在握手加密参数协商完成之后最终确认消息发送之前来发送，但是CCS消息却在加密参数协商完成之前发送，中间人攻击可以利用这点特性在一个SSL握手过程中向客户端和服务端分别发送一个CCS包并用长度为零的预主密钥来协商会话密钥，这样攻击者就可以知道会话密钥 并可以篡改或截获SSL通信数据测试过程：利用nmap扫描工具下的脚本，执行下列语句：Nmap -p 443 –script=ssl-ccs-injection TARGET风险分析：攻击者可以发起中间人攻击并利用此漏洞篡改或监听SSL加密传输的数据加固建议：建议到官方更新最新OpenSSL版本，官方网站网址为：www.openssl.org 4.6 OpenSSL POODLE漏洞风险名称：OpenSSL POODLE注入风险级别：中风险风险描述：俗称“贵宾犬”漏洞，此漏洞是针对SSL3.0中CBC模式加密算法的一种Padding Oracle攻击，可以让攻击者获取SSL通信中的部分信息明文，如果将明文中的重要部分获取了，比如Cookie,Session，则信息的安全则出现了隐患测试过程：利用nmap扫描工具下的脚本，执行下列语句：Nmap -p 443 –script=ssl-poodle TARGET风险分析：黑客可利用“POODLE”漏洞劫持用户与网站之间传输的数据，窃取用户名、密码等敏感信息。此外，攻击者还可随意篡改用户接收到的信息，甚至向传输数据中植入恶意代码，进而对用户进行钓鱼、挂马等一系列攻击加固建议：建议到官方更新最新OpenSSL版本，官方网站网址为：www.openssl.org 4.7 OpenSSL Encrypt-Then-Mac renegotiation DDOS漏洞风险名称：OpenSSL Encrypt-Then-Mac renegotiation DDOS漏洞风险级别：中风险风险描述：OpenSSL 1.1.0版本在握手阶段的重协商过程中，所用的Encrypt-Then-Mac扩展若不在初始握手中（或反之易然），则会造成OpenSSL崩溃（取决于密码套件），服务器和客户端均受到影响测试过程：检测openssl的版本，若版本是1.1.0则漏洞存在。风险分析：恶意攻击者可对存在此漏洞的服务器和客户端进行拒绝服务攻击加固建议：建议到官方更新最新OpenSSL版本，官方网站网址为：www.openssl.orgOpenSSL Project已经为此发布了一个安全公告（20170216）以及相应补丁地址：https://www.openssl.org/news/secadv/20170216.txt 4.8 OpenSSL受戒礼漏洞风险名称：OpenSSL受戒礼漏洞风险级别：低风险风险描述：服务器支持RC4协议，存在受戒礼攻击（Bar Mitzvah Attack）风险测试过程：利用openssl工具，执行下列语句: 1openssl s_client -TARGET:443 –cipher RC4 如果能够查看到证书信息，那么就是存在风险漏洞如果显示sslv3 alerthandshake failure,表示该服务器没有这个漏洞。风险分析：攻击者可能解密经过RC4加密的通信数据，从而造成用户敏感信息、数据泄漏加固建议：1、禁止apache服务器使用RC4加密算法vi /etc/httpd/conf.d/ssl.conf修改为如下配置SSLCipherSuite HIGH:MEDIUM:!aNULL:!MD5:!RC4需要重启apache服务/etc/init.d/httpd restart2、在WebLogic配置文件中填写只允许服务器支持的加密协议，例如：想要支持的加密协议A想要支持的加密协议B3.更多修复信息：《Attacking SSL when using RC4》.Itsik Mantin.BLACK HAT ASIA 2015.访问的文章审核中… - FreeBuf网络安全行业门户4.9 OpenSSL Weak ciphers漏洞风险名称：OpenSSL Weak ciphers漏洞风险级别：中风险风险描述：远程主机支持SSL加密，提供弱加密或者不加密的应用测试过程：利用nmap扫描工具下的脚本，执行下列语句：Nmap -p 443 –script=ssl-enum-ciphers TARGET风险分析：远程主机支持SSL加密使用弱密码，如果在同一网段中更容易被利用，可能造成敏感数据泄漏加固建议：配置受影响的应用程序以避免使用弱加密SSL,详情请查阅: https://www.openssl.org/ 五、业务流程安全类5.1 越权漏洞风险名称：越权漏洞风险级别：高风险风险描述：服务器端对用户提出的数据操作请求过分信任，忽略了对该用户操作权限的判定，导致恶意攻击者账号拥有了其他账户的增删改查功能测试过程：1、在需要登陆的功能点中，查看url，header头部，post数据中是否有userid，username，token等身份id或名称的字段，通过修改这些字段重新发包测试是否增删改查到其它用户的数据2、使用普通权限用户，直接访问高权限用户（管理员）才能访问的功能点和API等风险分析：服务器过分信任用户提交的数据请求并且未对用户权限进行判定，可能导致恶意攻击者拥有其他用户的操作权限，平行越权可导致相同权限的用户之间可以进行增改删查等功能，可能造成大批量数据泄露，垂直越权可导致低权限的用户拥有着高权限的执行操作能力，可能会造成更严重的安全事故加固建议：在进行用户操作时，通过Session判断该用户是否具有该功能的操作权限5.2 用户未授权访问风险名称：用户未授权访问风险级别：高风险风险描述：未授权访问页面，未授权就可访问指定资源测试过程：1、通过目录扫描，直接扫描到需要登陆才能访问的功能点地址，并成功访问2、通过正常登陆后，收集登陆后的各功能点url地址、操作地址和API等，退出登陆或使用另一浏览器进行测试这些地址和操作在未登录时能否访问操作风险分析：攻击者如为外部人员，可通过此风险查询管理功能，实行更有针对性的攻击加固建议：建议对指定界面内容进行访问授权，只收授权成功才有权限进行访问5.3 后台管理系统未授权访问风险名称：后台管理系统未授权访问风险级别：高风险风险描述：网站中，部分界面只有管理员才能够访问，但是未对用户访问权限进行设置，导致用户只要构造出了正确的URL，就能够访问到这些网页，存在未授权访问后台管理系统，存在未授权审批添加修改网站数据测试过程：1、直接扫描后台目录文件，直接访问扫描到的后台功能地址2、登陆后台后，收集后台功能点、API等地址，退出后台，未登陆状态直接访问后台各功能点和API风险分析：未经授权访问网站管理后台，未授权对数据进行增改删查操作加固建议：基于页面严格规范访问控制5.4 绕过原密码修改密码风险名称：绕过原密码修改密码风险级别：高风险风险描述：绕过修改密码时原密码的安全限制，从而达到任意原密码即可修改当前密码的目的测试过程：1、原密码与修改密码分开两步，通过修改url地址直接跳转到修改密码的步骤从而直接绕过了原密码的校验2、原密码与新密码修改分开两步，通过修改原密码校验步骤的返回数据包（改为ok，success，true，1等成功标识），从而直接跳转到下一步输入新密码风险分析：在不知道原密码的情况下，绕过原密码的安全限制，任意修改员工的密码加固建议：建议在服务端判断原密码的正确性，服务端在原密码校验后才允许修改密码5.5 任意重置用户密码风险名称：任意重置用户密码风险级别：高风险风险描述：系统未对重置密码的用户身份进行校验或校验不严谨，导致可以绕过用户身份校验或篡改校验结果，从而能够重置任意用户的密码，甚至包括管理员的密码。测试过程：1、通过修改返回数据包中的标识篡改身份校验结果从而进入输入新密码的步骤，成功重置用户密码2、手机或邮箱验证码过于简单，可以直接爆破，从而进入下一步重置用户密码3、发送手机或邮箱验证码，验证码直接在发送数据包的返回数据包中泄露，导致绕过验证直接重置用户密码风险分析：攻击者可利用该方式重置任意用户的密码，从而登陆系统获取相应的操作权限，甚至直接重置管理员密码，获取到系统管理员权限。加固建议：建议在重置密码的功能点中，禁止仅以返回数据包中的标识作为跳转下一步的标识，更新密码时，再一次在服务端对用户身份进行校验，或直接使用服务端保存session进行对应用户密码的更新，加强验证码的校验机制，禁止反馈验证码到客户端，验证码不可复用，且存在较短的时效性。5.6 密码重置url可爆破风险名称：密码重置url可爆破风险级别：高风险风险描述：系统密码重置的url中，使用时间戳或弱token作为当前用户重置密码的链接区分，导致可以通过爆破的手段直接获取到用户的密码重置链接地址。测试过程：1、输入任意的邮箱地址，发送密码重置链接，然后通过爆破链接中的时间戳或token值，直接获取该邮箱用户的重置链接进行密码重置。风险分析：攻击者可利用该漏洞重置任意邮箱用户的密码，从而获取到该用户的系统权限进行操作。加固建议：使用md5加盐随机码或自定义加密方式等加密时间戳或token5.7 批量重置所有用户密码风险名称：批量重置所有用户密码风险级别：高风险风险描述：系统使用客户端传递的身份凭证作为修改密码的用户身份依据，且更新密码的数据包可以重复发送，导致可以批量的修改userid等重置所有用户的密码测试过程：1、更新密码的最后一步，通过userid，username等客户端传递的数据进行更新对应用户密码，且该数据包可以重复发送，导致可以修改userid等批量重置所有用户密码风险分析：攻击者利用该漏洞，可以直接批量快速重置所有系统用户的密码，甚至包括管理员密码，加固建议：使用服务端的session等信息校验用户身份，并修改密码5.8 修改任意用户信息风险名称：修改任意用户信息风险级别：高风险风险描述：系统未对用户权限进行限制，普通用户可修改同级甚至超级管理员的用户资料信息测试过程：1、修改自己的个人信息时，抓取数据包，篡改用户凭证（userid等），直接修改到其它用户的个人信息。2、管理员修改用户信息的API接口没有权限限制，任意已登陆用户只要知道API地址，就可以直接访问进行修改任意用户信息风险分析：攻击者可利用任意用户操控同级用户或者管理员权限进行操作，通过管理员权限进行增删改查用户资料等操作甚至影响系统安全加固建议：建议对各级用户进行权限限制，例如水平越权服务端通过Cookie获取当前用户ID，Cookie进行加密传输，无法修改加密信息。垂直越权需要对每个页面的加载之前进行权限验证即可5.9 支付逻辑漏洞风险名称：支付逻辑漏洞风险级别：高风险风险描述：用户在支付过程中，通过修改提交数据包的数据，实行“刷钱”、“免费购买”等非工作逻辑行为测试过程：1、支付时，截取数据包，修改单价为负数，导致用户不花钱甚至直接余额增长，且买到了商品2、支付时，截取数据包，篡改购买数量为负数或尽可能大，导致低价格购买大量商品等情况。风险分析：支付逻辑代码控制不严谨，对输入参数控制不严格，导致绕过，异常购买加固建议：对购买参数进行严格的过滤，如购买数量为大于0的整数，产品单价不能为负数，并且对支付界面做一些异常处理等5.10 恶意注册用户风险名称：恶意注册用户风险级别：中风险风险描述：在用户注册过程中通过截取数据包，重放注册数据包绕过验证码进行批量注册测试过程：1、用户注册功能，无验证码，抓取注册的数据包，重复发送，批量注册大量账号2、用户注册功能，验证码可绕过或爆破，重复发送注册的数据包，批量注册大量账号风险分析：后台未校验验证码的使用次数和时间，只校验了其准确性，可被利用进行多次注册加固建议：后台校验验证码的使用测试和时间 5.11 注册覆盖风险名称：注册覆盖风险级别：高风险风险描述：在注册时，系统未对新注册的账户名进行校验是否已存在，导致直接覆盖了已存在用户的注册用户名和密码，可以登陆该用户进行操作。测试过程：1、注册时，输入已存在用户的手机号或用户名等登陆名，直接注册，成功后登陆该账号，可以获取到该账号所有的信息以及进行相关权限的操作风险分析：利用该漏洞，可以直接覆盖所有账号的密码，登陆任意已存在账号，并进行账号对应权限的操作加固建议：注册时校验用户名或手机号等是否已存在 5.12 手机号/用户名爆破风险名称：手机号/用户名爆破风险级别：低风险风险描述：用户注册，登陆，忘记密码功能，用户名或手机号的单独校验存在与否，且无验证码，或验证码可绕过，导致可以批量爆破获取大量已存在的用户名或手机号测试过程：1、在注册，登陆，忘记密码功能，抓取数据包，发现用户名或手机号单独校验是否存在，且该数据包可以重复发送，利用burpsuite进行批量爆破操作风险分析：利用该漏洞，可以获取到系统大量的已存在用户名或手机号，并用于进一步渗透。加固建议：加入验证码防止暴力破解，或限制数据包访问频率，或模糊化反馈信息 5.13 验证码重放攻击风险名称：验证码重放攻击风险级别：中风险风险描述：在提交信息的时候，输入的验证码通过抓包进行重放，重放时验证码没有进行重置更新，造成重复信息提交，可能引起重放攻击测试过程：1、在存在验证码的功能点，如登陆，直接截取登陆校验数据包，验证码没有自动更新，可以重复提交校验的数据包，爆破用户名密码风险分析：可能遭到恶意攻击者进行重复留言，恶意注册等重放攻击加固建议：增加验证码时效性，限制验证码不可复用，且自动更新 5.14 手机验证码暴力破解风险名称：手机验证码爆力破解风险级别：高风险风险描述：通过暴力破解手机验证码，猜解正确的验证码的数值从而进行验证测试过程：1、直接利用burpsuite抓取校验手机验证码的数据包，对验证码进行暴力破解风险分析：弱验证码可导致恶意攻击者进行暴力猜解，导致进行一些修改密码，修改信息的一些恶意操作加固建议：增强验证码混淆度，为数字字母等，增加验证码时效机制 5.15 验证码绕过风险名称：验证码绕过风险级别：高风险风险描述：服务端没有对手机/邮箱验证码进行二次校验，导致当攻击者可以利用修改返回值的方式直接跳转到设置新密码页面，然后重置用户的密码测试过程：1、输入任意的手机/邮箱验证码，截取返回数据包，修改返回数据包中的标识值（ok,scuess,true等），直接进入下一步设置新密码风险分析：通过修改返回数据包，可绕过短信/邮箱验证码直接重置该账号密码加固建议：服务端对手机/邮箱的验证码进行二次校验 5.16 短信验证码泄露风险名称：短信验证码劫泄露风险级别：高风险风险描述：在进行短信功能验证模块时，用户通过抓取数据包得知验证码的数值，从而进行验证绕过测试过程：1、发送短信验证码时，利用burpsuite直接截取返回数据包，发现返回数据包中存在发送的验证码明文，直接使用该验证码进入下一步风险分析：通过抓取的数据包得知验证码的数值进行验证，绕过了短信验证功能模块加固建议：短信验证码禁止发送给客户端，而是由服务端直接发送给手机 5.17 验证码无绑定风险名称：验证码无绑定风险级别：高风险风险描述：验证码没有与唯一的手机号/邮箱绑定校验，导致可以使用其它手机/邮箱的验证码成功验证，从而绕过验证机制测试过程：1、输入任意手机号/邮箱发送验证码，再输入自己的手机号/邮箱发送验证码，利用自己的手机/邮箱收到的验证码，与第一次发送验证码的手机号/邮箱进行校验，成功绕过验证进入下一步风险分析：利用该漏洞，可以绕过手机/邮箱验证码的校验机制，直接进入下一步进行操作加固建议：验证码与手机/邮箱进行绑定校验 5.18 验证码不唯一风险名称：验证码不唯一风险级别：高风险风险描述：手机/邮箱验证码可以同时存在多个，导致可以同时发送大量验证码，然后轻易的就可以利用爆破得到其中一个正确验证码并使用，从而绕过验证码校验测试过程：1、同时给同一手机/邮箱发送两个验证码，然后使用第一次发送的验证码进行校验，发现可以校验成功，则可以同时发送多个验证码给同一手机/邮箱，只要爆破出其中一个就可以进入下一步，大大降低了爆破难度。风险分析：利用该漏洞，攻击者可以轻易的就爆破得到正确的手机/邮箱验证码，绕过手机/邮箱校验从而进入下一步操作加固建议：限制同一手机/邮箱，在同一时间只能拥有一个正确的验证码 5.19 短信轰炸风险名称：短信轰炸风险级别：中风险风险描述：短信验证功能可向绑定手机发送任意次数验证码测试过程：1、抓取发送手机验证码的数据包，利用burpsuite大量重复发送该数据包成功风险分析：该漏洞可向绑定手机发送验证信息，可以用自写脚本遍历银行卡号发送任意数量短信，影响用户体验以及造成短信服务过度消费加固建议：发送功能处加入验证码限制，或限制短信发送频次 5.20 邮件轰炸风险名称：邮件轰炸风险级别：中风险风险描述：邮件验证功能可向绑定手机发送任意次数验证码测试过程：1、抓取发送邮箱验证码的数据包，利用burpsuite大量重复发送该数据包成功风险分析：该漏洞可向绑定邮箱发送验证信息，可以用自写脚本遍历银行卡号发送任意数量邮件验证码，影响用户体验以及造成邮件服务过度消费加固建议：发送功能处加入验证码限制，或限制邮件发送频次 5.21 密保答案泄露风险名称：密保答案泄露风险级别：高风险风险描述：密保答案直接在返回数据包中泄露，导致可以直接使用泄露的答案绕过密保校验，进入下一步设置新密码测试过程：1、忘记密码功能，使用密保的方式重置密码，获取密保问题的时候，抓取数据包，发现返回数据包中同时存在密保问题和答案，直接使用该问题和答案，成功进入下一步设置新密码风险分析：利用该漏洞，攻击者可以修改任意有密保的用户密码，从而登陆系统获取相应权限加固建议：密保答案禁止返回给客户端 5.22 不安全的Sessionid机制风险名称：不安全的Sessionid机制风险级别：高风险风险描述：用于登陆用户身份识别判断的SessionId保存于客户端或url中，且只要客户端存在已分配未过期的SessionId值时，登陆后台系统不会重新分配SessionId，而是直接使用已分配的SessionId作为登陆后的凭证，导致可以钓鱼或中间人攻击获取和覆盖用户sessionid，得到用户账号权限测试过程：1、登陆系统，发现sessionid直接存在于url当中2、在cookie中设置seesionid值，并登陆系统，发现系统直接使用该sessionid值作为登录后的身份凭证，未重新更新分配sessionid风险分析：利用该漏洞，攻击者可以对后台用户进行钓鱼，中间人等多种手段的攻击，且一旦成功则获取到该用户所有的操作权限。加固建议：1、 禁止以客户端传递的sessionid作为登陆之后的身份凭证，应以每次登陆，服务端新生成的凭证为准2、 禁止未登陆便分配sessionid给客户端，且作为登陆之后的用户凭证3、 sessionid禁止保存于url和客户端中 六、敏感信息保护类6.1 数据库错误信息风险名称：数据库错误信息风险级别：低风险风险描述：在发生输入错误时，数据库报错提示过于详细，可能导致恶意攻击者的进一步利用测试过程：漏洞证明： 正常页面回显。 报错页面回显。风险分析：可能导致数据库系统敏感信息的泄露或者被进行更深一步的攻击利用加固建议：屏蔽或者隐藏记录此类信息， 6.2 敏感信息提示泄露风险名称：敏感信息提示泄露风险级别：中风险风险描述：精准的提示信息讲给恶意攻击者带来明确的攻击信息测试过程：测试过程：： 用户猜解返回： 风险分析：恶意攻击者可根据提示的信息，判断系统是否存在该用户，造成信息泄漏或者对齐有效的攻击加固建议：模糊化提示信息，如提示“用户名或密码不正确”，“用户名或密码错误”等 6.3 内部IP泄露风险名称：内部IP泄露风险级别：低风险风险描述：应用程序代码中可能包含一些注释语句或测试语句，组织机构的内部IP可能出现在这些不被执行的语句中测试过程：漏洞证明：发送不存在的脚本页面均会返回本地内网真实IP 服务器配置错误回显，处理不当造成泄露内网真实IP。风险分析：此信息在渗透测试中属于辅助信息，攻击者通过此信息可对内部网络结构进行大致的了解，以便渗透到内网时进行利用加固建议：删除相关注释语句、测试语句，或者使用域名替换真实IP 6.4 报错敏感信息泄露风险名称：报错敏感信息泄露风险级别：低风险风险描述：攻击者可通过此风险，获取系统敏感信息，如：数据库信息、服务器信息、源代码查询语句结构等测试过程： 邮箱尝试注入 返回sql数据库报错页面。风险分析：攻击者可先根据系统提示精心构造错误，使服务器爆出更明确的敏感信息加固建议：建议只输出基本信息或相对能排错的信息，对于敏感信息（如：数据库查询语句、服务器信息等）不要泄漏 6.5 数据库明文存储风险名称：数据库明文存储风险级别：中风险风险描述：数据库使用明文传输，如果存在漏洞，数据库的敏感信息将直接会泄露测试过程：漏洞证明： 加密密码采用MD5，可破解。 破解成功。风险分析：采用明文存储的敏感信息，存在漏洞的系统中，可悲攻击者直接获取并利用加固建议：建议使用MD5+Salt加密存储敏感信息 6.6 注释敏感信息泄露风险名称：注释敏感信息泄露风险级别：低风险风险描述：攻击者可能会收集有关 Web 应用程序的敏感信息，如用户名、密码、机器名或敏感文件位置测试过程： 开发商处理页面脚本，修改页面信息处理不当。打开脚本Url：http://www.wanhu.com.cn/wangzhankaifa/ezsite 得知厦门银行门户网站实在这里购买系统并实施搭建web服务器搭建。 风险分析：攻击者可能会收集有关Web程序的敏感路径等信息，收集到相关敏感信息能辅助进一步的渗透加固建议： 请勿在 HTML 注释中遗留任何重要信息（如文件名或文件路径） 从生产站点注释中除去以前（或未来）站点链接的跟踪信息 避免在 HTML 注释中放置敏感信息 确保 HTML 注释不包括源代码片段 确保程序员没有遗留重要信息 6.7 文件内泄露敏感信息风险名称：文件内泄露敏感信息风险级别：低风险风险描述：在HTML、JS、CSS文件中包含敏感信息，导致敏感信息被恶意攻击者收集利用操作测试过程： 泄漏真实路径信息。风险分析：攻击者可能会收集有关Web程序的敏感路径等信息，收集到相关敏感信息能辅助进一步的渗透加固建议：1.请勿在 HTML 注释中遗留任何重要信息（如文件名或文件路径）2.请勿在 JS文件中遗留任何重要信息（如文件名或文件路径）3.请勿在 CSS文件中遗留任何重要信息（如文件名或文件路径） 6.8 JBOSS管理敏感信息泄露风险名称：JBOSS管理敏感信息泄露风险级别：低风险风险描述：JBOSS服务器敏感信息泄露，使攻击者可更快速了解到服务器部署内容，攻击者可根据对应版本的漏洞进行进一步渗透测试过程：风险分析：攻击者可得到JBOSS服务器的敏感信息，从而构造更深一层的攻击加固建议：在服务器端配置禁止互联网用户访问该页面 6.9 站点的绝对路径泄露风险名称：站点的绝对路径泄露风险级别：中风险风险描述：由于未对服务器返回的出错信息进行良好的处理，一旦用户提交了异常的数据或指令后，服务器将会返回异常的出错信息，通常会包含敏感的配置内容，如WEB绝对路径、数据库路径等测试过程： 风险分析：此信息在渗透测试中属于辅助性的关键信息，获取绝对路径后攻击者即可了解WEB站点的存放目录，随后可以配合先前获取的权限进行Webshll等恶意文件的上传，通过此信息，攻击者可以很快的定位到上传后文件的访问路径，进而进行下一步攻击加固建议：建立错误信息预控制机制，在脚本中加入出错后的处理机制，一旦访问者提交了异常数据，立即返回预定制的出错页面，或者直接返回首页 6.10 Robots包含敏感信息风险名称：Robots包含敏感信息风险级别：低风险风险描述：在网站robots.txt文件中包含敏感信息，可能造成信息泄露测试过程： 风险分析：Robots.txt文件包含敏感的路径信息，系统信息，可能被恶意攻击者利用进行更深一层的攻击加固建议：严格规范robots.txt内数据信息，删除无用的数据 6.11 敏感信息泄露风险名称：敏感信息泄露风险级别：高风险风险描述：发现临时存储的敏感文件，可任意查看敏感文件内容，包括数据库的配置信息测试过程：风险分析：服务器配置信息或数据库配置信息非法获取，导致服务器可能被入侵加固建议：删除服务器无用的、临时的或者备份的文件 6.12 WSDL接口信息泄漏风险名称：WSDL接口信息泄露风险级别：中风险风险描述：WSDL接口信息泄露，通过泄露可获取系统WSDL信息测试过程：http://gpms.foton.com.cn/uapws/service/nc.itf.ses.inittool.PortalSESInitToolService?wsdl 风险分析：攻击者可通过问问WSDL接口获取系统支持的方法信息并构造相关数据包实现访问系统接口的功能，严重时可导致未授权获取系统信息加固建议：1、 限制对WSDL接口的访问限制1、 限制对Services目录的访问 6.13帮助页面疑似泄露内部功能风险名称：帮助页面疑似泄露内部功能风险级别：低风险风险描述：界面存在帮助页面，可能泄露登陆后功能，有可能被恶意攻击者进行更深一层的攻击测试过程：风险分析：攻击者可利用该页面了解内部功能，可用来制定详细攻击方案加固建议：修改页面，将该功能隐藏，或设计为登录后显示 6.14 配置信息文件泄露风险名称：配置信息文件泄漏风险级别：高风险风险描述：在目录中找到了备份/临时的配置文件。现已证实，此文件包含 Web 应用程序部署描述符 (通常存储在文件中 /WEB-INF/web.xml)。当 web 服务器备份时，开发者创建这种类型的文件进行备份他们的工作或由管理员创建测试过程： System.web信息风险分析：这些配置文件将泄露敏感信息、目录等信息，攻击者可根据收集泄露的提示信息深一步制定攻击方案加固建议：从 web 服务器中删除该文件，建议在组织中实施安全策略不允许从Web访问的目录创建临时备份文件 6.15 Cookie内包含敏感信息风险名称：Cookie内包含敏感信息风险级别：低风险风险描述：在Cookie内部包含敏感信息，指定字段信息，如用户名等测试过程：Cookie泄漏用户名。风险分析：攻击者可根据收集泄露的提示信息深一步制定攻击方案加固建议：加密Cookie字段，加密相关敏感信息字段 6.16 SVN/GIT等源代码泄露风险名称：SVN/GIT等源代码泄露风险级别：高风险风险描述：造成SVN源代码漏洞的主要原因是管理员操作不规范。在使用SVN管理本地代码过程中，会自动生成一个名为.svn的隐藏文件夹，其中包含重要的源代码信息。当前大量开发人员使用GIT进行版本控制，对站点自动部署。如果配置不当，可能会将.git文件夹直接部署到线上环境，这就引起了GIT泄露漏洞测试过程：风险分析：恶意攻击者可以利用该漏洞下载网站的源代码，再从源代码里获得数据库的连接密码；或者通过源代码分析出新的系统漏洞，从而进一步入侵系统加固建议：删除指定SVN生成的各种文件，如“/.svn/entries”，删除指定GIT生成的各种文件，如”/ .git/index”等 七、配置管理类7.1 目录遍历风险名称：目录遍历风险级别：中风险风险描述：路径遍历漏洞允许恶意攻击者突破Web应用程序的安全控制，直接访问攻击者想要的敏感数据 ，包括配置文件、日志、源代码等，配合其它漏洞的综合利用，攻击者可以轻易的获取更高的权限。测试过程：利用目录枚举工具例如：dirbuster、御剑后台扫描等当枚举结果存在upload、images等敏感文件目录可以访问时，证明开启了目录遍历。 风险分析：该漏洞可能导致攻击者可以使用浏览Web站点的所以目录及文件，甚至可以越权浏览到系统文件等重要文件数据加固建议：设置好对应文件的访问权限，安全Domino URL的OpenFileResource等危险命令 7.2 服务端允许列目录风险风险名称：服务端允许列目录风险风险级别：高风险风险描述：目录未做限制，未授权用户可非法访问该目录下的文件测试过程：利用目录枚举工具例如：dirbuster、御剑后台扫描等当枚举结果存在upload、images等敏感文件目录可以访问时，证明开启了目录遍历。 风险分析：Web 服务器或应用程序服务器是以不安全的方式配置的加固建议：确保该目录不包含敏感信息，或者您从网络服务器配置中限制目录列表的访问 7.3 发现隐藏目录风险名称：发现隐藏目录风险级别：低风险风险描述：提示信息可以判断系统是否存在此目录或功能模块测试过程：根据输入不同的目录名，根据响应包不同的响应结果可以发现隐藏的目录。不存在的目录响应： 存在的目录响应： 风险分析：该漏洞可能导致攻击者可以使用穷举目录名或常用目录名，并通过提示信息来判断系统是否存在此目录或功能模块加固建议：自定义错误页面，当服务器发生403错误时，跳至默认的错误页面。防止暴力猜解 7.4 存在备份文件风险名称：存在备份文件风险级别：中风险风险描述：多余的备份文件可能会泄露重要的信息测试过程：利用目录枚举工具例如：dirbuster、御剑后台扫描等当枚举结果存在bak、rar、sql等敏感文件可以访问证明存在敏感文件。 风险分析：检测到敏感的备份文件、临时文件，可能导致旧的程序漏洞被利用加固建议：请勿将文件的备份文件放置在Web服务器的根目录下，当站点更新时，请将文件删除或者移动到虚拟目录以外的目录，确保在虚拟目录下只有实际在使用的文件 7.5 存在测试界面风险名称：存在测试界面风险级别：低风险风险描述：有时开发者会忘记从生产环境中除去某些调试或测试页面。这些页面有可能包括 Web 用户所不应访问的敏感信息。它们也可能易受到攻击，且或有助于攻击者获取服务器的相关信息，以帮助进行攻击测试过程：通过目录扫描软件，会发现一些test.txt等测试存留文件 风险分析：攻击者可能会利用测试界面对网站进行攻击从而导致网站的资源受到窃取或者破坏加固建议：删除网站中的测试界面数据以及临时文件 7.6 存在WEB默认首页风险名称：存在Web默认界面风险级别：低风险风险描述：未配置首页信息，导致Apache存在默认首页，可能是恶意攻击者进行近一步攻击测试过程：通过目录扫描发现存在的默认首页例如一个nginx安装成功的默认首页： 风险分析：攻击者可以通过此风险来获取Web中间件级版本信息，根据已有漏洞进行攻击加固建议：建议删除默认首页，配置自定义首页信息 7.7 服务器端口开放过多风险名称：服务器端口开放过多风险级别：中风险风险描述：该服务器开放过多的端口，导致一旦出现新的系统漏洞或者蠕虫病毒，可能导致服务器被入侵，存在安全隐患测试过程：通常互联网系统应只开放80 http和443 https两种端口互联网最有可能开放的10个TCP端口。80 (http)23 (telnet)22 (ssh)443 (https)3389 (ms-term-serv)445 (microsoft-ds)139 (netbios-ssn)21 (ftp)135 (msrpc)25 (smtp)最有可能开放的10个UDP端口。137 (netbios-ns)161 (snmp)1434 (ms-sql-m)123 (ntp)138 (netbios-dgm)445 (microsoft-ds)135 (msrpc)67 (dhcps)139 (netbios-ssn)53 (domain)风险分析：服务器都开放很多端口，导致一旦出现新的系统漏洞或者蠕虫病毒，可能会导致服务器被入侵，有安全隐患加固建议：架设硬件防火墙，将端口隐藏在内网，或者对服务器进行加固，将一些不需要使用的端口关闭 7.8 HP Management服务器系统管理口开放风险名称：HP Management服务器系统管理口开放风险级别：中风险风险描述：HP Management提供对服务器的远程系统管理支持，管理员可以通过此接口对服务器进行系统状态查看，远程控制等功能测试过程：通过端口扫描发现开放的管理端口 风险分析：此接口的登录接口为HTTPS，通过Web进行访问，开放管理接口的同时将面临登录口令被暴力探测的风险，若猜测成功，攻击者将拥有该主机的控制权加固建议：评估是否有必要开放HP Management远程管理接口，建议将端口进行关闭 7.9 管理控制台对外开放风险名称：管理控制台对外开放风险级别：中风险风险描述：服务器管理控制台界面开放，可能容易被猜解到，导致攻击者可以暴力破解帐号密码或利用进行下一步攻击测试过程：例如tomcat管理后台地址是8080端口 风险分析：恶意攻击者可对网站后台管理界面进行暴力破解等一系列攻击，可能对导致网站数据泄露等危害加固建议： 管理后台的服务绑定到内网IP上，禁止开放在外网。 如果该管理后台必须提供给外网访问，则未登录页面不要显示过多内容，防止敏感信息泄漏，登录帐号需经过认证，且密码设置规则尽量复杂，增加验证码，以防止暴力破解 7.10 WebLogic管理界面开放风险名称：WebLogic管理界面开放风险级别：高风险风险描述：WebLogic服务器默认安装后，为管理员提供了Web方式的管理入口，如果没有限制，任何人都可以访问到管理页面，可能导致管理员口令被暴力破解测试过程：通过端口扫描通常管理界面开放在7001端口 风险分析：在公网开放WebLigic管理接口可能遭受恶意攻击者的暴力口令猜测攻击；WebLigic后台的管理权限较大，可直接对操作系统进行修改、执行命令等操作，因此一旦管理入口被突破，将给系统本身带来较大危害，并影响其他服务器安全加固建议：1、更改WebLogic默认管理口令（weblogic/weblogic），建议设置复杂的不易猜测的目录名。同时建议帐号不要使用通用的admin、root等。给猜测带来更大的复杂性。使用强壮的口令策略2、建议将业务系统访问端口与WebLogic管理接口进行分离3、对WebLogic管理接口配置访问控制，使外网普通用户无法直接访问。或对外关闭管理接口 7.11 启用OPTIONS方法风险名称：启用OPTIONS方法风险级别：低风险风险描述：WEB服务器配置允许一个（或多个）HTTP方法，这些方法可能表示在服务器上启用了WebDAV，可能允许未授权的用户对其进行利用测试过程：利用HTTP的OPTIONS请求访问系统，若系统返回HTTP请求方法信息证明OPTIONS方法开启。 风险分析：攻击者可能会在WEB服务器上载、修改或删除WEB页面、脚本和文件加固建议：如果服务器不需要支持WebDAV，请务必禁用它，或禁止不必要的HTTP方法 7.12 不安全的HTTP请求方法风险名称：不安全的HTTP请求方法风险级别：中风险风险描述：Web服务器开启了不必要的方法，如DELETE，PUT等方法，可能导致恶意用户破坏服务器资源测试过程：利用HTTP的OPTIONS请求访问系统，通过返回的内容知道开启的方法。 风险分析：可能导致信息泄漏，跨站脚本漏洞，文件上传等风险加固建议：如非必要，仅启用GET和POST方法 7.13 启用ASP.NET调试风险名称：启用ASP.NET调试风险级别：低风险风险描述：可能会收集有关 Web 应用程序的敏感信息，如用户名、密码、或敏感文件位置测试过程：利用HTTP的DEBUGS请求访问系统，通过返回的内容收集敏感的信息。 风险分析：Microsoft ASP.NET 很容易受到信息泄露攻击。攻击者可以发送一个通知是否支持调试支持的恶意请求。攻击者可以利用 DEBUG 动词来发送恶意请求加固建议：在 ASP.NET 中禁用调试，编辑 web.config 文件，使它含有下列属性： 7.14 启用TRACE方法风险名称：启用TRACE方法风险级别：低风险风险描述：在此Web服务器上启用HTTP TRACE方法。在Web浏览器中存在其他跨域漏洞的情况下，可以从支持HTTP TRACE方法的任何域读取敏感的标头信息测试过程：利用trace方法访问系统 Trace被禁用 风险分析：攻击者可以通过TRACE方法返回的信息了解到网站前端的某些信息也可以进行XSS攻击，盗取会话Cookie、获取账户、模拟其他用户身份，甚至可篡改网页，即使网站对关键页面启用了HttpOnly头标记，禁止脚本读取Cookie信息时，通过使用TRACE方法，攻击者可以绕过这个限制，读取Cookie信息加固建议：禁用 Web 服务器的TRACE方法 7.15 Slow HTTP Dos 慢速拒绝服务攻击风险名称：Slow HTTP Dos 慢速拒绝服务攻击风险级别：中风险风险描述：存在HTTP慢速拒绝服务攻击风险（Slow HTTP Denial of Service Attack），可造成服务器被拒绝服务攻击测试过程：利用慢攻击工具slowhttptest对可能存在的风险的服务器发起测试攻击 风险分析：Web服务器很容易受到慢HTTP DOS（拒绝服务）攻击，一个HTTP请求是不完整的，或者转移率很低，服务器把资源忙等待其余的数据。如果服务器保存资源太多忙，这创造了一个拒绝服务加固建议：修改中间件配置，设置会话超时时间，设置最少入站传输速率 7.16 缺少“Content-Security-Policy”头风险名称：缺少“Content-Security-Policy”头风险级别：低风险风险描述：“Content-Security-Policy”头主要是定义页面可以加载哪些资源，减少XSS的风险，缺少则可能会被恶意攻击者加载恶意信息，对网站造成损失测试过程：查看response头信息：若配置了在头信息中会有 Content-Security-Policy信息 风险分析：缺少“Content-Security-Policy”头可能会让恶意用户在页面上加载一个恶意的信息，以导致用户信息，网站信息泄露的风险加固建议：启用“Content-Security-Policy”头 7.17 缺少“X-XSS-Protection”头风险名称：缺少“X-XSS-Protection”头风险级别：低风险风险描述：虽说主流浏览器存在XSS的保护机制，但是效果不太完美，关闭此选项可能会造成XSS攻击的风险测试过程：查看response头信息：若配置了在头信息中会有X-XSS-Protection信息 风险分析：缺少“X-XSS-Protection”头，可能会加大攻击者利用XSS对网站进行攻击，可能会导致不必要的损失加固建议：启用“X-XSS-Protection”头 7.18 缺少“X-Content-Type-Options”头风险名称：缺少“X-Content-Type-Options”头风险级别：低风险风险描述：互联网上的资源有各种类型，通常浏览器会根据响应头的Content-Type字段来分辨它们的类型，然而，有些资源的Content-Type是错的或者未定义。这时，某些浏览器会启用MIME-sniffing来猜测该资源的类型，解析内容并执行测试过程：查看response头信息：若配置了在头信息中会有X-Content-Type-Options信息 风险分析：缺少“X-Content-Type-Options”头可能会造成恶意用户上传恶意文件，危害网站的安全加固建议：启用“X-Content-Type-Options”头 7.19 X-Frame-Options未配置风险名称：X-Frame-Options未配置风险级别：低风险风险描述：HTTP 响应头信息中的X-Frame-Options，可以指示浏览器是否应该加载一个 iframe 中的页面。如果服务器响应头信息中没有X-Frame-Options，则该网站存在ClickJacking攻击风险测试过程：查看response头信息： 风险分析：如果服务器响应头信息中没有X-Frame-Options，则该网站存在ClickJacking攻击风险，网站可以通过设置 X-Frame-Options 阻止站点内的页面被其他页面嵌入从而防止点击劫持加固建议：修改web服务器配置，添加X-Frame-Options响应头。赋值有如下三种：1、DENY：不能被嵌入到任何iframe或者frame中。2、SAMEORIGIN:页面只能被本站页面嵌入到iframe或者frame中。3、ALLOW-FROM url：只能被嵌入到指定域名的框架中。例如：apache可配置http.conf如下： Header always append X-Frame-Options “DENY” 7.20 启用自动完成的密码类型输入风险名称：启用自动完成的密码类型输入风险级别：低风险风险描述：当一个新的用户名和密码输入表单式，并提交表单时，浏览器会询问如果密码是否保存。此后显示表单时，用户名和密码将自动填充或完成的输入用户名。具有本地访问权限的攻击者可以获取从浏览器缓存中的明文密码测试过程：登陆失败后，系统返回登陆界面时，账号密码已经自动填充。风险分析：登录框未限制历史信息隐藏，可能会造成信息泄露的风险加固建议：密码自动完成填充应在敏感的应用中被禁用。 要禁用自动完成功能，您可以使用类似代码：&lt;INPUT TYPE=”密码”AUTOCOMPLETE=”关闭” &amp;gt 7.21 Banner信息泄露风险名称：Banner信息泄露风险级别：低风险风险描述：服务器Response信息中泄露了服务器组件等信息测试过程：查看response信息 风险分析：若攻击者获知服务器组件等信息及版本信息，会使下一步的攻击和漏洞测试提供便利加固建议：建议屏蔽或简单显示此类信息 7.22 长密码拒绝服务攻击风险名称：长密码拒绝服务攻击风险级别：中风险风险描述：未对密码输入长度做有效限制，存在密码长度过长，服务端处理消耗大量资源，可造成服务器被拒绝服务攻击测试过程：在密码栏输入超长密码字符并提交，提交后服务器无法访问。风险分析：当攻击者输入密码长度达到服务端处理极限，或者连续发送长密码请求，导致服务端处理时资源耗尽，产生拒绝服务加固建议：限制有效密码输入长度 7.23 编辑器漏洞风险名称：编辑器漏洞风险级别：高风险风险描述：Ewebeditor，fckeditor，kindeditor，southidceditor，cfeditor等很多浏览器本身包含漏洞，可导致恶意攻击者进行目录遍历，webshell上传等，从而窃取服务器信息或者获取目标服务器权限测试过程：利用用目录枚举工具例如：dirbuster、御剑后台扫描等工具确认编辑器地址枚举后可尝试历遍、上传等操作。风险分析：可通过编辑器漏洞窃取服务器敏感信息或者获取到服务器权限加固建议：1.更新编辑器至最新版本2.修改编辑器默认管理后台访问权限3.修改编辑器默认管理界面，口令4.更多编辑器漏洞介绍请查看以下网址：编辑器漏洞手册 - 血梦博客 - 专注于网络安全|黑客学习|渗透测试|代码审计|国内最专业的黑客技术博客 八、框架漏洞8.1 Struts2代码执行漏洞风险名称：Struts2代码执行漏洞风险级别：高风险风险描述：Struts2是一个基于MVC设计模式的Web应用框架，当Apache Struts2开了其动态方法Dynamic Method Invocation,会允许远程的攻击者使用method:前缀执行任意构造的链式ONGL，影响版本如下：&lt;2.3.20.2，2.3.24.0-2.3.24.2，2.3.28.0-2.3.28.1&gt;测试过程：使用专用POC检测工具进行测试扫描。不同版本的漏洞位置不一样，需要自行下载测试工具。风险分析：攻击者可利用该漏洞执行任意命令如写入后门、上传木马等进而完全控制服务器，盗取网站数据加固建议：升级Struts2到最新版本，下载地址http://struts.apache.org/ 8.2 jBoss远程执行漏洞风险名称：jBoss远程执行漏洞风险级别：高风险风险描述：jBoss默认配置会有一个后台漏洞，漏洞函数为addURL()，会远程下载一个war压缩包并解压访问后台，通过写入war压缩文件webshell的url地址，从而获得webshell获得服务器的权限测试过程：使用专用POC检测工具进行测试扫描。不同版本的漏洞位置不一样，需要自行下载测试工具。风险分析：远程执行下在一个包含恶意文件的war文件，从而获得服务器权限加固建议：1.在 ${jboss.server.home.dir}/deploy下面找到jmx-console.war目录编辑WEB-INF/web.xml文件 去掉 security-constraint 块的注释，使其起作用2.编辑WEB-INF/jboss-web.xml去掉 security-domain 块的注释 ，security-domain值的映射文件为 login-config.xml3.编辑WEB-INF/classes/jmx-console-users.properties添加用户名密码 8.3 Thinkphp命令执行风险名称：ThinkPHP命令执行漏洞风险级别：高风险风险描述：ThinkPHP是国内使用比较广泛的一款老牌PHPMVC框架，Think主要问题在于Dispatcher.class.php文件，文件中把pathinfo作为restful类型URL进行解析的，主要作用是把pathinfo中的数据解析并合并到$_GET数组中。在用正则解析pathinfo的时候$var[‘\\1’]=\\2” 又是双引号，而双引号中的php变量语法能够被解析，所以造成了任意代码执行漏洞。测试过程：使用专用POC检测工具进行测试扫描。不同版本的漏洞位置不一样，需要自行下载测试工具。风险分析：攻击者可利用该漏洞执行任意命令如写入后门、上传木马等进而完全控制服务器，盗取网站数据加固建议： 升级ThinkPHP到最新版本。 框架下载 - ThinkPHP框架 将$var[‘\\1’]=\\2” 双引号改写成单引号 8.4 Spring MVC 命令执行漏洞风险名称：Spring MVC 命令执行漏洞（CVE-2010-1622）风险级别：高风险风险描述：由于Spring框架允许使用客户端所提供的数据来更新对象，而这以机制允许攻击者修改class.classloader加载对象的类加载器属性，这可能导致执行任意命令测试过程：使用专用POC检测工具进行测试扫描。不同版本的漏洞位置不一样，需要自行下载测试工具。风险分析：这个漏洞将直接危害到使用Spring MVC框架的网站加固建议：升级 Spring 到最新版本。 http://spring.io/ 8.5 Django命令执行漏洞风险名称：Django命令执行漏洞风险级别：高风险风险描述：Django0.95版本存在命令执行漏洞，攻击者就可以构造出包含有恶意代码的序列化字串，将其传递给服务器，服务器在解析即反序列化会话的同时，就有可能导致任意命令执行测试过程：使用专用POC检测工具进行测试扫描。不同版本的漏洞位置不一样，需要自行下载测试工具。风险分析：服务器在解析即反序列化会话时，有可能导致任意命令执行加固建议：升级Django 到最新版本。Download Django | Django 8.6 Java反序列化任意命令执行漏洞风险名称：Java反序列化任意命令执行漏洞风险级别：高风险风险描述：Weblogic Java反序列化可导致任意命令执行测试过程：使用专用POC检测工具进行测试扫描。不同版本的漏洞位置不一样，需要自行下载测试工具。不同版本的漏洞位置不一样，需要自行下载测试工具。风险分析：攻击者利用此漏洞可直接威胁服务器安全，高级别的攻击，会造成严重影响加固建议：建议尽快升级Weblogic版本，下载最新补丁，及时更新 九、服务漏洞9.1 IIS写文件漏洞风险名称：IIS写文件漏洞风险级别：高风险风险描述：恶意攻击者可以向该目录写入文件，通过HTTP协议的PUT方法，向该目录写入文件或以指定的内容覆盖当前目录下的现有文件测试过程：第一步，通过OPTIONS探测服务器所支持的HTTP方法，（这里决定后面能不能操作）第二步，通过PUT方法向服务器上传脚本文件第三步，通过Move或Copy方法改名风险分析：可能会被上传带有后门的恶意程序，从而获取到对服务器的控制权，从而造成数据丢失或者系统损坏等加固建议：禁用WebDAV功能，或者关闭不安全的HTTP方法 9.2 IIS解析漏洞风险名称：IIS解析漏洞风险级别：高风险风险描述：当建立*.asa、*.asp格式的文件夹时，其目录下的任意文件都将被IIS当作ASP文件来解析。2.当文件为*.asp;1.jpg时，IIS6.0同样会以ASP脚本来执行测试过程：Iis、apach、php分别有不同的测试方法，详情可参考： https://blog.csdn.net/hitwangpeng/article/details/46913957 险分析 IIS6.0解析文件时，存在两个解析漏洞，攻击者可利用解析漏洞获取webshell加固建议：升级IIS版本，对上传进行过滤 9.3 Apache解析漏洞风险名称：Apache解析漏洞风险级别：高风险风险描述：Apache在解析文件时当遇到无法识别的扩展名时，将会从后向前解析，直到遇到识别的扩展名为止测试过程：Iis、apach、php分别有不同的测试方法，详情可参考：当apache 容器碰到不认识的扩展名时，将会从后面向前解析，直到碰到认识的扩展名为止，如果都不认识，则会暴露其源代码。这种方法可以绕过基于黑名单的检查。 Apache认识的扩展名保存在安装目录下”/conf/mime.types”文件中。风险分析：如果开发人员在控制上传文件是，判断文件名是否是PHP、ASP、ASPX、ASA、CER、ASPX等脚本扩展名，如果是，则不允许上传，这是攻击者就有可能上传1.php.rar等扩展名来绕过程序检测，配合解析漏洞，或得webshell加固建议： 版本升级 使用白盒测试对上传做控制 9.4 CGI路径解析漏洞风险名称：CGI路径解析漏洞风险级别：高风险风险描述：在使用Nginx作为web server时，一般使用fastcgi的方式调用脚本解释器，当访问一个不存在的文件时，会解析上级路径文件测试过程：在PHP的配置文件中有一个关键的选项cgi.fix_pathinfo在本机中位于C:\\wamp\\bin\\php\\php5.3.10\\php.ini，默认是开启的，当URL中有不存在的文件，PHP就会向前递归解析风险分析：通过上传一张包含恶意代码的文件，使用fastcgi方式调用脚本编辑器，构造攻击，从而导致包含恶意代码的文件执行加固建议：将配置文件中的cgi.fix_pathinfo设置为0 –EOF– 转载：https://www.cnblogs.com/H4ck3R-XiX/p/12549614.html","categories":[{"name":"网络安全","slug":"网络安全","permalink":"http://www.lvhejin.cn/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"漏洞","slug":"漏洞","permalink":"http://www.lvhejin.cn/tags/%E6%BC%8F%E6%B4%9E/"}]},{"title":"安全工具集","slug":"网络安全/安全工具集","date":"2022-11-21T14:16:53.000Z","updated":"2024-01-05T17:32:17.655Z","comments":true,"path":"2022/11/21/网络安全/安全工具集/index.html","link":"","permalink":"http://www.lvhejin.cn/2022/11/21/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7%E9%9B%86/index.html","excerpt":"","text":"每天花几个小时寻找新的安全工具， 按照我个人理解对它们进行简单分类。 希望这可以帮助大家了解以前从未见过的工具， 95％的工具都可以在Github上找到。 非常感谢这些开源工具的作者。 ├───AD│ ├───ACL-Persistence-Abuse│ ├───ACLPwn│ ├───ACL_PWN│ ├───ActiveDirectorySchemaUpdateReport│ ├───ActiveDirectoryServices│ ├───ADACLs_Read│ ├───ADAPE│ ├───ADAudit│ ├───ADAuditChecklist│ ├───ADCheckScript_Trimarc│ ├───ADCollector│ ├───AddLinuxMachineToDomain│ ├───ADLab│ ├───ADpwn│ ├───ADRecon│ ├───ADReconPowershell│ ├───ADSearch│ ├───ADSecrets│ ├───AD_DomainSwevices_Script│ ├───AD_LDAP_Enum│ ├───AsRepRoast│ ├───AttackCheatSheet│ ├───Auditscript│ ├───Awesomeness│ ├───Bloodhound│ ├───BloodHoundPython│ ├───ClearCachedCredentials│ ├───CrackMapExec│ ├───DJoin│ ├───DOCS│ ├───DomainEnumWithJavascript│ ├───DomainPasswordAuditToolDPAD│ ├───DSInternals│ ├───DumpDNS│ ├───ExploitIncomingForestTrustBuilder│ ├───FindPasswordNotRequired│ ├───FIndWhoJoinedMachineToDomain│ ├───Get-ADACL│ ├───Get-GPTrashFire│ ├───GetVulnerableGPO│ ├───GrantModifySPN│ ├───Grouper│ ├───Grouper2│ ├───InterestingRestore│ ├───JoinLinuxToAD│ ├───LDAP│ │ ├───DomainPasswordSpray│ │ ├───LDAPDomainDump│ │ └───msldap│ ├───LDAPper│ ├───LDAP_NullBind│ ├───LDAP_Search│ ├───ListDomains│ ├───ListDomainsInAForest│ ├───LoopThroughAllDomains│ ├───MachineAccounts│ ├───ManagingActiveDirectoryGroupsfromLinux│ ├───PrivEsc│ ├───pyGPOAbuse│ ├───PythonEnumerateUsers│ ├───QueryClearTextLDAPBinds│ ├───RBCD│ ├───Recon-AD│ ├───SharpAdidnsdump│ ├───SharpGPOAbuse│ ├───SharpHound│ ├───SharpHound3│ └───WinLDAPSearch├───AlternativeDataStreams│ ├───ClearADS│ ├───Execute-ADS│ ├───GeneralCommands│ ├───Get-Ads│ └───Sample├───ApplicationShimming│ └───Windows ADK for Windows 10├───ARP│ ├───EavesARP│ └───SwissLogger├───AtomicRedTeam├───AutoCad├───AutoIT├───Bash├───BDFProxy├───BinaryDiffingTools│ ├───BeyondCompare│ ├───BinDiff│ ├───DarunGrim4│ └───Diaphora├───BinarySecretExtraction│ └───minitools_BinExtractor├───Bitlocker│ └───Docs├───BruteForce│ ├───ADExample│ ├───Blazy│ ├───BruteZip│ ├───DomainPasswordSpray│ ├───Openssl-bruteforce│ ├───PSBruteZip│ ├───SharpHose│ ├───SMBBrute│ ├───SMBLogin_ps1│ ├───THC-hydra-Windows│ ├───Win-Brute-Force│ ├───WinRM_Brute│ └───ZipCracker├───BufferOverflow│ └───EggHunter├───BugBountyCheatSheet├───Burp│ ├───BurpIntruderFileDownloadet│ ├───ContentDiscovery│ ├───IpRotate│ └───Shelling├───Bypass│ ├───AMSI│ │ ├───Amsi-Bypass-Powershell│ │ ├───AMSIBypass.VBA│ │ ├───AmsiBypassMath_notWorking│ │ ├───AmsiScanBufferBypass│ │ ├───AmsiScanBypass│ │ ├───AMSITrigger│ │ ├───AMSITriggerv2│ │ ├───Amsi_bypass_ContextSecurity_WORKS│ │ ├───AMSI_Handler│ │ ├───AMSI_OrdinalBypass│ │ ├───Another│ │ ├───Bypass-AMSI│ │ ├───Chimera│ │ ├───CLRGarbage│ │ ├───ConvertPowerShellToIntegers│ │ ├───CorruptCLRGlobal│ │ ├───DaveKennedy│ │ ├───EnumProdModules│ │ ├───GadgetToJscript│ │ ├───HeapsOfFun│ │ ├───InterestingBypass│ │ ├───Invoke-Obfuscation│ │ ├───MattAmsi│ │ ├───ModifiedAmsiBypass│ │ ├───NoAmci│ │ ├───NullCharacter│ │ ├───ObfuscatedBypassAmsi│ │ ├───PSAMSI│ │ ├───ResurrectingTheDead│ │ ├───SharpLocker│ │ ├───SimpleInjector│ │ ├───VBAFunctionPointers│ │ ├───WordAMSIBypass│ │ └───zc00lBypass_WorksGreat│ ├───AppLocker│ │ ├───Evasor│ │ ├───PowerAL│ │ ├───UltimateAppLockerBypassList│ │ └───WEvade│ ├───AppWhiteListing│ │ ├───CscriptShell│ │ ├───GreatSct│ │ └───SharpPack│ ├───ASLR_DEP│ │ └───PESecinfo│ ├───AutoRunsDetection│ ├───AV│ │ ├───Arno0x│ │ ├───AswCrypter│ │ ├───AVCleaner│ │ ├───AVET│ │ ├───CactusTorch│ │ ├───DarkArmour│ │ ├───DisableDefender│ │ ├───Docs│ │ ├───Full-payload-delivery-chain│ │ ├───GhostLoader│ │ ├───GhostShell│ │ ├───GreatSCT│ │ ├───HerculesPayloadGenerator│ │ ├───InceptionFramework│ │ ├───KmzExample│ │ ├───MsVenonCustomShellcodr│ │ ├───NetLoader│ │ ├───ObfuscateCactusTorch│ │ ├───OwaspZSC│ │ ├───PayloadSplitting│ │ ├───PyCloak│ │ ├───RunAssemblyContextOfWindowsScriptHosts│ │ ├───Shellter│ │ ├───Symantec│ │ ├───SystemCallsFromVisuslStudio│ │ ├───TikiTorch│ │ ├───UnsureWhatThisIs│ │ ├───VBA-RunPE│ │ ├───VeilEvasion│ │ └───WithMSBuildAndShellCode│ ├───Bitlocker│ │ └───BitLeaker│ ├───BuildWithPowershell│ ├───CarbonBlack│ ├───CmdRestriction│ ├───COM│ ├───ConstrainedLanguageMode│ │ ├───CLMBypassBlogpost│ │ └───PSBypassCLM│ ├───CredentialGuard│ │ └───BypassCredGuard│ ├───Cylance│ ├───Defender│ │ ├───DefenderCheck│ │ └───Fixing_Some_DOTNET_Tradecraft│ ├───DeviceGuard│ │ └───DeviceGuardBypasses│ ├───DownloadAndExwcuteIdeas│ ├───EDR│ │ ├───1ByteTrick│ │ ├───Alaris│ │ ├───Amber│ │ ├───AntiHook│ │ ├───CreateRemoteThreadShellcodeInjection│ │ ├───CSharpSetThreadContext│ │ ├───Cylance│ │ ├───FireWalker│ │ ├───Go-Shellcode│ │ ├───ModuleStomping│ │ ├───NetLoader│ │ │ └───Arn0xVersion│ │ ├───New folder│ │ ├───Nps_Payload│ │ ├───NtdllUnpatcher│ │ ├───ProcessHollowing│ │ ├───SharpBlock│ │ ├───SharpCall│ │ ├───SyscallsDirectlyVisualStudioBypassEDRs│ │ ├───SysWhispers│ │ ├───UnhookAPI│ │ ├───WithINF│ │ └───ZombieAnt│ ├───ETW│ │ ├───Another thing to try│ │ │ └───WITHDisableETW_WOOT!│ │ │ └───SpoofEnvironemntVariable│ │ ├───BypassETWandAMSI│ │ ├───KillETW│ │ └───odzhan_etw│ ├───Firewall│ │ ├───BlueWall│ │ └───Firefox_Tunnell│ ├───Hardening│ ├───Logs│ │ └───Log-killer│ ├───LSAProtection│ │ └───PPLKiller│ ├───MemoryScanning│ │ └───Gargoyles│ ├───MoveFilesFreelyIdea│ ├───NAC│ │ └───DelosCloak│ ├───NetworkRestrictions│ │ └───BypassingNetworkRestrictionsThroughRDPTunneling│ ├───PowerShellBypass_Evasion│ ├───Proxy│ │ ├───GimmeTheFile│ │ └───Reqrypt│ ├───ReverseEngineering│ │ └───CodeProject│ ├───Sysmon│ │ └───MuteSysmonCS│ ├───UAC│ │ ├───20200310│ │ ├───ALPC-BypassUAC│ │ ├───CSharpPlaintext│ │ ├───DLLHijackUACBypass│ │ ├───From0x0x│ │ ├───New folder│ │ ├───PythonUac│ │ ├───SharpFodhelperBypass│ │ ├───SilentCleanup│ │ ├───T1191-CMSTP│ │ ├───TrustJack│ │ ├───UAC-Bypass│ │ ├───UACBypassInTheWild│ │ ├───UACMe│ │ ├───UAC_bypass_windows_store│ │ ├───WinPwnage│ │ └───WithFolderTrickery│ ├───UEFISecureBoot│ │ └───UsbImages│ ├───WAF│ │ ├───Abuse-ssl-bypass-waf│ │ ├───Awesome-WAF│ │ ├───DNSHistoryWAFBypass│ │ ├───IdentYwaf│ │ ├───WafNinja│ │ ├───Waftester│ │ ├───Wafw00f│ │ └───WhatWAF│ └───WindowsDefender│ ├───AnotherDisableDefender│ │ └───Doh_TrustedInstaller│ └───Disable├───C++│ ├───Netstat│ ├───ScreenShot│ ├───SpoofParentProcess│ ├───TaskKill│ └───WindowsSessions├───C2│ ├───BackdoorPythonAttack│ ├───BetterBackdoor│ ├───BindShellBypassHostFirewallwithSMB│ ├───ChaShell│ ├───CobaltStrike│ ├───Covenant│ ├───CrossC2│ ├───Cs2modrewrite│ ├───DDoor│ ├───Diagon│ ├───DnsCat2│ ├───Dnscat2-powershell│ ├───DnsShell│ ├───DockerDBC2│ ├───DockerDNSCat│ ├───DOHC2│ ├───dropboxC2_DBC2│ ├───EggShell│ ├───EvilReg│ ├───External_c2_framework│ ├───FTPdotNet│ ├───FudgeC2│ ├───GCat│ ├───Gorsh│ ├───GRAT2_C2│ ├───HRShell_httpShell│ ├───HTTP Asynchronous Reverse Shell│ ├───ICMPSH│ ├───icmpsh-s-linux│ ├───ICMPTunnel│ ├───ICMP_Tunnel_Python│ ├───Invoke-PipeShell│ ├───Koadic│ ├───LDAPFragger│ ├───LOLBITS│ ├───MacSwiftShell│ ├───Merlin│ ├───Microsoft_Remote│ ├───MuddyC3│ ├───Ninja│ ├───Nuages│ ├───Octopus│ ├───OneLogicalMyth_Shell│ ├───Ping-Pwn│ ├───Pivotnacci│ ├───PoshC2│ ├───PowerCat│ ├───PowerHub│ ├───PowershellExample│ ├───Prismatica│ ├───Pupy│ ├───PwnCat│ ├───RedPeanut│ ├───RemoteRecon│ ├───ReUseExistingConnectionOneWayStager│ ├───ReverseShellGen│ ├───ReverseTCPEncrptedPowershell│ ├───ReverseTCPShellFramework│ ├───RevP_ReverseProxy│ ├───RSH│ ├───SharpC2│ ├───SharpOffensiveShell│ ├───SharpSocks│ ├───SharpSocksV2│ ├───SharPyShell│ ├───SilentTrinity│ ├───Slackor│ ├───SocksOverRDP│ ├───SQLC2│ ├───SSF_SecureSocketFunneling│ ├───Throwback│ ├───ThunderShell│ ├───TinkerShell│ ├───Tiny-SHell│ ├───TrevorC2│ ├───Tunna│ ├───Udp2Raw│ ├───UndetectableCSharpShell│ ├───Websocat│ ├───Websocket-Smuggle│ ├───WebSocketC2│ ├───WheresMyImplant│ ├───WinSpy│ └───XFLTreat├───Calculator│ └───popCalc├───Cars│ ├───CANalyzator│ └───CanZator├───Certificates│ ├───BaseLine│ ├───CarbonCopy│ ├───CertCheck│ ├───CertExp│ ├───Concerto│ └───MkCert├───ChangeFileHash├───CharacterFrequncyAnalysis├───CheetSheets│ └───Docker├───Chrome│ ├───ChromiumIPCSniffer│ ├───CursedChrome│ └───install├───Ciphey├───CIRCL_AIL_Framework├───Cisco│ ├───CCat├───Citrix│ ├───BreakOutOfCitrix│ ├───citrix-ica-password│ ├───CTX_ICA_Citrix_Password│ ├───CVE-2020-8207│ ├───NetscalerConfigDecrption│ ├───SocksOverRDP│ └───SystemShellsWithCitrix├───Cloud│ ├───AWS│ │ ├───AAIA│ │ ├───AWS Security Tools│ │ ├───Awspx│ │ ├───AWS_CLI│ │ ├───Barq│ │ ├───BucketFinder│ │ ├───Bucky│ │ ├───Cloudsplaining│ │ ├───Cognito│ │ ├───Enumerate IAM permissions│ │ ├───FireProx│ │ ├───MasS3│ │ ├───MetaDataService│ │ ├───Nimbostratus│ │ ├───OpenBucket│ │ ├───Pacu│ │ ├───PowershelleryS3Finder│ │ ├───RedDolphin│ │ ├───s3Monster│ │ ├───S3Scanner│ │ ├───s3tk│ │ ├───S3_Basic_SecurityTest│ │ ├───ShaggyRodgers│ │ └───TakeFullControl│ ├───AWS_and_AZURE│ ├───Azure│ │ ├───Administration│ │ ├───Azure AD Connect password extraction│ │ ├───AzureADRecon│ │ ├───DOCS│ │ ├───DumpADDOmainInfo│ │ ├───DumpKeyvaultDevOps│ │ ├───Get-AzurePasswords│ │ ├───GetAccessTokenFromAzureConnect│ │ ├───Microburst│ │ ├───Moving laterally between Azure AD joined machines│ │ ├───PasswordResetPrivs│ │ ├───Powershell│ │ ├───Powerzure│ │ ├───RoadTools│ │ ├───ScoutSuite│ │ ├───SecureLab│ │ └───StormSpotter│ ├───BeauBullock_CloudPentestCheatsheets│ ├───CloudBunny│ ├───CloudFlare│ │ └───CloudUnflare│ ├───Google│ │ └───BruteBucket│ └───NEAT├───CMS│ ├───CMSeek│ ├───CMSMap│ ├───JenikinsPillage│ ├───malicious-wordpress-plugin│ ├───NekoBotV1│ └───VulnX├───CobaltStrike│ └───SharpCompile├───CodeInjection│ ├───AtomBombing│ ├───Cave_miner│ ├───DNCI - Dot Net Code Injector│ ├───Gargoyle│ ├───GhostHook│ └───PROPagate├───ComHijacking│ ├───ComView│ ├───Docs│ ├───Enigma0x3_MessageBox│ ├───Invoke-PowerThIEf│ ├───OleView│ ├───OleViewDotNet│ └───PS1Jacker├───CommandoVM│ └───MetasploitWindowsInstall├───CommonPorts├───Compiling│ └───C++├───Containers│ ├───Docker│ │ ├───DockerPwn│ │ ├───Exegol│ │ ├───Gorsair│ │ ├───ListOfSecurityTools│ │ └───WhaleScan│ └───Trivy├───Conversion│ ├───Base64ConversionInVariousLanguages│ ├───Base64Dump│ ├───BaseCrack│ ├───Bin2Hex│ ├───ConvertFileToBase64String│ ├───ConvertFileToByteArrayString│ ├───ConvertGZIPAsciiFileToString│ ├───DLL_to_exe│ ├───DLL_to_ShellCode│ ├───DonutExeToShellcoce│ ├───DotNetToJScript│ ├───ExeToVBS│ ├───EXE_to_DLL│ ├───ExportFunctionsToDLL│ ├───Hexify│ ├───js-to-ts-converter│ ├───JSCallingCSharpDLL│ ├───LibPeConv│ ├───PenCode│ ├───PE_to_Shellcode│ ├───PowerCrypto│ ├───PS1-To-EXE-Generator│ ├───PS2exe│ ├───ReplaceInFilePreserveEncoding│ ├───sDRI_ConvertToShellcode│ ├───ShellcodeToJscript│ ├───shellconv│ ├───StringToBinaryAndBinaryToString│ └───UnmanagedExports├───CradleTest│ ├───BLueCradleTest│ └───CradleTest├───CredentialDumping│ ├───3Snake│ ├───ADStuff│ ├───AndrewSpecial│ ├───AsRepRoast│ ├───ATPMinidump│ ├───Autoproc.py│ ├───Azure│ ├───AzureDumpDomainHashes│ ├───BadODF│ ├───BadPdf│ ├───BetterSafetyKatzs│ ├───BruteShark│ ├───BypassCredentialGuard│ ├───CaptureEdgeAndIECreds│ ├───CaptureHashesWithURLFile│ ├───ChainBreaker2│ ├───CheckLocalAdminHash│ ├───ChromePasswords│ ├───CloudCopy_DumpAWSDomainHashes│ ├───CMinidump│ ├───CompileFromBatch│ ├───Comsvcs│ ├───CookieMonster│ ├───Copy-VSS│ ├───Crackmapexec│ ├───CrackMapExecWinExe│ ├───CreateMiniDump│ ├───CreateMiniDumpCPP│ ├───Cred-Ninja│ ├───CredCatcher│ ├───Creddump│ ├───CredentialPhisher│ ├───CredentialReference│ ├───CredentialsFileView│ ├───CredKing│ ├───CredUIPrompt│ ├───CSharpClipboardWatcher│ ├───CSharpMimikatz│ ├───CsharpMinidump│ ├───CSharpPowershellCipboardWatcher│ ├───Damp│ ├───DCOM DCERPC Local NTLM Reflection Elevation of Privilege│ ├───DecryptTeamViewer│ ├───DecryptTFSSecretVariables│ ├───DetectPasswordViaNTLMinFlow│ ├───DisableDomainCachedCredentials│ ├───DNSniff│ ├───DOCS│ ├───DomainControlDump│ ├───DomainPasswordSpray│ ├───DSInternals│ ├───Dumpert│ ├───DumpingDomainPasswordHashes_PenTestLab│ ├───EFSFiles│ ├───EnableCipboardHistory│ ├───EternalRelax│ ├───Evil-SsDp│ ├───ExtractServiceCredentialsInVSTS│ ├───ExtractWindowsSSHKeys│ ├───FakeLogonScreen│ ├───FGDump│ ├───FindRiskySPNs│ ├───Flamingo│ ├───Get-ClearTextPasswords│ ├───Get-PasswordFile│ ├───Get-RemoteSam│ ├───GetCurrentUsersPassword│ ├───GetUserSPNs│ ├───GhostPotato│ ├───GoldenTicket│ ├───GrabDump│ ├───HPP_ MsvpPasswordValidate│ ├───IceBreaker│ ├───ICU│ ├───IIS│ ├───Impacket│ ├───ImpacketStandAloneWindowExes│ ├───ImpacketStaticBinaries│ ├───ImpDump│ ├───Internal-Monologue│ ├───InternalMonologueAttack│ ├───Inveigh│ ├───InveighZero│ ├───Invoke-AutoKerberoast│ ├───Invoke-CredentialPhish│ ├───Invoke-DCSync│ ├───Invoke-LoginPrompt│ ├───Invoke-TheHash│ ├───Invoke-TokenManipulation│ ├───Invoke-WCMDump│ ├───InvokeKerberoastHarmJoy│ ├───InvokePasswordAudit│ ├───InvokePasswordPrompt│ ├───JenkinsDecrypt│ ├───KeeThief│ ├───Kekeo│ ├───Kerberoasting│ ├───KerberoastingFromSetupToCracking│ ├───KerberoastNidem│ ├───KerberosCheatSheet│ ├───Kerbrute│ ├───KrbRelayx│ ├───LaZagne│ ├───LaZagneForensic│ ├───LDAPSearch│ ├───LSASecretsViewNirsoft│ ├───LSASecretsWithPowershell│ ├───LSASS│ ├───LSASSY│ ├───MailPasswordView│ ├───MakeMeEnterpriseAdmin│ ├───MicrosoftOffice NTLMHashesviaFrameset│ ├───Mimikatz│ │ ├───MimikatzDefense│ │ ├───Mimikatz_obfuscator│ │ ├───MorphedMimiKatzFromMetame│ │ ├───NovelJSMimikatzLoader│ │ ├───ObfuscationTechniques│ │ ├───PowershellDetectSkeletonKey│ │ ├───ResetKRBTGT_password_for_goldenTicketMitigation│ │ ├───Scripts│ │ │ └───ObfuscateMimikatz│ │ ├───UncoverDCShadow│ ├───MimikatzFromWebShell│ ├───MimikatzObfuscation│ ├───MimikatzOneLiner│ ├───MimikatzPowershell│ ├───Mimikittenz│ ├───MimiPenguin│ ├───MimiPenguin2│ ├───Mitm6│ ├───MS17-10_Scanner│ ├───MsCache│ ├───MyKatz│ ├───MyPresentation_SharpCatUsingHex│ ├───Net-creds│ ├───Net-GPPPassword│ ├───NetKatz│ ├───NetNTLMtoSilverTicket│ ├───NetRipper│ ├───NetworkMiner│ ├───Nishang│ ├───NpSpy_CaptureLogonPasswords│ ├───NTDSAudit│ ├───NTDSDumpEx│ ├───NTDSExtract│ ├───NTLMInjector_ChangePasswordWithHASH│ ├───NTLMRawUnhide│ ├───NtlmRelayToEWS│ ├───NTLMTheft│ ├───NTLM_FromRDPFiles│ ├───OnlinePasswordFinderLinks│ ├───Out-MiniDump│ ├───Outlook│ ├───p0wnedShell│ ├───PassTheCache│ ├───PasswordPopupPowershell│ ├───PasteHunter│ ├───PClippy│ ├───PCredz│ ├───Physmem2profit_DumpLSASS│ ├───PoshKatz│ ├───Powermad│ ├───PowerMemory│ ├───PowerOps│ ├───Powershellery_Get-SPN│ ├───PowershellPromptForOutlookCredentials│ ├───PoweshellMimikatz2│ ├───Practical Guide to Passing Kerberos Tickets From Linux│ ├───ProcDumpVBS│ ├───ProcSpy│ ├───PSClippy│ ├───PstPassword_NirSoft│ ├───PwnedOrNot│ ├───Pykek│ ├───PyKerberoastV2│ ├───PyKerberoastV3│ ├───PypyKatz│ ├───PyRDP│ ├───PysecDumpMimiAlternative│ ├───PythonKerberoast│ ├───RDPSpray│ ├───RDPThief│ ├───ReadPst│ ├───Recovering Plaintext Domain Credentials from WPA2 Enterprise on Compromised Host│ ├───RedSnarf│ ├───Relayer│ ├───RemoteRecon│ ├───ResetWindowsPassword│ ├───Responder│ ├───RIDHijacking│ ├───RouterPassViewNirsoft│ ├───Rubeus│ ├───RunAsTI_TrustedInstaller│ ├───SafetyDump│ ├───SafetyKatz│ ├───SearchFailedLogons│ ├───SeBackupPrivilege_│ ├───SessionGopher│ ├───ShareSearch│ ├───SharpChrome│ ├───SharpDPAPI│ ├───SharpDump│ ├───SharpInvoke-SMBExec│ ├───SharpKatz│ ├───SharpLocker│ ├───SharpMapExec│ ├───SharpMiniDump│ ├───Sharproast│ ├───SharpSecDump│ ├───SharpSniper│ ├───SharpWeb│ ├───ShowAccountLockout│ ├───SilverTicket│ ├───Simple.CredentialsManager│ ├───SMBBrute│ ├───SMBetray│ ├───Snaffler│ ├───SpoolSample│ ├───SprayingToolkit│ ├───SprayKatz│ ├───SqlDumper│ ├───SQLServerHashDumpWithDirTree│ ├───Sshkey-grab│ ├───SSSDKCMExtractor│ ├───StickyNotes│ ├───SubAuth│ ├───TestPassword│ ├───TimMedin│ ├───TimMedinKerberoast│ ├───UnconstrainedDelegation│ ├───UsbArmoryLanTurtle│ ├───VaultPasswordView│ ├───VSOWN│ ├───WebBrowserPassView_NIRSOFT│ ├───WifiPasswords│ ├───Window10Passwords│ ├───WindowsDebuggingTools│ ├───Worse-PDF│ ├───WPA2│ └───XPN_BecomingSystem├───CreditCard│ ├───HeapSurf│ ├───Luhn│ │ ├───LuhnForce│ │ └───LuhnPy│ └───MemScan├───Cryptography│ ├───Crypt0n│ └───PowerCrypto├───CscriptShell├───CSharpGeneral│ ├───AntiDebug│ ├───Bin2Hex│ ├───BindShell│ ├───Bleak│ ├───BlueScreenOnExit│ ├───BuildWithPowershell│ ├───BytecodeApi│ ├───CaptureDorNetEvents│ ├───ClrEvents_Memory│ ├───CompileInMemory│ ├───CoolInjection│ ├───CsharpDieHarder│ ├───CsharpEmpire│ ├───CSharpHellsGate│ ├───CsharpInjection│ ├───CSharpProcessInjection│ ├───CShell│ ├───CustomStager│ ├───DieHard│ ├───DotNetDeObfuscation│ ├───DotNetDeserializationScanner│ ├───DotNetOerDotNet│ ├───DotnetToJscript│ ├───ExecutePowershellInCSharp│ ├───File-Splitter│ ├───Find-DotNet-Assemblies│ ├───FindCredsSharpCloud│ ├───FTP│ ├───GetSEDebugPriviledge│ ├───GetSPNToken│ ├───Ghostpack csharp stuff│ ├───ILMerge│ ├───ILSpy│ ├───Install-AssemblyIntoGAC│ ├───Interesting│ ├───LDAPADLogin│ ├───LongFilePathSupport│ ├───ManaGer_LoadingCodeFromUnmanagedCodeinDorNET│ ├───NewShellWhoDis│ ├───Noisette_The nuts-breakerCSharpObfuscator│ ├───NoPowerShell│ ├───OffensiveCSharp│ ├───OleViewDotNet│ ├───PortScanner│ ├───PowershellInCSharp│ ├───ProtectProcessFromJoeUser│ ├───RemoteRegisterDllPSEXEC│ ├───RunAs│ ├───SafetyKatz│ ├───SelfContainedCSharpCode│ ├───SendKeysToCMD│ ├───Sharp-InvokeSmbExec│ ├───Sharp-invokeWmiExec│ ├───Sharp-Suite│ ├───SharpAdidnsdump│ ├───SharpAllowedToAct│ ├───SharpCradle│ ├───SharpDPAPI│ ├───SharpDump│ ├───SharpExec│ ├───SharpFruit│ ├───SharpPCAP│ ├───SharpProcEnum│ ├───SharpShell│ ├───SharpShot│ ├───SharpSpray│ ├───SingleFileEXE_core│ ├───TaskAwait│ ├───TimingOutAFunctionCall│ ├───TokenImpersonation│ ├───UnmanagedPowershell│ ├───VigenereSolver│ ├───WheresMyImplant│ ├───WhoDis│ ├───WidgetSender_IntentionalyVulnerableDotNetMVC│ ├───WindowsC#RPCClients│ ├───WinPwn│ ├───WinXRunPEx86x64│ ├───WMIProcessWatcher│ ├───WritingPenTestToolsForPenTestersCSharp│ ├───XORBruteForce│ └───ZeroShatp├───CuckooSandBox├───Curl2PS├───DART├───DCOM│ ├───DCOMrade│ └───SharpExcel4-DCOM├───Deception│ ├───BashFuscator│ ├───Endlessh│ ├───FakeSigning_meterpreterSignedWithGoogld│ └───PasteJacking├───Decryption│ ├───Decrypt-TFSSecretVariables│ ├───Empirum_Matrix42│ └───MicrosoftOrchestrator├───DefaultPasswords│ ├───Camera│ ├───IOT│ ├───RabbitMQ│ └───SCADA_IOT├───DetectionLab├───dex2jar├───DidierStevensTools│ ├───AMSIScan│ ├───CustomCMD.exe│ └───DependancyInstallForHisTools├───Discovery│ ├───GatherDomainAndSubdomainInfoFromIPRange│ ├───OwaspAmass│ └───PythonMassScan├───DisposableEmailDomains│ └───disposable-email-domains├───DLL│ ├───.NET Profiler DLL Hijack│ ├───Bleak│ ├───CreateThreadInjection│ ├───CsharpDLLInjection│ ├───DLLExport_Nuget│ ├───DLLHijackByProxying│ ├───DLLHijackDiscovery│ ├───DLLInjectionViaGarbageCollection│ ├───DllLoadAnythingViaScript│ ├───DllsForHackers│ ├───DLL_Injection_3│ ├───Docs│ ├───DoubleAgent│ ├───DueDLLigence│ ├───ExportFunctionsToDLL│ ├───HijackHunter_findVulnerableInjection│ ├───Hollows_hunter│ ├───InjectAllTheThings│ ├───InjectDLL_InDriver│ ├───InjectingDotNETAssemblyToUnmanagedProcess│ ├───Koppeling│ ├───LaunchShellcodeasThreadviaDllMainratherthananewprocess│ ├───LoadingaDLLFromMemory│ ├───MaliciousDLLGenerator│ ├───ManagedInjection│ ├───ManualDLLInjectionExample│ ├───MavInject32│ ├───MemoryModule│ ├───Reflective DLL Injection│ ├───reflective-injection-detection│ ├───ReflectiveDLLInjection│ ├───Robber_FindDLLInjectiom│ ├───SDRI│ ├───sRDI-ShellcodeReflectiveDLLInjection│ ├───StrongSignedName│ ├───TrustJack│ ├───UnmanagedExports│ ├───UseSvcHostToLoad│ └───UsoDllLoader├───DLLThirdPartyProtection│ ├───Dinvoke│ ├───IRedTeamExample│ ├───SharpBlock│ └───XPN├───DLR│ └───OffensiveDLR├───DNS│ ├───DNSGrep│ ├───DNSHijack│ └───DNsRebinding│ └───WhoNowDNSServer├───DomainController│ ├───DcShadow│ ├───DumpNTDS.dit│ └───SMBExec├───Donut├───DonutCS├───DotNetInterop├───DPAPI│ ├───Docs│ ├───DPAPick│ └───SharpDPAPI├───Drivers│ └───Dirt├───Drones│ └───Dronesploit├───EICAR├───ElasticSearch├───Encryption│ ├───EncryptStringTool│ └───XorEncryption├───Entropy│ └───EntroPY├───Enumeration│ ├───ACLight│ ├───CommandLists│ ├───General│ │ └───AList│ ├───Linux│ │ ├───Enum4Linux│ │ ├───Jalesc│ │ ├───LinEnum│ │ ├───Linux-Smart-Enumeration│ │ ├───LinuxExploitSuggester│ │ └───PerlLinuxExploitSuggester│ ├───RidRelay│ └───Windows│ ├───BloodHound│ │ ├───BloodHound│ │ ├───BloodHoundBinaries│ │ ├───BloodHoundTools│ │ ├───BoodHound.Py … –EOF– 转载：https://www.cnblogs.com/H4ck3R-XiX/p/14417473.html","categories":[{"name":"网络安全","slug":"网络安全","permalink":"http://www.lvhejin.cn/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://www.lvhejin.cn/tags/%E5%B7%A5%E5%85%B7/"}]},{"title":"Shodan使用指南","slug":"网络安全/Shodan/Shodan使用指南","date":"2022-11-21T14:05:38.000Z","updated":"2024-01-05T17:32:17.655Z","comments":true,"path":"2022/11/21/网络安全/Shodan/Shodan使用指南/index.html","link":"","permalink":"http://www.lvhejin.cn/2022/11/21/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/Shodan/Shodan%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/index.html","excerpt":"","text":"Shodan是用于搜索连接到互联网的设备的工具。与搜索引擎可以帮助你找到网站不同，Shodan可以帮助你找到有关台式机，服务器，IoT设备等的信息。此信息包括元数据，例如在每个设备上运行的软件。 Shodan的常见用途包括网络安全，市场研究，网络风险，扫描IoT设备和跟踪勒索软件。本指南将侧重于在渗透测试中涉及的这些应用。 1.什么是Shodan？ Shodan是用于搜索互联网连接设备的搜索引擎。 它由John C. Matherly（@achillean）于2009年创建。 Shodan可让你探索互联网。发现连接在网络中的设备或网络服务，监视网络安全性，进行全球性统计等。 Shodan的网站/数据库引用了广泛的互联网端口扫描的结果。 2.Shodan接口本节将展示连接Shodan的各种方法。我们可以通过主站、官方的python命令行界面工具和库，各种语言的社区驱动库以及官方的REST API与Shodan进行交互。 2.1 CLI工具由python编写的shodan官方命令行界面（CLI），可在终端中快速使用。 2.1.1安装在pyenv这样的虚拟python环境中： 1$ easy_install shodan 在BlackArch上，可以安装以下软件包： 1＃pacman -S python-shodan 安装shodan CLI工具后，只需执行以下步骤即可设置API令牌： 1$ shodan init &lt;YOUR_API_KEY&gt; 2.1.2命令概述2.1.2.1 帮助(–help) 12$ shodan –helpUsage: shodan [OPTIONS] COMMAND [ARGS]… 12Options: -h, –help Show this message and exit. 1234567891011121314151617181920Commands:alert Manage the network alerts for your account.convert Convert the given input data file into a different format.count Returns the number of results for a search.data Bulk data access to Shodan.domain View all available information for a domain.download Download search results and save them in a compressed JSON file.honeyscore Check whether the IP is a honeypot or not.host View all available information for an IP address.info Shows general information about your account.init Initialize the Shodan command-line.myip Print your external IP address.org Manage your organization’s access to Shodan.parse Extract information out of compressed JSON files.radar Real-Time Map of some results as Shodan finds them.scan Scan an IP/ netblock using Shodan.search Search the Shodan database.stats Provide summary information about a search query.stream Stream data in real-time.version Print version of this tool. 2.1.2.2 信息(info) 如果已设置API令牌，可以检查剩余的积分数： 123$ shodan info Query credits available: 100 Scan credits available: 100 查询积分(Query credits)用于搜索Shodan，扫描积分(Scan credits)用于扫描IP。 2.1.2.3 版本(version) 12$ shodan version 1.21.2 2.1.2.4 计数 返回搜索查询的结果数。 1234$ shodan count openssh 23128 $ shodan count openssh 7 219 2.1.2.5 下载 搜索Shodan并将结果下载到文件中，其中每一行都是JSON语句。 默认情况下，仅下载1,000个结果，如果要下载更多结果，请查看–limit标志。 下载命令使你可以保存结果，然后使用parse命令对其进行处理。 因此，如果你经常搜索相同的查询，将有助于你节省积分。 导出积分用于以以下速率从网站下载数据：1个导出积分可让你下载多达10,000个结果。它们是一次性的，这意味着一旦你使用它们，它们就不会在月初自动更新。但是，如果你没有导出积分，则可以使用1个查询积分来保存100个结果。 12345678910$ shodan download -h Usage: shodan download [OPTIONS] &lt;filename&gt; &lt;search query&gt; Download search results and save them in a compressed JSON file. Options: --limit INTEGER The number of results you want to download. -1 to download all the data possible. --skip INTEGER The number of results to skip when starting the download. -h, --help Show this message and exit. 2.1.2.6 主机 查看有关主机的信息，例如主机的位置，打开的端口以及哪个组织拥有IP。 12345678910111213141516171819202122232425262728$ shodan host 1.1.1.1 1.1.1.1 Hostnames: one.one.one.one Country: Australia Organization: Mountain View Communications Updated: 2020-01-21T22:26:00.168041 Number of open ports: 3 Ports: 53/udp 80/tcp 443/tcp |-- SSL Versions: -SSLv2, -SSLv3, TLSv1, TLSv1.1, TLSv1.2, TLSv1.3 $ shodan host 138.201.81.199 138.201.81.199 Hostnames: apollo.archlinux.org Country: Germany Organization: Hetzner Online GmbH Updated: 2020-01-21T03:02:11.476262 Number of open ports: 4 Ports: 22/tcp OpenSSH (8.1) 25/tcp Postfix smtpd 80/tcp nginx (1.16.1) 443/tcp nginx (1.16.1) |-- SSL Versions: -SSLv2, -SSLv3, -TLSv1, -TLSv1.1, TLSv1.2, TLSv1.3 2.1.2.7 myip 返回你的互联网IP地址: 12$ shodan myip 199.30.49.210 2.1.2.8 parse 使用parse来分析使用download命令生成的文件。 此命令使你可以过滤出你感兴趣的字段，将JSON转换为CSV，并且便于通过管道传输到其他脚本中。 123456789101112131415$ shodan parse -h Usage: shodan parse [OPTIONS] &lt;filenames&gt; Extract information out of compressed JSON files. Options: --color / --no-color --fields TEXT List of properties to output. -f, --filters TEXT Filter the results for specific values using key:value pairs. -O, --filename TEXT Save the filtered results in the given file (append if file exists). --separator TEXT The separator between the properties of the search results. -h, --help Show this message and exit. 以下命令输出上述例子中下载的openssh数据的过滤数据： 12345678910111213141516171819202122232425262728293031323334353637$ shodan parse --fields location.country_code3,ip_str,hostnames -f port:2222 openssh-data.json.gz ITA 89.107.109.247 HUN 193.6.173.187 FRA 77.87.111.110 pro-sip1.srv.proceau.net USA 50.210.94.33 USA 35.130.36.118 035-130-036-118.biz.spectrum.com AUT 80.120.19.180 JPN 124.155.95.212 v095212.ppp.asahi-net.or.jp POL 83.144.70.114 83-144-70-114.static.chello.pl BGR 84.238.200.8 AUT 80.120.19.168 USA 162.211.126.140 CAN 76.10.173.222 mail.nanoman.ca USA 24.172.82.71 rrcs-24-172-82-71.midsouth.biz.rr.com AUT 80.120.19.182 ITA 188.14.96.151 host151-96-static.14-188-b.business.telecomitalia.it USA 216.67.111.198 216-67-111-198.static.acsalaska.net USA 73.179.238.221 c-73-179-238-221.hsd1.fl.comcast.net HKG 113.28.18.59 113-28-18-59.static.imsbiz.com $ shodan parse --fields port,ip_str,location.city,location.postal_code -f location.country_code:FR --separator , openssh-data.json.gz 22,188.92.65.5,Hésingue,68220 2222,77.87.111.110,, 22,51.89.105.163,, 22,5.135.218.249,, 22,93.177.70.142,, 2222,81.250.129.207,Paris,75116 22,51.255.85.97,, 22,193.52.218.40,Aix-en-provence,13090 22,51.77.112.86,, 22,149.202.19.41,, 22,5.39.117.104,, 22,195.154.53.223,Beaumont,95260 22,37.71.132.198,, 22,178.33.71.35,, 22,212.83.188.179,Jouy-le-moutier,95280 2222,195.200.166.216,Berre-l&#x27;etang,13130 22,82.251.157.165,Paris,75004 2.1.2.9 搜索 此命令使你通过终端的方式搜索Shodan并查看结果。 默认情况下，它将显示IP，端口，主机名和数据。你可以使用–fields参数来输出你感兴趣的任何字段。 一个简单的查询不会消耗任何积分，但是如果你使用搜索过滤器或请求第2页及以后的页面，则会消耗积分。 12345678910111213$ shodan search -h Usage: shodan search [OPTIONS] &lt;search query&gt; Search the Shodan database Options: --color / --no-color --fields TEXT List of properties to show in the search results. --limit INTEGER The number of search results that should be returned. Maximum: 1000 --separator TEXT The separator between the properties of the search results. -h, --help Show this message and exit. 不扣积分的查询示例： 123456789101112131415161718$ shodan search --fields ip_str,port,os smb 156.226.167.81 445 Windows Server 2008 R2 Datacenter 7601 Service Pack 1 156.243.104.194 445 Windows Server 2008 R2 Enterprise 7601 Service Pack 1 91.230.243.89 445 Windows 10 Pro 16299 85.3.170.18 445 Windows 6.1 213.238.170.132 445 Windows Server 2012 R2 Standard 9600 154.208.176.81 445 Windows Server 2008 R2 Enterprise 7601 Service Pack 1 103.235.171.78 445 Windows Server 2016 Datacenter 14393 102.130.40.85 445 Windows Server 2016 Standard 14393 50.3.151.113 445 Windows Server 2012 R2 Standard 9600 220.241.112.233 445 Windows Server 2019 Standard 17763 100.27.15.229 445 WWindows Server 2012 R2 Standard 9600 212.71.136.11 445 Unix 156.255.174.225 445 Windows Server 2008 R2 Datacenter 7601 Service Pack 1 156.232.162.239 445 WWindows Server 2008 R2 Enterprise 7601 Service Pack 1 186.210.102.132 445 Unix 154.94.153.34 445 Windows Server 2012 R2 Datacenter 9600 213.130.28.31 445 Windows 6.1 花费1个积分的查询示例（由于使用了过滤器）： 1234567891011121314151617$ shodan search --fields ip_str,port,org,info product:mongodb 165.22.3.203 27017 Digital Ocean 213.159.208.76 27017 JSC The First 209.6.48.11 27017 RCN 23.239.0.110 27017 Linode 52.220.230.134 27017 Amazon.com 47.91.139.188 27017 Alibaba 159.203.169.196 27017 Digital Ocean 49.233.135.180 27017 Tencent cloud computing 122.228.113.75 27017 WENZHOU, ZHEJIANG Province, P.R.China. 106.14.42.66 27017 Hangzhou Alibaba Advertising Co.,Ltd. 59.108.91.3 27017 Beijing Founder Broadband Network Technology Co.,L 115.29.176.18 27017 Hangzhou Alibaba Advertising Co.,Ltd. 148.251.46.75 27017 Hetzner Online GmbH 3.121.222.150 27017 Amazon.com 47.75.211.162 27017 Alibaba 200.219.217.122 27017 Equinix Brazil 2.1.2.10 扫描 1234567891011121314$ shodan scan -h Usage: shodan scan [OPTIONS] COMMAND [ARGS]... Scan an IP/ netblock using Shodan. Options: -h, --help Show this message and exit. Commands: internet Scan the Internet for a specific port and protocol using the... list Show recently launched scans protocols List the protocols that you can scan with using Shodan. status Check the status of an on-demand scan. submit Scan an IP/ netblock using Shodan. 启动扫描将产生以下费用：1个扫描积分可让你扫描1个IP 默认情况下，扫描结果将显示到stdout，但是你可以将其保存到文件中以便以后解析。 1$ shodan scan submit --filename 104.27.154.244_scan.json.gz 104.27.154.244 如果主机在最近24小时内已经被扫描，那么如果没有企业级账户，将无法再次扫描。 1234$ shodan scan submit --filename 104.27.154.244_scan.json.gz 104.27.154.244 Starting Shodan scan at 2020-01-22 23:46 - 100 scan credits left No open ports found or the host has been recently crawled and cant get scanned again so soon. 你还可以查看之前启动的扫描及其ID和状态： 12345$ shodan scan list # 2 Scans Total - Showing 10 most recent scans: # Scan ID Status Size Timestamp zmWj3RNgiPbiQjx9 PROCESSING 1 2020-01-22T22:49:39.037000 8J9yu7jqTQO7AIiP PROCESSING 1 2020-01-22T22:46:34.790000 不必强制使用–filename命令要去保存扫描结果。你可以简单地启动扫描而不保存它，然后借助扫描ID在以后下载结果： 1$ shodan download --limit -1 scan-results.json.gz scan:zmWj3RNgiPbiQjx9 由于扫描是异步进行的，因此你可以随时检查扫描状态。 12$ shodan scan status zmWj3RNgiPbiQjx9 DONE 在启动扫描时查看扫描ID，你可以使用verbose模式： 12345$ shodan scan submit --verbose 13.226.145.4 Starting Shodan scan at 2020-01-23 00:00 - 97 scan credits left # Scan ID: 3z6Cqf1CCyVLtc6P# Scan status: DONE 拥有企业数据许可证的客户只需指定端口和协议/模块，就可以请求对整个Internet进行扫描。 1$ shodan scan internet 8080 wemo-http 可用的协议和模块可以与shodan扫描协议一起列出。 2.1.2.11统计 提供有关搜索查询的摘要信息 12345678910$ shodan stats -h Usage: shodan stats [OPTIONS] &lt;search query&gt; Provide summary information about a search query Options: --limit INTEGER The number of results to return. --facets TEXT List of facets to get statistics for. -O, --filename TEXT Save the results in a CSV file of the provided name. -h, --help Show this message and exit. 目测默认情况下，你只会获得前十名，而不是所有方面： 123456789101112131415161718192021222324$ shodan stats nginx Top 10 Results for Facet: country US 13,598,596 CN 6,013,993 ZA 3,067,296 DE 1,560,114 HK 1,065,990 RU 869,931 FR 859,715 GB 555,946 NL 550,591 JP 526,386 Top 10 Results for Facet: org Amazon.com 1,897,943 CloudInnovation infrastructure 1,288,280 Leaseweb USA 1,200,146 EGIHosting 1,131,973 DXTL Tseung Kwan O Service 1,052,688 Hangzhou Alibaba Advertising Co.,Ltd. 770,553 Digital Ocean 749,221 Asline Limited 680,364 Power Line Datacenter 678,264 Quantil Networks 585,935 但是我们可以自定义： 123456789101112131415161718192021$ shodan stats --facets domain,port,asn --limit 5 nginx Top 5 Results for Facet: domain amazonaws.com 2,208,958 scalabledns.com 435,980 googleusercontent.com 308,114 t-ipconnect.de 225,276 your-server.de 180,711 Top 5 Results for Facet: port 80 10,019,366 443 5,300,058 5000 588,809 5001 563,208 8080 453,604 Top 5 Results for Facet: asn as37353 2,447,679 as35916 1,878,181 as15003 1,508,786 as16509 1,236,249 as18779 1,132,180 2.2 网站2.2.1 主界面Shodan的主要界面是搜索引擎。 它的工作方式类似于CLI工具的搜索命令，但带有精美的WebUI来显示结果。它显示每个主机的摘要，与查询匹配的主机总数（如CLI的count命令）和一些统计信息（如stats命令）。 选择主机后，你将可以看到快照规范表，漏洞影响主机，开放端口和开放端口标识信息。 2.2.1.1 下载数据 搜索后，将显示“下载结果”按钮： 然后，可以JSON，CSV或XML格式下载搜索结果。 仅有JSON格式可以包含完整数据，并与Shodan CLI工具兼容。 而CSV格式将仅包含IP，端口，banner，组织和主机名。 Shodan不建议使用XML格式，因为XML比JSON占用更多的空间。 2.2.1.2 生成报告 Shodan可以基于搜索查询生成报告。 该报告包含图形/图表，可让你大致了解结果如何在Internet上分布。此功能是免费的，任何人都可以使用。 要生成报告，请在搜索结果页面上单击“创建报告”按钮： 命名报告： 生成报告通常需要花费几分钟，当Shodan准备好带有链接的报告后，你会收到一封电子邮件。报告是静态的，不会自动更新。 另外，你可以在报告页面上找到所有以前的报告。 2.2.2地图用于搜索Shodan数据库的地图界面的工作方式类似于CLI的stats命令，但是根据主机的物理位置，在交互式地图中显示结果。 由于它不会显示超过1000个结果，因此你必须放大或缩小或四处移动才能显示其他结果。 2.2.3图片图片是可检索的抓取设备截图的图库。 图像数据是从5种不同的源收集来的：VNC，远程桌面（RDP），RTSP，网络摄像头和X Windows。 has_screenshot：true过滤操作可以在全局搜索引擎中使用，以仅保留具有屏幕截图的主机。 2.2.4漏洞利用Exploits 是可一次在各种漏洞数据库中查找poc的搜索引擎。 2.2.5开发人员仪表板开发人员信息中心会显示你的积分消费和API计划。 2.2.6 网络监控器跟踪你架设在互联网上的设备。设置通知，启动扫描并完全监控你的服务器或设备。 监控仪表板可让你跟踪设备，在检测到可疑事件时提醒你，启动扫描并显示合成仪表板上的内容。 首先，添加要监视的IP，范围或域，然后选择通知服务。 然后，你可以管理资产，从此处可以启动扫描或修改触发规则。 你可以选择哪种事件将触发警报。 然后，仪表板将显示公开的服务。 2.2.7 ICS雷达ICS Radar是由Shodan爬虫建立的工业控制系统（ICS）设备的3D地图。 2.2.8 Honeypot scoreHoneypot or not?服务会将Honeyscore归因于一个IP地址（成为蜜罐的可能性）。 就像CLI的honeyscore命令一样，它只是API的抽象化： 123$ shodan honeyscore 46.244.103.227 Not a honeypot Score: 0.3 2.2.9 Shodan 2000Shodan 2000类似于Tron的界面，可随机显示主机。 2.2.10社区查询我们可以浏览社区其他用户导出和共享的查询结果。 共享查询具有标题，描述和标签，因此可以轻松浏览它们。 当然你也可以共享查询，请单击搜索结果页面上的“共享搜索”按钮。 2.3 REST APIShodan带有REST API，可用于构建基于Shodan的Web应用程序服务，或者如果您喜欢的语言中尚不存在封装库，则可以创建库。 API的基本URL为：https://api.shodan.io，所有API方法的速率均限制为1 req / sec。 该API需要通过身份验证，因此，如果您忘记提供API密钥，则会收到HTTP 401错误。 使用curl查询API计划信息的示例： 1curl -s https://api.shodan.io/api-info?key=&#123;YOUR_API_KEY&#125; | jq 123456789101112131415&#123; &quot;scan_credits&quot;: 95, &quot;usage_limits&quot;: &#123; &quot;scan_credits&quot;: 100, &quot;query_credits&quot;: 100, &quot;monitored_ips&quot;: 16 &#125;, &quot;plan&quot;: &quot;dev&quot;, &quot;https&quot;: false, &quot;unlocked&quot;: true, &quot;query_credits&quot;: 94, &quot;monitored_ips&quot;: 2, &quot;unlocked_left&quot;: 94, &quot;telnet&quot;: false &#125; 另一个获取主机信息的查询： 1curl -s https://api.shodan.io/shodan/host/1.1.1.1?key=&#123;YOUR_API_KEY&#125; | jq 123456789101112131415161718192021222324252627282930313233343536373839404142434445&#123; &quot;region_code&quot;: null, &quot;ip&quot;: 16843009, &quot;postal_code&quot;: null, &quot;country_code&quot;: &quot;AU&quot;, &quot;city&quot;: null, &quot;dma_code&quot;: null, &quot;last_update&quot;: &quot;2020-01-25T15:55:54.880090&quot;, &quot;latitude&quot;: -33.494, &quot;tags&quot;: [], &quot;area_code&quot;: null, &quot;country_name&quot;: &quot;Australia&quot;, &quot;hostnames&quot;: [ &quot;one.one.one.one&quot; ], &quot;org&quot;: &quot;Mountain View Communications&quot;, &quot;data&quot;: [ &#123; &quot;_shodan&quot;: &#123; &quot;id&quot;: &quot;f4218ca0-2728-4d7b-97f8-875f4f04149d&quot;, &quot;options&quot;: &#123; &quot;referrer&quot;: &quot;601b650e-3cc7-4189-babe-921fdf53a9e2&quot;, &quot;hostname&quot;: &quot;www.1yhaoduo.com&quot; &#125;, &quot;ptr&quot;: true, &quot;module&quot;: &quot;http&quot;, &quot;crawler&quot;: &quot;d264629436af1b777b3b513ca6ed1404d7395d80&quot; &#125;, &quot;hash&quot;: -237371161, &quot;os&quot;: null, &quot;opts&quot;: &#123;&#125;, &quot;ip&quot;: 16843009, &quot;isp&quot;: &quot;APNIC and Cloudflare DNS Resolver project&quot;, &quot;http&quot;: &#123; &quot;html_hash&quot;: 1145258596, &quot;robots_hash&quot;: null, &quot;redirects&quot;: [], &quot;securitytxt&quot;: null, &quot;title&quot;: &quot;DNS resolution error | www.1yhaoduo.com | Cloudflare&quot;, &quot;sitemap_hash&quot;: null, &quot;waf&quot;: &quot;CloudFlare&quot;, &quot;robots&quot;: null, &quot;favicon&quot;: null, &quot;host&quot;: &quot;www.1yhaoduo.com&quot;, ... 查看REST API文档以获取所有方法的完整说明。 2.4语言包（库）要将工具与Shodan API接口，可以使用封装库之一。 官方库是用Python制作的，但是在Ruby，PHP，Haskell，Rust，Perl，Node.js，Go，PowerShell，Java和C＃中也有公共库。 这里给出三个示例： Python – shodan-python Ruby – shodanz Node.js – shodan-client 2.4.1 Python – shodan-python2.4.1.1安装 与CLI工具的安装相同，因为CLI工具是在python库上制作的，它们被打包在一起。 在像pyenv这样的虚拟python环境中： 1$ easy_install shodan 在BlackArch上，可以安装以下软件包： 1# pacman -S python-shodan 然后，API密钥将始终像我们的代码中那样进行初始化： 12345import shodan SHODAN_API_KEY = &#x27;API key here&#x27; api = shodan.Shodan(SHODAN_API_KEY) 注意：该库适用于python 2和python 3，但由于不推荐使用python 2，因此我们仅使用python 3。 2.4.1.2示例 1234567891011121314# 基本搜索示例：try: # Shodan搜索 results = api.search(&#x27;apache&#x27;) ## 输出结果 print(&#x27;Results found: &#123;&#125;&#x27;.format(results[&#x27;total&#x27;])) for result in results[&#x27;matches&#x27;]: print(&#x27;IP: &#123;&#125;&#x27;.format(result[&#x27;ip_str&#x27;])) print(result[&#x27;data&#x27;]) print(&#x27;&#x27;) except shodan.APIError as e: print(&#x27;Error: &#123;&#125;&#x27;.format(e)) 1234567891011121314151617181920212223242526272829303132# 结果输出示例：IP: 65.99.237.196 HTTP/1.1 200 OK Date: Sat, 25 Jan 2020 16:07:19 GMT Server: Apache Transfer-Encoding: chunked Content-Type: text/html IP: 212.72.184.58 HTTP/1.1 200 OK Date: Sat, 25 Jan 2020 16:07:29 GMT Server: Apache/2.2.22 (Debian) mod_python/3.3.1 Python/2.7.3 mod_ssl/2.2.22 OpenSSL/1.0.1t X-Powered-By: PHP/5.4.45-0+deb7u14 Expires: Mon, 26 Jul 1997 05:00:00 GMT Cache-Control: no-store, no-cache, must-revalidate Pragma: no-cache Last-Modified: Sat, 25 Jan 2020 16:07:29 GMT Vary: Accept-Encoding Transfer-Encoding: chunked Content-Type: text/html IP: 208.109.44.217 HTTP/1.1 404 Not Found Date: Sat, 25 Jan 2020 16:07:20 GMT Server: Apache Content-Length: 381 Content-Type: text/html; charset=iso-8859-1 12345678910111213# 探测主机的可用端口示例：try: # 查找主机 host = api.host(&#x27;1.1.1.1&#x27;) # 输出基本信息 print(&quot;&quot;&quot; IP: &#123;&#125; Organization: &#123;&#125; Operating System: &#123;&#125; &quot;&quot;&quot;.format(host[&#x27;ip_str&#x27;], host.get(&#x27;org&#x27;, &#x27;n/a&#x27;), host.get(&#x27;os&#x27;, &#x27;n/a&#x27;))) # Print all banners for item in host[&#x27;data&#x27;]: print(&quot;&quot;&quot; Port: &#123;&#125; Banner: &#123;&#125; &quot;&quot;&quot;.format(item[&#x27;port&#x27;], item[&#x27;data&#x27;])) except shodan.APIError as e: print(&#x27;Error: &#123;&#125;&#x27;.format(e)) 12345678910111213141516171819202122232425262728293031323334353637# 结果输出示例：IP: 1.1.1.1 Organization: Mountain View Communications Operating System: None Port: 80 Banner: HTTP/1.1 409 Conflict Date: Sat, 25 Jan 2020 15:55:54 GMT Content-Type: text/html; charset=UTF-8 Transfer-Encoding: chunked Connection: close Set-Cookie: __cfduid=d6241813d879cf2a39d03f5d6ce5a1abc1579967754; expires=Mon, 24-Feb-20 15:55:54 GMT; path=/; domain=.www.1yhaoduo.com; HttpOnly; SameSite=Lax Cache-Control: max-age=6 Expires: Sat, 25 Jan 2020 15:56:00 GMT X-Frame-Options: SAMEORIGIN Vary: Accept-Encoding Server: cloudflare CF-RAY: 55ab6f23aee09cbd-AMS Port: 443 Banner: HTTP/1.1 301 Moved Permanently Date: Sat, 25 Jan 2020 15:47:19 GMT Transfer-Encoding: chunked Connection: keep-alive Cache-Control: max-age=3600 Expires: Sat, 25 Jan 2020 16:47:19 GMT Location: https://get.vitalsource.com/ Expect-CT: max-age=604800, report-uri=&quot;https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct&quot; Vary: Accept-Encoding Server: cloudflare CF-RAY: 55ab628f3b05acca-OTP Port: 53 Banner: \\x00\\x00\\x80\\x83\\x00\\x01\\x00\\x00\\x00\\x01\\x00\\x00\\t_services\\x07_dns-sd\\x04_udp\\x05local\\x00\\x00\\x0c\\x00\\x01\\x00\\x00\\x06\\x00\\x01\\x00\\x00(\\xac\\x00@\\x01a\\x0croot-servers\\x03net\\x00\\x05nstld\\x0cverisign-grs\\x03com\\x00xf\\xf1\\xd4\\x00\\x00\\x07\\x08\\x00\\x00\\x03\\x84\\x00\\t:\\x80\\x00\\x01Q\\x80 123456789101112131415161718192021222324252627282930313233343536373839404142# 显示统计信息示例：# 我们想要的摘要信息的属性列表 FACETS = [ (&#x27;org&#x27;, 3), &#x27;domain&#x27;, &#x27;port&#x27;, &#x27;asn&#x27;, (&#x27;country&#x27;, 10), ] FACET_TITLES = &#123; &#x27;org&#x27;: &#x27;Top 3 Organizations&#x27;, &#x27;domain&#x27;: &#x27;Top 5 Domains&#x27;, &#x27;port&#x27;: &#x27;Top 5 Ports&#x27;, &#x27;asn&#x27;: &#x27;Top 5 Autonomous Systems&#x27;, &#x27;country&#x27;: &#x27;Top 10 Countries&#x27;, &#125; try: # 查询 query = &#x27;apache 2.4&#x27; # 计算结果 result = api.count(query, facets=FACETS) print(&#x27;Shodan Summary Information&#x27;) print(&#x27;Query: %s&#x27; % query) print(&#x27;Total Results: %s\\n&#x27; % result[&#x27;total&#x27;]) # 从列表facets中打印摘要信息 for facet in result[&#x27;facets&#x27;]: print(FACET_TITLES[facet]) for term in result[&#x27;facets&#x27;][facet]: print(&#x27;%s: %s&#x27; % (term[&#x27;value&#x27;], term[&#x27;count&#x27;])) # Print an empty line between summary info print(&#x27;&#x27;) except shodan.APIError as e: print(&#x27;Error: &#123;&#125;&#x27;.format(e)) 12345678910111213141516171819202122232425262728293031323334353637383940414243# 结果输出示例：Shodan Summary Information Query: apache 2.4 Total Results: 64678 Top 3 Organizations Liquid Web, L.L.C: 23199 Amazon.com: 7588 Hetzner Online GmbH: 1818 Top 5 Domains amazonaws.com: 10679 telecom.net.ar: 1661 your-server.de: 1243 t-ipconnect.de: 664 vultr.com: 443 Top 5 Ports 80: 21212 443: 19890 8080: 3024 10000: 1723 8081: 1366 Top 5 Autonomous Systems as53824: 13848 as32244: 9351 as16509: 6294 as24940: 1759 as7303: 1453 Top 10 Countries US: 31090 DE: 5833 CN: 4554 BR: 3010 AR: 1809 JP: 1475 GB: 1168 IN: 1009 FR: 756 CA: 613 2.4.2 Ruby– shodanz 2.4.2.1安装 在rbenv的虚拟ruby环境中： 然后，API密钥进行初始化： 123require &#x27;shodanz&#x27; api = Shodanz.client.new(key: &#x27;YOUR_API_KEY&#x27;) 对于生产项目，您可能希望通过环境变量SHODAN_API_KEY读取API密钥。 2.4.2.2示例 1234567891011# 基本搜索示例：# Search Shodan results = api.host_search(&#x27;apache&#x27;) # Show results puts &quot;Results found: #&#123;results[&#x27;total&#x27;]&#125;&quot; results[&#x27;matches&#x27;].each do |result| puts &quot;IP: #&#123;result[&#x27;ip_str&#x27;]&#125;&quot; puts result[&#x27;data&#x27;] + &quot;\\n&quot; end 1234567891011121314151617181920212223242526272829303132333435363738# 结果输出示例：IP: 154.218.139.58 HTTP/1.1 200 OK Date: Tue, 28 Jan 2020 22:13:53 GMT Server: Apache Upgrade: h2 Connection: Upgrade, close Last-Modified: Wed, 26 Apr 2017 08:03:47 GMT ETag: &quot;52e-54e0d47a39ec0&quot; Accept-Ranges: bytes Content-Length: 1326 Vary: Accept-Encoding Content-Type: text/html IP: 132.148.235.102 HTTP/1.1 200 OK Date: Tue, 28 Jan 2020 22:13:53 GMT Server: Apache Upgrade: h2,h2c Connection: Upgrade Last-Modified: Fri, 10 May 2019 09:10:49 GMT ETag: &quot;a4edb-7ab-58884f152c219&quot; Accept-Ranges: bytes Content-Length: 1963 Vary: Accept-Encoding,User-Agent Content-Type: text/html IP: 112.126.140.94 HTTP/1.1 404 Not Found Date: Tue, 28 Jan 2020 22:13:34 GMT Server: Apache X-Powered-By: PHP/5.2.17 X-UA-Compatible: IE=EmulateIE7 Transfer-Encoding: chunked Content-Type: text/html 123456789101112# 探测主机的可用端口示例：# Lookup the host host = api.host(&#x27;1.1.1.1&#x27;) # Print general info puts &quot; IP: #&#123;host[&#x27;ip_str&#x27;]&#125; Organization: #&#123;host[&#x27;org&#x27;] || &#x27;n/a&#x27;&#125; Operating System: #&#123;host[&#x27;os&#x27;] || &#x27;n/a&#x27;&#125; &quot; # Print all banners host[&#x27;data&#x27;].each do |item| puts &quot; Port: #&#123;item[&#x27;port&#x27;] || &#x27;n/a&#x27;&#125; Banner: #&#123;item[&#x27;data&#x27;] || &#x27;n/a&#x27;&#125; &quot; end 1234567891011121314151617181920212223242526272829303132333435# 结果输出示例：IP: 1.1.1.1 Organization: Mountain View Communications Operating System: n/a Port: 443 Banner: HTTP/1.1 403 Forbidden Server: cloudflare Date: Tue, 28 Jan 2020 18:34:35 GMT Content-Type: text/html Content-Length: 553 Connection: keep-alive CF-RAY: 55c50fb4e8149d5a-AMS Port: 80 Banner: HTTP/1.1 409 Conflict Date: Tue, 28 Jan 2020 17:26:54 GMT Content-Type: text/html; charset=UTF-8 Transfer-Encoding: chunked Connection: close Set-Cookie: __cfduid=d189a930262f96d94a707a90d853a56bd1580232414; expires=Thu, 27-Feb-20 17:26:54 GMT; path=/; domain=.www.1yhaoduo.com; HttpOnly; SameSite=Lax Cache-Control: max-age=6 Expires: Tue, 28 Jan 2020 17:27:00 GMT X-Frame-Options: SAMEORIGIN Vary: Accept-Encoding Server: cloudflare CF-RAY: 55c4ac8fba63801a-SAN Port: 53 Banner: Recursion: enabled Resolver ID: AMS 123456789101112131415161718192021222324252627282930313233343536373839# 显示统计信息：# The list of properties we want summary information on FACETS = &#123; &#x27;org&#x27;: 3, &#x27;domain&#x27;: 5, &#x27;port&#x27;: 5, &#x27;asn&#x27;: 5, &#x27;country&#x27;: 10, &#125; FACET_TITLES = &#123; &#x27;org&#x27;: &#x27;Top 3 Organizations&#x27;, &#x27;domain&#x27;: &#x27;Top 5 Domains&#x27;, &#x27;port&#x27;: &#x27;Top 5 Ports&#x27;, &#x27;asn&#x27;: &#x27;Top 5 Autonomous Systems&#x27;, &#x27;country&#x27;: &#x27;Top 10 Countries&#x27;, &#125; # Query query = &#x27;apache 2.4&#x27; # Count results result = api.host_count(query, facets: FACETS) puts &#x27;Shodan Summary Information&#x27; puts &quot;Query: #&#123;query&#125;&quot; puts &quot;Total Results: #&#123;result[&#x27;total&#x27;]&#125;\\n&quot; # Print the summary info from the facets result[&#x27;facets&#x27;].each do |facet, _v| puts FACET_TITLES[facet] result[&#x27;facets&#x27;][facet].each do |term| puts &quot;#&#123;term[&#x27;value&#x27;]&#125;: #&#123;term[&#x27;count&#x27;]&#125;&quot; end # Print an empty line between summary info puts &#x27;&#x27; end 123456789101112131415161718192021222324252627282930313233343536373839404142# 输出结果示例：Shodan Summary Information Query: apache 2.4 Total Results: 63939 Liquid Web, L.L.C: 23126 Amazon.com: 7843 Hetzner Online GmbH: 1798 amazonaws.com: 10398 telecom.net.ar: 1609 your-server.de: 1232 t-ipconnect.de: 629 vultr.com: 450 80: 21131 443: 19772 8080: 3023 10000: 1672 8081: 1372 as53824: 13810 as32244: 9316 as16509: 6138 as24940: 1740 as7303: 1410 US: 30877 DE: 5781 CN: 4432 BR: 2949 AR: 1757 JP: 1472 GB: 1168 IN: 1030 FR: 720 CA: 613 12345678910111213141516171819202122# 基于API流的异步支持require &#x27;async&#x27; require &#x27;shodanz&#x27; api = Shodanz.client.new(key: &#x27;YOUR_API_KEY&#x27;) # Asynchronously stream banner info from shodan and check any # IP addresses against the experimental honeypot scoring service. api.streaming_api.banners do |banner| if ip = banner[&#x27;ip_str&#x27;] Async do score = api.rest_api.honeypot_score(ip).wait puts &quot;#&#123;ip&#125; has a #&#123;score * 100&#125;% chance of being a honeypot&quot; rescue Shodanz::Errors::RateLimited sleep rand retry rescue # any other errors next end end end 注意：这个异步示例来自shodanz文档。 12345678910111213141516171819202122232425# 可用到的方法：# Returns all the protocols that can be used when launching an Internet scan api.protocols # Returns a list of port numbers that the Shodan crawlers are looking for api.ports # Returns information about the Shodan account linked to this API key api.profile # Look up the IP address for the provided list of hostnames api.resolve(&#x27;archlinux.org&#x27;, &#x27;blackarch.org&#x27;) # Look up the hostnames that have been defined for the given list of IP addresses api.reverse_lookup(&#x27;138.201.81.199&#x27;, &#x27;176.31.253.211&#x27;) # Get your current IP address as seen from the Internet api.my_ip # Calculates a honeypot probability score ranging from 0 (not a honeypot) to 1.0 (is a honeypot) api.honeypot_score(&#x27;1.1.1.1&#x27;) # API Plan Information api.info 12345# Exploits APIputs client.exploit_count(port: 22, page: 1) puts client.exploit_search(&#x27;rce couchdb&#x27;, type: &#x27;remote&#x27;, platform: &#x27;linux&#x27;, author: &#x27;Metasploit&#x27;) 你可以在此处找到更多示例，或阅读shodanz API文档。 2.4.3 Node.js – shodan客户端2.4.3.1安装 在nodenv的虚拟nodejs环境中： 1$ npm i shodan-client 然后，API密钥进行初始化： 1234const util = require(&#x27;util&#x27;); const api = require(&#x27;shodan-client&#x27;); const key = &#x27;API key here&#x27;; 2.4.3.2示例 12345678910111213141516171819# 基本搜索示例：const searchOpts = &#123;&#125;; const searchQuery = &#x27;apache&#x27;; api .search(searchQuery, key, searchOpts) // Search Shodan .then(results =&gt; &#123; console.log(&#x27;Results found: &#x27; + results[&#x27;total&#x27;] + &quot;\\n&quot;); // Show results for (const result of results[&#x27;matches&#x27;]) &#123; console.log(`IP: $&#123;result[&#x27;ip_str&#x27;]&#125;`); console.log(result[&#x27;data&#x27;] + &quot;\\n&quot;); &#125; &#125;) .catch(err =&gt; &#123; console.log(&#x27;Error:&#x27;); console.log(err); &#125;); 1234567891011121314151617181920212223242526272829303132333435363738394041# 结果输出示例：Results found: 25855805 IP: 210.143.102.156 HTTP/1.1 302 Found Date: Sat, 01 Feb 2020 18:45:43 GMT Server: Apache/2.2.15 (Scientific Linux) Location: https://210.143.102.156/ Content-Length: 299 Connection: close Content-Type: text/html; charset=iso-8859-1 IP: 52.168.162.242 HTTP/1.1 200 OK Date: Sat, 01 Feb 2020 18:44:49 GMT Server: Apache X-Frame-Options: SAMEORIGIN Last-Modified: Tue, 13 Aug 2019 14:51:43 GMT ETag: &quot;f11-59000c7615dc0&quot; Accept-Ranges: bytes Content-Length: 3857 X-XSS-Protection: 1; mode=block Cache-Control: no-cache, no-store, must-revalidate Pragma: no-cache Expires: 0 Content-Type: text/html; charset=UTF-8 Set-Cookie: pwcount=2;Secure;Path=/ Cache-Control: no-cache IP: 217.160.91.209 HTTP/1.1 403 Forbidden Date: Sat, 01 Feb 2020 18:45:18 GMT Server: Apache Content-Length: 1364 X-Frame-Options: deny Content-Type: text/html 1234567891011121314151617181920# 探测主机的可用端口示例：const searchOpts = &#123;&#125;; const ip = &#x27;1.1.1.1&#x27;; api .host(ip, key, searchOpts) // Lookup the host .then(host =&gt; &#123; // Print general info console.log(` IP: $&#123;host[&#x27;ip_str&#x27;]&#125; Organization: $&#123;host[&#x27;org&#x27;] || &#x27;n/a&#x27;&#125; Operating System: $&#123;host[&#x27;os&#x27;] || &#x27;n/a&#x27;&#125; `); // Print all banners for (const item of host[&#x27;data&#x27;]) &#123; console.log(` Port: $&#123;item[&#x27;port&#x27;] || &#x27;n/a&#x27;&#125; Banner: $&#123;item[&#x27;data&#x27;] || &#x27;n/a&#x27;&#125; `); &#125; &#125;) .catch(err =&gt; &#123; console.log(&#x27;Error:&#x27;); console.log(err); &#125;); 12345678910111213141516171819202122232425262728293031# 结果输出示例：IP: 1.1.1.1 Organization: Mountain View Communications Operating System: n/a Port: 443 Banner: HTTP/1.1 403 Forbidden Server: cloudflare Date: Sat, 01 Feb 2020 19:26:14 GMT Content-Type: text/html Content-Length: 553 Connection: keep-alive CF-RAY: 55e650de89868020-SAN Port: 80 Banner: HTTP/1.1 409 Conflict Date: Sat, 01 Feb 2020 19:16:16 GMT Content-Type: text/html; charset=UTF-8 Transfer-Encoding: chunked Connection: close Set-Cookie: __cfduid=dd6d38c961c18135646e1681bd1f809ad1580584576; expires=Mon, 02-Mar-20 19:16:16 GMT; path=/; domain=.www.1yhaoduo.com; HttpOnly; SameSite=Lax Cache-Control: max-age=6 Expires: Sat, 01 Feb 2020 19:16:22 GMT X-Frame-Options: SAMEORIGIN Vary: Accept-Encoding Server: cloudflare CF-RAY: 55e64240bb5a801a-SAN 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748# 显示统计信息：const FACETS = &#123; &#x27;org&#x27;: 3, &#x27;domain&#x27;: 5, &#x27;port&#x27;: 5, &#x27;asn&#x27;: 5, &#x27;country&#x27;: 10, &#125;; const FACET_TITLES = &#123; &#x27;org&#x27;: &#x27;Top 3 Organizations&#x27;, &#x27;domain&#x27;: &#x27;Top 5 Domains&#x27;, &#x27;port&#x27;: &#x27;Top 5 Ports&#x27;, &#x27;asn&#x27;: &#x27;Top 5 Autonomous Systems&#x27;, &#x27;country&#x27;: &#x27;Top 10 Countries&#x27;, &#125;; // https://github.com/jesusprubio/shodan-client/issues/34 // const opts = &#123; facets: FACETS &#125;; const opts = &#123; facets: JSON.stringify(FACETS).replace(/[&quot;&#123;&#125;]/g, &#x27;&#x27;) &#125;; // Query const query = &#x27;apache 2.4&#x27;; api .count(query, key, opts) // Count results .then(result =&gt; &#123; console.log(&#x27;Shodan Summary Information&#x27;); console.log(`Query: $&#123;query&#125;`); console.log(`Total Results: $&#123;result[&#x27;total&#x27;]&#125;\\n`); // Print the summary info from the facets for (const facet in result[&#x27;facets&#x27;]) &#123; console.log(FACET_TITLES[facet]); for (const term of result[&#x27;facets&#x27;][facet]) &#123; console.log(`$&#123;term[&#x27;value&#x27;]&#125;: $&#123;term[&#x27;count&#x27;]&#125;`); &#125; // Print an empty line between summary info console.log(&#x27;&#x27;); &#125; &#125;) .catch(err =&gt; &#123; console.log(&#x27;Error:&#x27;); console.log(err); &#125;); 12345678910111213141516171819202122232425262728293031323334353637383940414243# 结果输出示例：Shodan Summary Information Query: apache 2.4 Total Results: 63112 Top 3 Organizations Liquid Web, L.L.C: 22985 Amazon.com: 8614 Hetzner Online GmbH: 1797 Top 5 Domains amazonaws.com: 10051 telecom.net.ar: 1600 your-server.de: 1220 t-ipconnect.de: 603 vultr.com: 429 Top 5 Ports 80: 21098 443: 19669 8080: 3040 10000: 1669 8081: 1411 Top 5 Autonomous Systems as53824: 13725 as32244: 9260 as16509: 5941 as24940: 1750 as7303: 1383 Top 10 Countries US: 30672 DE: 5780 CN: 4072 BR: 2931 AR: 1745 JP: 1415 GB: 1147 IN: 939 FR: 738 CA: 675 2.5插件2.5.1 Firefox该附加组件Shodan.io会检索收集你正在浏览当前网站的Shodan数据。它向你展示基本信息（例如组织）以及开放端口。 2.5.2 ChromiumShodan插件会展示网站服务器的托管位置（国家/地区，城市），IP的所有者以及开放的端口或运行的服务。 Chrome的Shodan插件会自动检查Shodan是否具有当前网站的任何信息。目标网站是否还运行FTP，DNS，SSH或某些不寻常服务？使用此插件，您可以查看Shodan在指定的网站/域上收集的所有信息。 3.Shodan搜索查询语法3.1 标语和属性为了充分利用Shodan，了解搜索查询语法很重要。在Shodan的语法表中，标语是包含服务信息的对象。 在官方文档中，给出了以下简化的标语示例： 123456789&#123; &quot;data&quot;: &quot;Moxa Nport Device Status: Authentication disabled Name: NP5232I_4728 MAC: 00:90:e8:47:10:2d&quot;, &quot;ip_str&quot;: &quot;46.252.132.235&quot;, &quot;port&quot;: 4800, &quot;org&quot;: &quot;Starhub Mobile&quot;, &quot;location&quot;: &#123; &quot;country_code&quot;: &quot;SG&quot; &#125; &#125; 字典的每个键都称为一个属性（data，ip_str，端口等）。每个属性存储有关服务的不同类型的信息。 默认情况下，Shodan仅在未提供过滤条件的情况下查看data属性。 3.2 搜索过滤条件您可以通过搜索Moxa Nport设备找到上一个示例标语，但是如果您从Starhub Mobile中搜索设备，则不会返回预期的结果。正如前面所说，这是因为Shodan默认情况下仅搜索data属性！ 要使用其他属性搜索数据，我们必须使用过滤器。 搜索过滤条件是特殊的关键字，用于告诉Shodan你希望搜索特定的属性。 过滤条件的格式设置为key:value 示例： 要搜索位于Starhub移动网络中的设备： org:”Starhub Mobile” 要搜索位于新加坡的设备： country:SG 当然可以将它们组合在一起： org:”Starhub Mobile” country:SG Properties/filters specification这是标语属性的完整列表（来源：官方文档）。 一般属性： 可选属性： SSL属性 4.Shodan dorks和使用案例Shodan已经给出了CLI的简单示例。 1. 易受心脏滴血漏洞影响的设备数量： 12$ shodan count vuln:cve-2014-0160 80467 2. 获取域的子域名列表 12345678910111213141516171819$ shodan domain cnn.com CNN.COM A 151.101.193.67 A 151.101.129.67 A 151.101.65.67 A 151.101.1.67 ... newsroom.blogs CNAME cnnnewsroom.wordpress.com newsstream.blogs CNAME cnninewsstream.wordpress.com now CNAME www.cnn.com ntm.blogs CNAME ntm.blogs.cnn.com.edgesuite.net olympics.blogs CNAME olympics.blogs.cnn.com.edgesuite.net olympics.edition CNAME cnn.site.scribblelive.com on A 157.166.224.172 outfront.blogs CNAME cnnoutfront.wordpress.com pagingdrgupta.blogs CNAME cnnpagingdrgupta.wordpress.com parkerspitzer.blogs CNAME cnnparkerspitzer.wordpress.com ... 3.为你的网络创建一个私人防护并订阅它 1$ shodan alert create mynetwork 198.20.58.0/24 &amp;&amp; shodan stream --alerts=all 4.查找位于瑞士的服务器最常见的10个漏洞 123456789101112$ shodan stats --facets vuln country:CH Top 10 Results for Facet: vuln cve-2018-1312 36,562 cve-2017-7679 31,109 cve-2019-0220 28,882 cve-2016-8612 27,638 cve-2018-17199 26,706 cve-2016-4975 26,560 cve-2018-1283 25,477 cve-2017-15715 25,477 cve-2017-15710 25,477 cve-2017-7668 23,261 我们将继续进行一些公开共享的查询： 5.D-Link网络摄像机DCS-5300系列，无需身份验证 1$ shodan search &#x27;d-Link Internet Camera, 200 OK&#x27; 6.启用匿名身份验证的FTP服务器 1$ shodan search &#x27;230 login successful port:21&#x27; 7.数据库 1234567891011121314151617181920212223242526# MySQL $ shodan search &#x27;product:MySQL&#x27; # MongoDB $ shodan search &#x27;product:MongoDB&#x27; # elastic $ shodan search &#x27;port:9200 json&#x27; # Memcached $ shodan search &#x27;product:Memcached&#x27; # CouchDB $ shodan search &#x27;product:CouchDB&#x27; # PostgreSQL $ shodan search &#x27;port:5432 PostgreSQL&#x27; # Riak $ shodan search &#x27;port:8087 Riak&#x27; # Redis $ shodan search &#x27;product:Redis&#x27; # Cassandra $ shodan search &#x27;product:Cassandra&#x27; 8.游戏 1234567891011# Minecraft $ shodan search &#x27;Minecraft Server port:25565&#x27; # Counter-Strike: Global Offensive $ shodan search &#x27;product:&quot;Counter-Strike Global Offensive&quot;&#x27; # Starbound $ shodan search &#x27;product:Starbound&#x27; # ARK: Survival Evolved $ shodan search &#x27;product:&quot;ARK Survival Evolved&quot;&#x27; 9.工业控制系统 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950# XZERES Wind Turbine $ shodan search &#x27;title:&quot;xzeres wind&quot;&#x27; # PIPS Automated License Plate Reader $ shodan search &#x27;html:&quot;PIPS Technology ALPR Processors&quot;&#x27; # Modbus $ shodan search &#x27;port:502&#x27; # Niagara Fox $ shodan search &#x27;port:1911,4911 product:Niagara&#x27; # GE-SRTP $ shodan search &#x27;port:18245,18246 product:&quot;general electric&quot;&#x27; # MELSEC-Q $ shodan search &#x27;port:5006,5007 product:mitsubishi&#x27; # CODESYS $ shodan search &#x27;port:2455 operating system&#x27; # S7 $ shodan search &#x27;port:102&#x27; # BACnet $ shodan search &#x27;port:47808&#x27; # HART-IP $ shodan search &#x27;port:5094 hart-ip&#x27; # Omron FINS $ shodan search &#x27;port:9600 response code&#x27; # IEC 60870-5-104 $ shodan search &#x27;port:2404 asdu address&#x27; # DNP3 $ shodan search &#x27;port:20000 source address&#x27; # EtherNet/IP $ shodan search &#x27;port:44818&#x27; # PCWorx $ shodan search &#x27;port:1962 PLC&#x27; # Crimson v3.0 $ shodan search &#x27;port:789 product:&quot;Red Lion Controls&quot;&#x27; # ProConOS $ shodan search &#x27;port:20547 PLC&#x27; 10.ASCII视频示例 Shodan on asciinema.org 11.被黑的Ubiquiti Networks设备 1$ shodan search &#x27;hacked-router-help-sos&#x27; 12.监控摄像头，用户：admin，无密码 13.家用路由器的存储设备/附加的USB存储设备 1$ shodan search &#x27;IPC$ all storage devices&#x27; 14.无需身份验证的PBX电话网关 1$ shodan search &#x27;port:23 console gateway -password&#x27; 15.Lantronix以太网适配器的管理界面，无需密码 1$ shodan search &#x27;Press Enter for Setup Mode port:9999&#x27; 16.Polycom视频会议系统免认证shell 1$ shodan search &#x27;&quot;polycom command shell&quot;&#x27; 17.未经身份验证的VNC服务器 1$ shodan search &#x27;&quot;authentication disabled&quot; port:5900,5901&#x27; 18.NPort串口转eth / MoCA设备无密码 1$ shodan search &#x27;nport -keyin port:23&#x27; 一些 PenTestIT 查询: 1.Jenkins默认安装 1$ shodan search &#x27;http.favicon.hash:81586312&#x27; 2.SonarQube安装 1$ shodan search &#x27;http.favicon.hash:1485257654&#x27; 3.IBM WebSphere版本泄漏 1$ shodan search &#x27;WASRemoteRuntimeVersion&#x27; 最后，提供了一系列搜索查询：Awesome Shodan Search Queries Website GitHub 5.应用Shodan的工具 Shodan Developer https://github.com/BullsEye0/shodan-eye Shodan Search https://github.com/s0md3v/Striker https://github.com/lanmaster53/recon-ng https://github.com/smicallef/spiderfoot https://github.com/DefensePointSecurity/threat_note https://github.com/OWASP/Amass https://github.com/woj-ciech/Kamerka-GUI https://github.com/random-robbie/My-Shodan-Scripts https://github.com/jakejarvis/awesome-shodan-queries GitHub - pielco11/fav-up: IP lookup by favicon using Shodan ShodanSploit它允许你使用终端上的所有Shodan访问并进行详细查询。 Github repository: GitHub - shodansploit/shodansploit: 🔎 shodansploit &gt; v1.3.0 安装： 1234567git clone https://github.com/ismailtasdelen/shodansploit.gitcd shodansploitpython shodansploit.pydocker run -t ismailtasdelen/shodansploit Docker运行： docker run –rm -it ismailtasdelen/shodansploit 菜单： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647[1] GET &gt; /shodan/host/&#123;ip&#125; [2] GET &gt; /shodan/host/count[3] GET &gt; /shodan/host/search [4] GET &gt; /shodan/host/search/tokens [5] GET &gt; /shodan/ports [6] GET &gt; /shodan/exploit/author[7] GET &gt; /shodan/exploit/cve[8] GET &gt; /shodan/exploit/msb[9] GET &gt; /shodan/exploit/bugtraq-id[10] GET &gt; /shodan/exploit/osvdb[11] GET &gt; /shodan/exploit/title[12] GET &gt; /shodan/exploit/description[13] GET &gt; /shodan/exploit/date[14] GET &gt; /shodan/exploit/code[15] GET &gt; /shodan/exploit/platform[16] GET &gt; /shodan/exploit/port[17] GET &gt; /dns/resolve[18] GET &gt; /dns/reverse [19] GET &gt; /labs/honeyscore/&#123;ip&#125;[20] GET &gt; /account/profile [21] GET &gt; /tools/myip [22] GET &gt; /tools/httpheaders[23] GET &gt; /api-info [24] Exit Fav-Up描述：从favicon图标开始并使用Shodan来查找真实IP。 安装： 由于spicy语法，至少需要python3.6。 123git clone https://github.com/pielco11/fav-up.git pip3 install -r requirements.txt 命令概述： 示例： Favicon-file: 1python3 favUp.py –favicon-file favicon.ico -sc Favicon-url 1python3 favUp.py –favicon-url https://domain.behind.cloudflare/assets/favicon.ico -sc Web 1python3 favUp.py –web domain.behind.cloudflare -sc 插件： 12345678910111213141516171819from favUp import FavUpf = FavUp() f.shodanCLI = Truef.web = &quot;domain.behind.cloudflare&quot;f.show = True f.run()for result in f.faviconsList: print(f&quot;Real-IP: &#123;result[&#x27;found_ips&#x27;]&#125;&quot;) print(f&quot;Hash: &#123;result[&#x27;favhash&#x27;]&#125;&quot;) 相关信息：Unveiling IPs behind Cloudflare :: 0xNONEprivacy 6.shodan高级应用案例 Pivoting with Property Hashes Working with Shodan Data Files Create a GIF from an IP Image History 7.Shodan同类型工具网络搜索替代产品 Onyphe – 类似于Shodan，但除了扫描之外，它还从被动DNS查询，威胁列表查询和模糊站点查询中爬取数据。 但是，免费版本比Shodan更受限制。 ZoomEye – 与Shodan非常相似，它具有大量的高级筛选规则，这些记录比Shodan的记录更先进，并且有大量的预设查询。还有一个很棒的免费API接口。 Censys –像Shodan一样，它也具有跟踪网络变化，发送警报等的功能。似乎没有免费的API计划，唯一免费的是使用它。 thingful – 仅针对物联网设备的搜索引擎。 FOFA – 就像Shodan一样，它也具有CLI工具以及Java，Go，C和Python库。 Greynoise – 就像Shodan，没有免费的API计划，只有Web可视化工具访问。但也具有python库和CLI工具。 BinaryEdge – 像Shodan一样，有搜索引擎，蜜罐/服务器监测器，但有一个不常见的功能：Torrents / DHT Monitoring。有免费的Web和API计划。 开源自动托管替代产品 IVRE – Source &gt;具有WebUI和CLI工具，是一个网络侦查框架，包括用于被动侦查（依赖于Bro，Argus，Nfdump的流分析，基于Bro和p0f的指纹分析）和主动侦查（IVRE使用Nmap进行扫描，可以使用ZMap作为预扫描工具）的工具； IVRE还可以从Nmap和Masscan导入XML输出。 purplepee – Source &gt;允许你查看有关网站的HTTP标头、DNS记录、SSL证书和开放的TCP端口以及ASN whois信息的大概关系。除了开源项目，还在线托管了一个公共实例。 References SHODAN for Penetration testers Shodan – CLI Snippets Shodan Command-Line Interface Shodan library documentation Shodan help center 本文中直接引用了更多参考 __EOF__Shodan是用于搜索连接到互联网的设备的工具。与搜索引擎可以帮助你找到网站不同，Shodan可以帮助你找到有关台式机，服务器，IoT设备等的信息。此信息包括元数据，例如在每个设备上运行的软件。 Shodan的常见用途包括网络安全，市场研究，网络风险，扫描IoT设备和跟踪勒索软件。本指南将侧重于在渗透测试中涉及的这些应用。 1.什么是Shodan？ Shodan是用于搜索互联网连接设备的搜索引擎。 它由John C. Matherly（@achillean）于2009年创建。 Shodan可让你探索互联网。发现连接在网络中的设备或网络服务，监视网络安全性，进行全球性统计等。 Shodan的网站/数据库引用了广泛的互联网端口扫描的结果。 2.Shodan接口本节将展示连接Shodan的各种方法。我们可以通过主站、官方的python命令行界面工具和库，各种语言的社区驱动库以及官方的REST API与Shodan进行交互。 2.1 CLI工具由python编写的shodan官方命令行界面（CLI），可在终端中快速使用。 2.1.1安装在pyenv这样的虚拟python环境中： 1$ easy_install shodan 在BlackArch上，可以安装以下软件包： 1＃pacman -S python-shodan 安装shodan CLI工具后，只需执行以下步骤即可设置API令牌： 1$ shodan init &lt;YOUR_API_KEY&gt; 2.1.2命令概述2.1.2.1 帮助(–help) 12$ shodan –helpUsage: shodan [OPTIONS] COMMAND [ARGS]… 12Options: -h, –help Show this message and exit. 1234567891011121314151617181920Commands:alert Manage the network alerts for your account.convert Convert the given input data file into a different format.count Returns the number of results for a search.data Bulk data access to Shodan.domain View all available information for a domain.download Download search results and save them in a compressed JSON file.honeyscore Check whether the IP is a honeypot or not.host View all available information for an IP address.info Shows general information about your account.init Initialize the Shodan command-line.myip Print your external IP address.org Manage your organization’s access to Shodan.parse Extract information out of compressed JSON files.radar Real-Time Map of some results as Shodan finds them.scan Scan an IP/ netblock using Shodan.search Search the Shodan database.stats Provide summary information about a search query.stream Stream data in real-time.version Print version of this tool. 2.1.2.2 信息(info) 如果已设置API令牌，可以检查剩余的积分数： 123$ shodan info Query credits available: 100 Scan credits available: 100 查询积分(Query credits)用于搜索Shodan，扫描积分(Scan credits)用于扫描IP。 2.1.2.3 版本(version) 12$ shodan version 1.21.2 2.1.2.4 计数 返回搜索查询的结果数。 1234$ shodan count openssh 23128 $ shodan count openssh 7 219 2.1.2.5 下载 搜索Shodan并将结果下载到文件中，其中每一行都是JSON语句。 默认情况下，仅下载1,000个结果，如果要下载更多结果，请查看–limit标志。 下载命令使你可以保存结果，然后使用parse命令对其进行处理。 因此，如果你经常搜索相同的查询，将有助于你节省积分。 导出积分用于以以下速率从网站下载数据：1个导出积分可让你下载多达10,000个结果。它们是一次性的，这意味着一旦你使用它们，它们就不会在月初自动更新。但是，如果你没有导出积分，则可以使用1个查询积分来保存100个结果。 12345678910$ shodan download -h Usage: shodan download [OPTIONS] &lt;filename&gt; &lt;search query&gt; Download search results and save them in a compressed JSON file. Options: --limit INTEGER The number of results you want to download. -1 to download all the data possible. --skip INTEGER The number of results to skip when starting the download. -h, --help Show this message and exit. 2.1.2.6 主机 查看有关主机的信息，例如主机的位置，打开的端口以及哪个组织拥有IP。 12345678910111213141516171819202122232425262728$ shodan host 1.1.1.1 1.1.1.1 Hostnames: one.one.one.one Country: Australia Organization: Mountain View Communications Updated: 2020-01-21T22:26:00.168041 Number of open ports: 3 Ports: 53/udp 80/tcp 443/tcp |-- SSL Versions: -SSLv2, -SSLv3, TLSv1, TLSv1.1, TLSv1.2, TLSv1.3 $ shodan host 138.201.81.199 138.201.81.199 Hostnames: apollo.archlinux.org Country: Germany Organization: Hetzner Online GmbH Updated: 2020-01-21T03:02:11.476262 Number of open ports: 4 Ports: 22/tcp OpenSSH (8.1) 25/tcp Postfix smtpd 80/tcp nginx (1.16.1) 443/tcp nginx (1.16.1) |-- SSL Versions: -SSLv2, -SSLv3, -TLSv1, -TLSv1.1, TLSv1.2, TLSv1.3 2.1.2.7 myip 返回你的互联网IP地址: 12$ shodan myip 199.30.49.210 2.1.2.8 parse 使用parse来分析使用download命令生成的文件。 此命令使你可以过滤出你感兴趣的字段，将JSON转换为CSV，并且便于通过管道传输到其他脚本中。 123456789101112131415$ shodan parse -h Usage: shodan parse [OPTIONS] &lt;filenames&gt; Extract information out of compressed JSON files. Options: --color / --no-color --fields TEXT List of properties to output. -f, --filters TEXT Filter the results for specific values using key:value pairs. -O, --filename TEXT Save the filtered results in the given file (append if file exists). --separator TEXT The separator between the properties of the search results. -h, --help Show this message and exit. 以下命令输出上述例子中下载的openssh数据的过滤数据： 12345678910111213141516171819202122232425262728293031323334353637$ shodan parse --fields location.country_code3,ip_str,hostnames -f port:2222 openssh-data.json.gz ITA 89.107.109.247 HUN 193.6.173.187 FRA 77.87.111.110 pro-sip1.srv.proceau.net USA 50.210.94.33 USA 35.130.36.118 035-130-036-118.biz.spectrum.com AUT 80.120.19.180 JPN 124.155.95.212 v095212.ppp.asahi-net.or.jp POL 83.144.70.114 83-144-70-114.static.chello.pl BGR 84.238.200.8 AUT 80.120.19.168 USA 162.211.126.140 CAN 76.10.173.222 mail.nanoman.ca USA 24.172.82.71 rrcs-24-172-82-71.midsouth.biz.rr.com AUT 80.120.19.182 ITA 188.14.96.151 host151-96-static.14-188-b.business.telecomitalia.it USA 216.67.111.198 216-67-111-198.static.acsalaska.net USA 73.179.238.221 c-73-179-238-221.hsd1.fl.comcast.net HKG 113.28.18.59 113-28-18-59.static.imsbiz.com $ shodan parse --fields port,ip_str,location.city,location.postal_code -f location.country_code:FR --separator , openssh-data.json.gz 22,188.92.65.5,Hésingue,68220 2222,77.87.111.110,, 22,51.89.105.163,, 22,5.135.218.249,, 22,93.177.70.142,, 2222,81.250.129.207,Paris,75116 22,51.255.85.97,, 22,193.52.218.40,Aix-en-provence,13090 22,51.77.112.86,, 22,149.202.19.41,, 22,5.39.117.104,, 22,195.154.53.223,Beaumont,95260 22,37.71.132.198,, 22,178.33.71.35,, 22,212.83.188.179,Jouy-le-moutier,95280 2222,195.200.166.216,Berre-l&#x27;etang,13130 22,82.251.157.165,Paris,75004 2.1.2.9 搜索 此命令使你通过终端的方式搜索Shodan并查看结果。 默认情况下，它将显示IP，端口，主机名和数据。你可以使用–fields参数来输出你感兴趣的任何字段。 一个简单的查询不会消耗任何积分，但是如果你使用搜索过滤器或请求第2页及以后的页面，则会消耗积分。 12345678910111213$ shodan search -h Usage: shodan search [OPTIONS] &lt;search query&gt; Search the Shodan database Options: --color / --no-color --fields TEXT List of properties to show in the search results. --limit INTEGER The number of search results that should be returned. Maximum: 1000 --separator TEXT The separator between the properties of the search results. -h, --help Show this message and exit. 不扣积分的查询示例： 123456789101112131415161718$ shodan search --fields ip_str,port,os smb 156.226.167.81 445 Windows Server 2008 R2 Datacenter 7601 Service Pack 1 156.243.104.194 445 Windows Server 2008 R2 Enterprise 7601 Service Pack 1 91.230.243.89 445 Windows 10 Pro 16299 85.3.170.18 445 Windows 6.1 213.238.170.132 445 Windows Server 2012 R2 Standard 9600 154.208.176.81 445 Windows Server 2008 R2 Enterprise 7601 Service Pack 1 103.235.171.78 445 Windows Server 2016 Datacenter 14393 102.130.40.85 445 Windows Server 2016 Standard 14393 50.3.151.113 445 Windows Server 2012 R2 Standard 9600 220.241.112.233 445 Windows Server 2019 Standard 17763 100.27.15.229 445 WWindows Server 2012 R2 Standard 9600 212.71.136.11 445 Unix 156.255.174.225 445 Windows Server 2008 R2 Datacenter 7601 Service Pack 1 156.232.162.239 445 WWindows Server 2008 R2 Enterprise 7601 Service Pack 1 186.210.102.132 445 Unix 154.94.153.34 445 Windows Server 2012 R2 Datacenter 9600 213.130.28.31 445 Windows 6.1 花费1个积分的查询示例（由于使用了过滤器）： 1234567891011121314151617$ shodan search --fields ip_str,port,org,info product:mongodb 165.22.3.203 27017 Digital Ocean 213.159.208.76 27017 JSC The First 209.6.48.11 27017 RCN 23.239.0.110 27017 Linode 52.220.230.134 27017 Amazon.com 47.91.139.188 27017 Alibaba 159.203.169.196 27017 Digital Ocean 49.233.135.180 27017 Tencent cloud computing 122.228.113.75 27017 WENZHOU, ZHEJIANG Province, P.R.China. 106.14.42.66 27017 Hangzhou Alibaba Advertising Co.,Ltd. 59.108.91.3 27017 Beijing Founder Broadband Network Technology Co.,L 115.29.176.18 27017 Hangzhou Alibaba Advertising Co.,Ltd. 148.251.46.75 27017 Hetzner Online GmbH 3.121.222.150 27017 Amazon.com 47.75.211.162 27017 Alibaba 200.219.217.122 27017 Equinix Brazil 2.1.2.10 扫描 1234567891011121314$ shodan scan -h Usage: shodan scan [OPTIONS] COMMAND [ARGS]... Scan an IP/ netblock using Shodan. Options: -h, --help Show this message and exit. Commands: internet Scan the Internet for a specific port and protocol using the... list Show recently launched scans protocols List the protocols that you can scan with using Shodan. status Check the status of an on-demand scan. submit Scan an IP/ netblock using Shodan. 启动扫描将产生以下费用：1个扫描积分可让你扫描1个IP 默认情况下，扫描结果将显示到stdout，但是你可以将其保存到文件中以便以后解析。 1$ shodan scan submit --filename 104.27.154.244_scan.json.gz 104.27.154.244 如果主机在最近24小时内已经被扫描，那么如果没有企业级账户，将无法再次扫描。 1234$ shodan scan submit --filename 104.27.154.244_scan.json.gz 104.27.154.244 Starting Shodan scan at 2020-01-22 23:46 - 100 scan credits left No open ports found or the host has been recently crawled and cant get scanned again so soon. 你还可以查看之前启动的扫描及其ID和状态： 12345$ shodan scan list # 2 Scans Total - Showing 10 most recent scans: # Scan ID Status Size Timestamp zmWj3RNgiPbiQjx9 PROCESSING 1 2020-01-22T22:49:39.037000 8J9yu7jqTQO7AIiP PROCESSING 1 2020-01-22T22:46:34.790000 不必强制使用–filename命令要去保存扫描结果。你可以简单地启动扫描而不保存它，然后借助扫描ID在以后下载结果： 1$ shodan download --limit -1 scan-results.json.gz scan:zmWj3RNgiPbiQjx9 由于扫描是异步进行的，因此你可以随时检查扫描状态。 12$ shodan scan status zmWj3RNgiPbiQjx9 DONE 在启动扫描时查看扫描ID，你可以使用verbose模式： 12345$ shodan scan submit --verbose 13.226.145.4 Starting Shodan scan at 2020-01-23 00:00 - 97 scan credits left # Scan ID: 3z6Cqf1CCyVLtc6P# Scan status: DONE 拥有企业数据许可证的客户只需指定端口和协议/模块，就可以请求对整个Internet进行扫描。 1$ shodan scan internet 8080 wemo-http 可用的协议和模块可以与shodan扫描协议一起列出。 2.1.2.11统计 提供有关搜索查询的摘要信息 12345678910$ shodan stats -h Usage: shodan stats [OPTIONS] &lt;search query&gt; Provide summary information about a search query Options: --limit INTEGER The number of results to return. --facets TEXT List of facets to get statistics for. -O, --filename TEXT Save the results in a CSV file of the provided name. -h, --help Show this message and exit. 目测默认情况下，你只会获得前十名，而不是所有方面： 123456789101112131415161718192021222324$ shodan stats nginx Top 10 Results for Facet: country US 13,598,596 CN 6,013,993 ZA 3,067,296 DE 1,560,114 HK 1,065,990 RU 869,931 FR 859,715 GB 555,946 NL 550,591 JP 526,386 Top 10 Results for Facet: org Amazon.com 1,897,943 CloudInnovation infrastructure 1,288,280 Leaseweb USA 1,200,146 EGIHosting 1,131,973 DXTL Tseung Kwan O Service 1,052,688 Hangzhou Alibaba Advertising Co.,Ltd. 770,553 Digital Ocean 749,221 Asline Limited 680,364 Power Line Datacenter 678,264 Quantil Networks 585,935 但是我们可以自定义： 123456789101112131415161718192021$ shodan stats --facets domain,port,asn --limit 5 nginx Top 5 Results for Facet: domain amazonaws.com 2,208,958 scalabledns.com 435,980 googleusercontent.com 308,114 t-ipconnect.de 225,276 your-server.de 180,711 Top 5 Results for Facet: port 80 10,019,366 443 5,300,058 5000 588,809 5001 563,208 8080 453,604 Top 5 Results for Facet: asn as37353 2,447,679 as35916 1,878,181 as15003 1,508,786 as16509 1,236,249 as18779 1,132,180 2.2 网站2.2.1 主界面Shodan的主要界面是搜索引擎。 它的工作方式类似于CLI工具的搜索命令，但带有精美的WebUI来显示结果。它显示每个主机的摘要，与查询匹配的主机总数（如CLI的count命令）和一些统计信息（如stats命令）。 选择主机后，你将可以看到快照规范表，漏洞影响主机，开放端口和开放端口标识信息。 2.2.1.1 下载数据 搜索后，将显示“下载结果”按钮： 然后，可以JSON，CSV或XML格式下载搜索结果。 仅有JSON格式可以包含完整数据，并与Shodan CLI工具兼容。 而CSV格式将仅包含IP，端口，banner，组织和主机名。 Shodan不建议使用XML格式，因为XML比JSON占用更多的空间。 2.2.1.2 生成报告 Shodan可以基于搜索查询生成报告。 该报告包含图形/图表，可让你大致了解结果如何在Internet上分布。此功能是免费的，任何人都可以使用。 要生成报告，请在搜索结果页面上单击“创建报告”按钮： 命名报告： 生成报告通常需要花费几分钟，当Shodan准备好带有链接的报告后，你会收到一封电子邮件。报告是静态的，不会自动更新。 另外，你可以在报告页面上找到所有以前的报告。 2.2.2地图用于搜索Shodan数据库的地图界面的工作方式类似于CLI的stats命令，但是根据主机的物理位置，在交互式地图中显示结果。 由于它不会显示超过1000个结果，因此你必须放大或缩小或四处移动才能显示其他结果。 2.2.3图片图片是可检索的抓取设备截图的图库。 图像数据是从5种不同的源收集来的：VNC，远程桌面（RDP），RTSP，网络摄像头和X Windows。 has_screenshot：true过滤操作可以在全局搜索引擎中使用，以仅保留具有屏幕截图的主机。 2.2.4漏洞利用Exploits 是可一次在各种漏洞数据库中查找poc的搜索引擎。 2.2.5开发人员仪表板开发人员信息中心会显示你的积分消费和API计划。 2.2.6 网络监控器跟踪你架设在互联网上的设备。设置通知，启动扫描并完全监控你的服务器或设备。 监控仪表板可让你跟踪设备，在检测到可疑事件时提醒你，启动扫描并显示合成仪表板上的内容。 首先，添加要监视的IP，范围或域，然后选择通知服务。 然后，你可以管理资产，从此处可以启动扫描或修改触发规则。 你可以选择哪种事件将触发警报。 然后，仪表板将显示公开的服务。 2.2.7 ICS雷达ICS Radar是由Shodan爬虫建立的工业控制系统（ICS）设备的3D地图。 2.2.8 Honeypot scoreHoneypot or not?服务会将Honeyscore归因于一个IP地址（成为蜜罐的可能性）。 就像CLI的honeyscore命令一样，它只是API的抽象化： 123$ shodan honeyscore 46.244.103.227 Not a honeypot Score: 0.3 2.2.9 Shodan 2000Shodan 2000类似于Tron的界面，可随机显示主机。 2.2.10社区查询我们可以浏览社区其他用户导出和共享的查询结果。 共享查询具有标题，描述和标签，因此可以轻松浏览它们。 当然你也可以共享查询，请单击搜索结果页面上的“共享搜索”按钮。 2.3 REST APIShodan带有REST API，可用于构建基于Shodan的Web应用程序服务，或者如果您喜欢的语言中尚不存在封装库，则可以创建库。 API的基本URL为：https://api.shodan.io，所有API方法的速率均限制为1 req / sec。 该API需要通过身份验证，因此，如果您忘记提供API密钥，则会收到HTTP 401错误。 使用curl查询API计划信息的示例： 1curl -s https://api.shodan.io/api-info?key=&#123;YOUR_API_KEY&#125; | jq 123456789101112131415&#123; &quot;scan_credits&quot;: 95, &quot;usage_limits&quot;: &#123; &quot;scan_credits&quot;: 100, &quot;query_credits&quot;: 100, &quot;monitored_ips&quot;: 16 &#125;, &quot;plan&quot;: &quot;dev&quot;, &quot;https&quot;: false, &quot;unlocked&quot;: true, &quot;query_credits&quot;: 94, &quot;monitored_ips&quot;: 2, &quot;unlocked_left&quot;: 94, &quot;telnet&quot;: false &#125; 另一个获取主机信息的查询： 1curl -s https://api.shodan.io/shodan/host/1.1.1.1?key=&#123;YOUR_API_KEY&#125; | jq 123456789101112131415161718192021222324252627282930313233343536373839404142434445&#123; &quot;region_code&quot;: null, &quot;ip&quot;: 16843009, &quot;postal_code&quot;: null, &quot;country_code&quot;: &quot;AU&quot;, &quot;city&quot;: null, &quot;dma_code&quot;: null, &quot;last_update&quot;: &quot;2020-01-25T15:55:54.880090&quot;, &quot;latitude&quot;: -33.494, &quot;tags&quot;: [], &quot;area_code&quot;: null, &quot;country_name&quot;: &quot;Australia&quot;, &quot;hostnames&quot;: [ &quot;one.one.one.one&quot; ], &quot;org&quot;: &quot;Mountain View Communications&quot;, &quot;data&quot;: [ &#123; &quot;_shodan&quot;: &#123; &quot;id&quot;: &quot;f4218ca0-2728-4d7b-97f8-875f4f04149d&quot;, &quot;options&quot;: &#123; &quot;referrer&quot;: &quot;601b650e-3cc7-4189-babe-921fdf53a9e2&quot;, &quot;hostname&quot;: &quot;www.1yhaoduo.com&quot; &#125;, &quot;ptr&quot;: true, &quot;module&quot;: &quot;http&quot;, &quot;crawler&quot;: &quot;d264629436af1b777b3b513ca6ed1404d7395d80&quot; &#125;, &quot;hash&quot;: -237371161, &quot;os&quot;: null, &quot;opts&quot;: &#123;&#125;, &quot;ip&quot;: 16843009, &quot;isp&quot;: &quot;APNIC and Cloudflare DNS Resolver project&quot;, &quot;http&quot;: &#123; &quot;html_hash&quot;: 1145258596, &quot;robots_hash&quot;: null, &quot;redirects&quot;: [], &quot;securitytxt&quot;: null, &quot;title&quot;: &quot;DNS resolution error | www.1yhaoduo.com | Cloudflare&quot;, &quot;sitemap_hash&quot;: null, &quot;waf&quot;: &quot;CloudFlare&quot;, &quot;robots&quot;: null, &quot;favicon&quot;: null, &quot;host&quot;: &quot;www.1yhaoduo.com&quot;, ... 查看REST API文档以获取所有方法的完整说明。 2.4语言包（库）要将工具与Shodan API接口，可以使用封装库之一。 官方库是用Python制作的，但是在Ruby，PHP，Haskell，Rust，Perl，Node.js，Go，PowerShell，Java和C＃中也有公共库。 这里给出三个示例： Python – shodan-python Ruby – shodanz Node.js – shodan-client 2.4.1 Python – shodan-python2.4.1.1安装 与CLI工具的安装相同，因为CLI工具是在python库上制作的，它们被打包在一起。 在像pyenv这样的虚拟python环境中： 1$ easy_install shodan 在BlackArch上，可以安装以下软件包： 1# pacman -S python-shodan 然后，API密钥将始终像我们的代码中那样进行初始化： 12345import shodan SHODAN_API_KEY = &#x27;API key here&#x27; api = shodan.Shodan(SHODAN_API_KEY) 注意：该库适用于python 2和python 3，但由于不推荐使用python 2，因此我们仅使用python 3。 2.4.1.2示例 1234567891011121314# 基本搜索示例：try: # Shodan搜索 results = api.search(&#x27;apache&#x27;) ## 输出结果 print(&#x27;Results found: &#123;&#125;&#x27;.format(results[&#x27;total&#x27;])) for result in results[&#x27;matches&#x27;]: print(&#x27;IP: &#123;&#125;&#x27;.format(result[&#x27;ip_str&#x27;])) print(result[&#x27;data&#x27;]) print(&#x27;&#x27;) except shodan.APIError as e: print(&#x27;Error: &#123;&#125;&#x27;.format(e)) 1234567891011121314151617181920212223242526272829303132# 结果输出示例：IP: 65.99.237.196 HTTP/1.1 200 OK Date: Sat, 25 Jan 2020 16:07:19 GMT Server: Apache Transfer-Encoding: chunked Content-Type: text/html IP: 212.72.184.58 HTTP/1.1 200 OK Date: Sat, 25 Jan 2020 16:07:29 GMT Server: Apache/2.2.22 (Debian) mod_python/3.3.1 Python/2.7.3 mod_ssl/2.2.22 OpenSSL/1.0.1t X-Powered-By: PHP/5.4.45-0+deb7u14 Expires: Mon, 26 Jul 1997 05:00:00 GMT Cache-Control: no-store, no-cache, must-revalidate Pragma: no-cache Last-Modified: Sat, 25 Jan 2020 16:07:29 GMT Vary: Accept-Encoding Transfer-Encoding: chunked Content-Type: text/html IP: 208.109.44.217 HTTP/1.1 404 Not Found Date: Sat, 25 Jan 2020 16:07:20 GMT Server: Apache Content-Length: 381 Content-Type: text/html; charset=iso-8859-1 12345678910111213# 探测主机的可用端口示例：try: # 查找主机 host = api.host(&#x27;1.1.1.1&#x27;) # 输出基本信息 print(&quot;&quot;&quot; IP: &#123;&#125; Organization: &#123;&#125; Operating System: &#123;&#125; &quot;&quot;&quot;.format(host[&#x27;ip_str&#x27;], host.get(&#x27;org&#x27;, &#x27;n/a&#x27;), host.get(&#x27;os&#x27;, &#x27;n/a&#x27;))) # Print all banners for item in host[&#x27;data&#x27;]: print(&quot;&quot;&quot; Port: &#123;&#125; Banner: &#123;&#125; &quot;&quot;&quot;.format(item[&#x27;port&#x27;], item[&#x27;data&#x27;])) except shodan.APIError as e: print(&#x27;Error: &#123;&#125;&#x27;.format(e)) 12345678910111213141516171819202122232425262728293031323334353637# 结果输出示例：IP: 1.1.1.1 Organization: Mountain View Communications Operating System: None Port: 80 Banner: HTTP/1.1 409 Conflict Date: Sat, 25 Jan 2020 15:55:54 GMT Content-Type: text/html; charset=UTF-8 Transfer-Encoding: chunked Connection: close Set-Cookie: __cfduid=d6241813d879cf2a39d03f5d6ce5a1abc1579967754; expires=Mon, 24-Feb-20 15:55:54 GMT; path=/; domain=.www.1yhaoduo.com; HttpOnly; SameSite=Lax Cache-Control: max-age=6 Expires: Sat, 25 Jan 2020 15:56:00 GMT X-Frame-Options: SAMEORIGIN Vary: Accept-Encoding Server: cloudflare CF-RAY: 55ab6f23aee09cbd-AMS Port: 443 Banner: HTTP/1.1 301 Moved Permanently Date: Sat, 25 Jan 2020 15:47:19 GMT Transfer-Encoding: chunked Connection: keep-alive Cache-Control: max-age=3600 Expires: Sat, 25 Jan 2020 16:47:19 GMT Location: https://get.vitalsource.com/ Expect-CT: max-age=604800, report-uri=&quot;https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct&quot; Vary: Accept-Encoding Server: cloudflare CF-RAY: 55ab628f3b05acca-OTP Port: 53 Banner: \\x00\\x00\\x80\\x83\\x00\\x01\\x00\\x00\\x00\\x01\\x00\\x00\\t_services\\x07_dns-sd\\x04_udp\\x05local\\x00\\x00\\x0c\\x00\\x01\\x00\\x00\\x06\\x00\\x01\\x00\\x00(\\xac\\x00@\\x01a\\x0croot-servers\\x03net\\x00\\x05nstld\\x0cverisign-grs\\x03com\\x00xf\\xf1\\xd4\\x00\\x00\\x07\\x08\\x00\\x00\\x03\\x84\\x00\\t:\\x80\\x00\\x01Q\\x80 123456789101112131415161718192021222324252627282930313233343536373839404142# 显示统计信息示例：# 我们想要的摘要信息的属性列表 FACETS = [ (&#x27;org&#x27;, 3), &#x27;domain&#x27;, &#x27;port&#x27;, &#x27;asn&#x27;, (&#x27;country&#x27;, 10), ] FACET_TITLES = &#123; &#x27;org&#x27;: &#x27;Top 3 Organizations&#x27;, &#x27;domain&#x27;: &#x27;Top 5 Domains&#x27;, &#x27;port&#x27;: &#x27;Top 5 Ports&#x27;, &#x27;asn&#x27;: &#x27;Top 5 Autonomous Systems&#x27;, &#x27;country&#x27;: &#x27;Top 10 Countries&#x27;, &#125; try: # 查询 query = &#x27;apache 2.4&#x27; # 计算结果 result = api.count(query, facets=FACETS) print(&#x27;Shodan Summary Information&#x27;) print(&#x27;Query: %s&#x27; % query) print(&#x27;Total Results: %s\\n&#x27; % result[&#x27;total&#x27;]) # 从列表facets中打印摘要信息 for facet in result[&#x27;facets&#x27;]: print(FACET_TITLES[facet]) for term in result[&#x27;facets&#x27;][facet]: print(&#x27;%s: %s&#x27; % (term[&#x27;value&#x27;], term[&#x27;count&#x27;])) # Print an empty line between summary info print(&#x27;&#x27;) except shodan.APIError as e: print(&#x27;Error: &#123;&#125;&#x27;.format(e)) 12345678910111213141516171819202122232425262728293031323334353637383940414243# 结果输出示例：Shodan Summary Information Query: apache 2.4 Total Results: 64678 Top 3 Organizations Liquid Web, L.L.C: 23199 Amazon.com: 7588 Hetzner Online GmbH: 1818 Top 5 Domains amazonaws.com: 10679 telecom.net.ar: 1661 your-server.de: 1243 t-ipconnect.de: 664 vultr.com: 443 Top 5 Ports 80: 21212 443: 19890 8080: 3024 10000: 1723 8081: 1366 Top 5 Autonomous Systems as53824: 13848 as32244: 9351 as16509: 6294 as24940: 1759 as7303: 1453 Top 10 Countries US: 31090 DE: 5833 CN: 4554 BR: 3010 AR: 1809 JP: 1475 GB: 1168 IN: 1009 FR: 756 CA: 613 2.4.2 Ruby– shodanz 2.4.2.1安装 在rbenv的虚拟ruby环境中： 然后，API密钥进行初始化： 123require &#x27;shodanz&#x27; api = Shodanz.client.new(key: &#x27;YOUR_API_KEY&#x27;) 对于生产项目，您可能希望通过环境变量SHODAN_API_KEY读取API密钥。 2.4.2.2示例 1234567891011# 基本搜索示例：# Search Shodan results = api.host_search(&#x27;apache&#x27;) # Show results puts &quot;Results found: #&#123;results[&#x27;total&#x27;]&#125;&quot; results[&#x27;matches&#x27;].each do |result| puts &quot;IP: #&#123;result[&#x27;ip_str&#x27;]&#125;&quot; puts result[&#x27;data&#x27;] + &quot;\\n&quot; end 1234567891011121314151617181920212223242526272829303132333435363738# 结果输出示例：IP: 154.218.139.58 HTTP/1.1 200 OK Date: Tue, 28 Jan 2020 22:13:53 GMT Server: Apache Upgrade: h2 Connection: Upgrade, close Last-Modified: Wed, 26 Apr 2017 08:03:47 GMT ETag: &quot;52e-54e0d47a39ec0&quot; Accept-Ranges: bytes Content-Length: 1326 Vary: Accept-Encoding Content-Type: text/html IP: 132.148.235.102 HTTP/1.1 200 OK Date: Tue, 28 Jan 2020 22:13:53 GMT Server: Apache Upgrade: h2,h2c Connection: Upgrade Last-Modified: Fri, 10 May 2019 09:10:49 GMT ETag: &quot;a4edb-7ab-58884f152c219&quot; Accept-Ranges: bytes Content-Length: 1963 Vary: Accept-Encoding,User-Agent Content-Type: text/html IP: 112.126.140.94 HTTP/1.1 404 Not Found Date: Tue, 28 Jan 2020 22:13:34 GMT Server: Apache X-Powered-By: PHP/5.2.17 X-UA-Compatible: IE=EmulateIE7 Transfer-Encoding: chunked Content-Type: text/html 123456789101112# 探测主机的可用端口示例：# Lookup the host host = api.host(&#x27;1.1.1.1&#x27;) # Print general info puts &quot; IP: #&#123;host[&#x27;ip_str&#x27;]&#125; Organization: #&#123;host[&#x27;org&#x27;] || &#x27;n/a&#x27;&#125; Operating System: #&#123;host[&#x27;os&#x27;] || &#x27;n/a&#x27;&#125; &quot; # Print all banners host[&#x27;data&#x27;].each do |item| puts &quot; Port: #&#123;item[&#x27;port&#x27;] || &#x27;n/a&#x27;&#125; Banner: #&#123;item[&#x27;data&#x27;] || &#x27;n/a&#x27;&#125; &quot; end 1234567891011121314151617181920212223242526272829303132333435# 结果输出示例：IP: 1.1.1.1 Organization: Mountain View Communications Operating System: n/a Port: 443 Banner: HTTP/1.1 403 Forbidden Server: cloudflare Date: Tue, 28 Jan 2020 18:34:35 GMT Content-Type: text/html Content-Length: 553 Connection: keep-alive CF-RAY: 55c50fb4e8149d5a-AMS Port: 80 Banner: HTTP/1.1 409 Conflict Date: Tue, 28 Jan 2020 17:26:54 GMT Content-Type: text/html; charset=UTF-8 Transfer-Encoding: chunked Connection: close Set-Cookie: __cfduid=d189a930262f96d94a707a90d853a56bd1580232414; expires=Thu, 27-Feb-20 17:26:54 GMT; path=/; domain=.www.1yhaoduo.com; HttpOnly; SameSite=Lax Cache-Control: max-age=6 Expires: Tue, 28 Jan 2020 17:27:00 GMT X-Frame-Options: SAMEORIGIN Vary: Accept-Encoding Server: cloudflare CF-RAY: 55c4ac8fba63801a-SAN Port: 53 Banner: Recursion: enabled Resolver ID: AMS 123456789101112131415161718192021222324252627282930313233343536373839# 显示统计信息：# The list of properties we want summary information on FACETS = &#123; &#x27;org&#x27;: 3, &#x27;domain&#x27;: 5, &#x27;port&#x27;: 5, &#x27;asn&#x27;: 5, &#x27;country&#x27;: 10, &#125; FACET_TITLES = &#123; &#x27;org&#x27;: &#x27;Top 3 Organizations&#x27;, &#x27;domain&#x27;: &#x27;Top 5 Domains&#x27;, &#x27;port&#x27;: &#x27;Top 5 Ports&#x27;, &#x27;asn&#x27;: &#x27;Top 5 Autonomous Systems&#x27;, &#x27;country&#x27;: &#x27;Top 10 Countries&#x27;, &#125; # Query query = &#x27;apache 2.4&#x27; # Count results result = api.host_count(query, facets: FACETS) puts &#x27;Shodan Summary Information&#x27; puts &quot;Query: #&#123;query&#125;&quot; puts &quot;Total Results: #&#123;result[&#x27;total&#x27;]&#125;\\n&quot; # Print the summary info from the facets result[&#x27;facets&#x27;].each do |facet, _v| puts FACET_TITLES[facet] result[&#x27;facets&#x27;][facet].each do |term| puts &quot;#&#123;term[&#x27;value&#x27;]&#125;: #&#123;term[&#x27;count&#x27;]&#125;&quot; end # Print an empty line between summary info puts &#x27;&#x27; end 123456789101112131415161718192021222324252627282930313233343536373839404142# 输出结果示例：Shodan Summary Information Query: apache 2.4 Total Results: 63939 Liquid Web, L.L.C: 23126 Amazon.com: 7843 Hetzner Online GmbH: 1798 amazonaws.com: 10398 telecom.net.ar: 1609 your-server.de: 1232 t-ipconnect.de: 629 vultr.com: 450 80: 21131 443: 19772 8080: 3023 10000: 1672 8081: 1372 as53824: 13810 as32244: 9316 as16509: 6138 as24940: 1740 as7303: 1410 US: 30877 DE: 5781 CN: 4432 BR: 2949 AR: 1757 JP: 1472 GB: 1168 IN: 1030 FR: 720 CA: 613 12345678910111213141516171819202122# 基于API流的异步支持require &#x27;async&#x27; require &#x27;shodanz&#x27; api = Shodanz.client.new(key: &#x27;YOUR_API_KEY&#x27;) # Asynchronously stream banner info from shodan and check any # IP addresses against the experimental honeypot scoring service. api.streaming_api.banners do |banner| if ip = banner[&#x27;ip_str&#x27;] Async do score = api.rest_api.honeypot_score(ip).wait puts &quot;#&#123;ip&#125; has a #&#123;score * 100&#125;% chance of being a honeypot&quot; rescue Shodanz::Errors::RateLimited sleep rand retry rescue # any other errors next end end end 注意：这个异步示例来自shodanz文档。 12345678910111213141516171819202122232425# 可用到的方法：# Returns all the protocols that can be used when launching an Internet scan api.protocols # Returns a list of port numbers that the Shodan crawlers are looking for api.ports # Returns information about the Shodan account linked to this API key api.profile # Look up the IP address for the provided list of hostnames api.resolve(&#x27;archlinux.org&#x27;, &#x27;blackarch.org&#x27;) # Look up the hostnames that have been defined for the given list of IP addresses api.reverse_lookup(&#x27;138.201.81.199&#x27;, &#x27;176.31.253.211&#x27;) # Get your current IP address as seen from the Internet api.my_ip # Calculates a honeypot probability score ranging from 0 (not a honeypot) to 1.0 (is a honeypot) api.honeypot_score(&#x27;1.1.1.1&#x27;) # API Plan Information api.info 12345# Exploits APIputs client.exploit_count(port: 22, page: 1) puts client.exploit_search(&#x27;rce couchdb&#x27;, type: &#x27;remote&#x27;, platform: &#x27;linux&#x27;, author: &#x27;Metasploit&#x27;) 你可以在此处找到更多示例，或阅读shodanz API文档。 2.4.3 Node.js – shodan客户端2.4.3.1安装 在nodenv的虚拟nodejs环境中： 1$ npm i shodan-client 然后，API密钥进行初始化： 1234const util = require(&#x27;util&#x27;); const api = require(&#x27;shodan-client&#x27;); const key = &#x27;API key here&#x27;; 2.4.3.2示例 12345678910111213141516171819# 基本搜索示例：const searchOpts = &#123;&#125;; const searchQuery = &#x27;apache&#x27;; api .search(searchQuery, key, searchOpts) // Search Shodan .then(results =&gt; &#123; console.log(&#x27;Results found: &#x27; + results[&#x27;total&#x27;] + &quot;\\n&quot;); // Show results for (const result of results[&#x27;matches&#x27;]) &#123; console.log(`IP: $&#123;result[&#x27;ip_str&#x27;]&#125;`); console.log(result[&#x27;data&#x27;] + &quot;\\n&quot;); &#125; &#125;) .catch(err =&gt; &#123; console.log(&#x27;Error:&#x27;); console.log(err); &#125;); 1234567891011121314151617181920212223242526272829303132333435363738394041# 结果输出示例：Results found: 25855805 IP: 210.143.102.156 HTTP/1.1 302 Found Date: Sat, 01 Feb 2020 18:45:43 GMT Server: Apache/2.2.15 (Scientific Linux) Location: https://210.143.102.156/ Content-Length: 299 Connection: close Content-Type: text/html; charset=iso-8859-1 IP: 52.168.162.242 HTTP/1.1 200 OK Date: Sat, 01 Feb 2020 18:44:49 GMT Server: Apache X-Frame-Options: SAMEORIGIN Last-Modified: Tue, 13 Aug 2019 14:51:43 GMT ETag: &quot;f11-59000c7615dc0&quot; Accept-Ranges: bytes Content-Length: 3857 X-XSS-Protection: 1; mode=block Cache-Control: no-cache, no-store, must-revalidate Pragma: no-cache Expires: 0 Content-Type: text/html; charset=UTF-8 Set-Cookie: pwcount=2;Secure;Path=/ Cache-Control: no-cache IP: 217.160.91.209 HTTP/1.1 403 Forbidden Date: Sat, 01 Feb 2020 18:45:18 GMT Server: Apache Content-Length: 1364 X-Frame-Options: deny Content-Type: text/html 1234567891011121314151617181920# 探测主机的可用端口示例：const searchOpts = &#123;&#125;; const ip = &#x27;1.1.1.1&#x27;; api .host(ip, key, searchOpts) // Lookup the host .then(host =&gt; &#123; // Print general info console.log(` IP: $&#123;host[&#x27;ip_str&#x27;]&#125; Organization: $&#123;host[&#x27;org&#x27;] || &#x27;n/a&#x27;&#125; Operating System: $&#123;host[&#x27;os&#x27;] || &#x27;n/a&#x27;&#125; `); // Print all banners for (const item of host[&#x27;data&#x27;]) &#123; console.log(` Port: $&#123;item[&#x27;port&#x27;] || &#x27;n/a&#x27;&#125; Banner: $&#123;item[&#x27;data&#x27;] || &#x27;n/a&#x27;&#125; `); &#125; &#125;) .catch(err =&gt; &#123; console.log(&#x27;Error:&#x27;); console.log(err); &#125;); 12345678910111213141516171819202122232425262728293031# 结果输出示例：IP: 1.1.1.1 Organization: Mountain View Communications Operating System: n/a Port: 443 Banner: HTTP/1.1 403 Forbidden Server: cloudflare Date: Sat, 01 Feb 2020 19:26:14 GMT Content-Type: text/html Content-Length: 553 Connection: keep-alive CF-RAY: 55e650de89868020-SAN Port: 80 Banner: HTTP/1.1 409 Conflict Date: Sat, 01 Feb 2020 19:16:16 GMT Content-Type: text/html; charset=UTF-8 Transfer-Encoding: chunked Connection: close Set-Cookie: __cfduid=dd6d38c961c18135646e1681bd1f809ad1580584576; expires=Mon, 02-Mar-20 19:16:16 GMT; path=/; domain=.www.1yhaoduo.com; HttpOnly; SameSite=Lax Cache-Control: max-age=6 Expires: Sat, 01 Feb 2020 19:16:22 GMT X-Frame-Options: SAMEORIGIN Vary: Accept-Encoding Server: cloudflare CF-RAY: 55e64240bb5a801a-SAN 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748# 显示统计信息：const FACETS = &#123; &#x27;org&#x27;: 3, &#x27;domain&#x27;: 5, &#x27;port&#x27;: 5, &#x27;asn&#x27;: 5, &#x27;country&#x27;: 10, &#125;; const FACET_TITLES = &#123; &#x27;org&#x27;: &#x27;Top 3 Organizations&#x27;, &#x27;domain&#x27;: &#x27;Top 5 Domains&#x27;, &#x27;port&#x27;: &#x27;Top 5 Ports&#x27;, &#x27;asn&#x27;: &#x27;Top 5 Autonomous Systems&#x27;, &#x27;country&#x27;: &#x27;Top 10 Countries&#x27;, &#125;; // https://github.com/jesusprubio/shodan-client/issues/34 // const opts = &#123; facets: FACETS &#125;; const opts = &#123; facets: JSON.stringify(FACETS).replace(/[&quot;&#123;&#125;]/g, &#x27;&#x27;) &#125;; // Query const query = &#x27;apache 2.4&#x27;; api .count(query, key, opts) // Count results .then(result =&gt; &#123; console.log(&#x27;Shodan Summary Information&#x27;); console.log(`Query: $&#123;query&#125;`); console.log(`Total Results: $&#123;result[&#x27;total&#x27;]&#125;\\n`); // Print the summary info from the facets for (const facet in result[&#x27;facets&#x27;]) &#123; console.log(FACET_TITLES[facet]); for (const term of result[&#x27;facets&#x27;][facet]) &#123; console.log(`$&#123;term[&#x27;value&#x27;]&#125;: $&#123;term[&#x27;count&#x27;]&#125;`); &#125; // Print an empty line between summary info console.log(&#x27;&#x27;); &#125; &#125;) .catch(err =&gt; &#123; console.log(&#x27;Error:&#x27;); console.log(err); &#125;); 12345678910111213141516171819202122232425262728293031323334353637383940414243# 结果输出示例：Shodan Summary Information Query: apache 2.4 Total Results: 63112 Top 3 Organizations Liquid Web, L.L.C: 22985 Amazon.com: 8614 Hetzner Online GmbH: 1797 Top 5 Domains amazonaws.com: 10051 telecom.net.ar: 1600 your-server.de: 1220 t-ipconnect.de: 603 vultr.com: 429 Top 5 Ports 80: 21098 443: 19669 8080: 3040 10000: 1669 8081: 1411 Top 5 Autonomous Systems as53824: 13725 as32244: 9260 as16509: 5941 as24940: 1750 as7303: 1383 Top 10 Countries US: 30672 DE: 5780 CN: 4072 BR: 2931 AR: 1745 JP: 1415 GB: 1147 IN: 939 FR: 738 CA: 675 2.5插件2.5.1 Firefox该附加组件Shodan.io会检索收集你正在浏览当前网站的Shodan数据。它向你展示基本信息（例如组织）以及开放端口。 2.5.2 ChromiumShodan插件会展示网站服务器的托管位置（国家/地区，城市），IP的所有者以及开放的端口或运行的服务。 Chrome的Shodan插件会自动检查Shodan是否具有当前网站的任何信息。目标网站是否还运行FTP，DNS，SSH或某些不寻常服务？使用此插件，您可以查看Shodan在指定的网站/域上收集的所有信息。 3.Shodan搜索查询语法3.1 标语和属性为了充分利用Shodan，了解搜索查询语法很重要。在Shodan的语法表中，标语是包含服务信息的对象。 在官方文档中，给出了以下简化的标语示例： 123456789&#123; &quot;data&quot;: &quot;Moxa Nport Device Status: Authentication disabled Name: NP5232I_4728 MAC: 00:90:e8:47:10:2d&quot;, &quot;ip_str&quot;: &quot;46.252.132.235&quot;, &quot;port&quot;: 4800, &quot;org&quot;: &quot;Starhub Mobile&quot;, &quot;location&quot;: &#123; &quot;country_code&quot;: &quot;SG&quot; &#125; &#125; 字典的每个键都称为一个属性（data，ip_str，端口等）。每个属性存储有关服务的不同类型的信息。 默认情况下，Shodan仅在未提供过滤条件的情况下查看data属性。 3.2 搜索过滤条件您可以通过搜索Moxa Nport设备找到上一个示例标语，但是如果您从Starhub Mobile中搜索设备，则不会返回预期的结果。正如前面所说，这是因为Shodan默认情况下仅搜索data属性！ 要使用其他属性搜索数据，我们必须使用过滤器。 搜索过滤条件是特殊的关键字，用于告诉Shodan你希望搜索特定的属性。 过滤条件的格式设置为key:value 示例： 要搜索位于Starhub移动网络中的设备： org:”Starhub Mobile” 要搜索位于新加坡的设备： country:SG 当然可以将它们组合在一起： org:”Starhub Mobile” country:SG Properties/filters specification这是标语属性的完整列表（来源：官方文档）。 一般属性： 可选属性： SSL属性 4.Shodan dorks和使用案例Shodan已经给出了CLI的简单示例。 1. 易受心脏滴血漏洞影响的设备数量： 12$ shodan count vuln:cve-2014-0160 80467 2. 获取域的子域名列表 12345678910111213141516171819$ shodan domain cnn.com CNN.COM A 151.101.193.67 A 151.101.129.67 A 151.101.65.67 A 151.101.1.67 ... newsroom.blogs CNAME cnnnewsroom.wordpress.com newsstream.blogs CNAME cnninewsstream.wordpress.com now CNAME www.cnn.com ntm.blogs CNAME ntm.blogs.cnn.com.edgesuite.net olympics.blogs CNAME olympics.blogs.cnn.com.edgesuite.net olympics.edition CNAME cnn.site.scribblelive.com on A 157.166.224.172 outfront.blogs CNAME cnnoutfront.wordpress.com pagingdrgupta.blogs CNAME cnnpagingdrgupta.wordpress.com parkerspitzer.blogs CNAME cnnparkerspitzer.wordpress.com ... 3.为你的网络创建一个私人防护并订阅它 1$ shodan alert create mynetwork 198.20.58.0/24 &amp;&amp; shodan stream --alerts=all 4.查找位于瑞士的服务器最常见的10个漏洞 123456789101112$ shodan stats --facets vuln country:CH Top 10 Results for Facet: vuln cve-2018-1312 36,562 cve-2017-7679 31,109 cve-2019-0220 28,882 cve-2016-8612 27,638 cve-2018-17199 26,706 cve-2016-4975 26,560 cve-2018-1283 25,477 cve-2017-15715 25,477 cve-2017-15710 25,477 cve-2017-7668 23,261 我们将继续进行一些公开共享的查询： 5.D-Link网络摄像机DCS-5300系列，无需身份验证 1$ shodan search &#x27;d-Link Internet Camera, 200 OK&#x27; 6.启用匿名身份验证的FTP服务器 1$ shodan search &#x27;230 login successful port:21&#x27; 7.数据库 1234567891011121314151617181920212223242526# MySQL $ shodan search &#x27;product:MySQL&#x27; # MongoDB $ shodan search &#x27;product:MongoDB&#x27; # elastic $ shodan search &#x27;port:9200 json&#x27; # Memcached $ shodan search &#x27;product:Memcached&#x27; # CouchDB $ shodan search &#x27;product:CouchDB&#x27; # PostgreSQL $ shodan search &#x27;port:5432 PostgreSQL&#x27; # Riak $ shodan search &#x27;port:8087 Riak&#x27; # Redis $ shodan search &#x27;product:Redis&#x27; # Cassandra $ shodan search &#x27;product:Cassandra&#x27; 8.游戏 1234567891011# Minecraft $ shodan search &#x27;Minecraft Server port:25565&#x27; # Counter-Strike: Global Offensive $ shodan search &#x27;product:&quot;Counter-Strike Global Offensive&quot;&#x27; # Starbound $ shodan search &#x27;product:Starbound&#x27; # ARK: Survival Evolved $ shodan search &#x27;product:&quot;ARK Survival Evolved&quot;&#x27; 9.工业控制系统 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950# XZERES Wind Turbine $ shodan search &#x27;title:&quot;xzeres wind&quot;&#x27; # PIPS Automated License Plate Reader $ shodan search &#x27;html:&quot;PIPS Technology ALPR Processors&quot;&#x27; # Modbus $ shodan search &#x27;port:502&#x27; # Niagara Fox $ shodan search &#x27;port:1911,4911 product:Niagara&#x27; # GE-SRTP $ shodan search &#x27;port:18245,18246 product:&quot;general electric&quot;&#x27; # MELSEC-Q $ shodan search &#x27;port:5006,5007 product:mitsubishi&#x27; # CODESYS $ shodan search &#x27;port:2455 operating system&#x27; # S7 $ shodan search &#x27;port:102&#x27; # BACnet $ shodan search &#x27;port:47808&#x27; # HART-IP $ shodan search &#x27;port:5094 hart-ip&#x27; # Omron FINS $ shodan search &#x27;port:9600 response code&#x27; # IEC 60870-5-104 $ shodan search &#x27;port:2404 asdu address&#x27; # DNP3 $ shodan search &#x27;port:20000 source address&#x27; # EtherNet/IP $ shodan search &#x27;port:44818&#x27; # PCWorx $ shodan search &#x27;port:1962 PLC&#x27; # Crimson v3.0 $ shodan search &#x27;port:789 product:&quot;Red Lion Controls&quot;&#x27; # ProConOS $ shodan search &#x27;port:20547 PLC&#x27; 10.ASCII视频示例 Shodan on asciinema.org 11.被黑的Ubiquiti Networks设备 1$ shodan search &#x27;hacked-router-help-sos&#x27; 12.监控摄像头，用户：admin，无密码 13.家用路由器的存储设备/附加的USB存储设备 1$ shodan search &#x27;IPC$ all storage devices&#x27; 14.无需身份验证的PBX电话网关 1$ shodan search &#x27;port:23 console gateway -password&#x27; 15.Lantronix以太网适配器的管理界面，无需密码 1$ shodan search &#x27;Press Enter for Setup Mode port:9999&#x27; 16.Polycom视频会议系统免认证shell 1$ shodan search &#x27;&quot;polycom command shell&quot;&#x27; 17.未经身份验证的VNC服务器 1$ shodan search &#x27;&quot;authentication disabled&quot; port:5900,5901&#x27; 18.NPort串口转eth / MoCA设备无密码 1$ shodan search &#x27;nport -keyin port:23&#x27; 一些 PenTestIT 查询: 1.Jenkins默认安装 1$ shodan search &#x27;http.favicon.hash:81586312&#x27; 2.SonarQube安装 1$ shodan search &#x27;http.favicon.hash:1485257654&#x27; 3.IBM WebSphere版本泄漏 1$ shodan search &#x27;WASRemoteRuntimeVersion&#x27; 最后，提供了一系列搜索查询：Awesome Shodan Search Queries Website GitHub 5.应用Shodan的工具 Shodan Developer https://github.com/BullsEye0/shodan-eye Shodan Search GitHub - s0md3v/Striker: Striker is an offensive information and vulnerability scanner. GitHub - lanmaster53/recon-ng: Open Source Intelligence gathering tool aimed at reducing the time spent harvesting information from open sources. GitHub - smicallef/spiderfoot: SpiderFoot automates OSINT for threat intelligence and mapping your attack surface. GitHub - DefensePointSecurity/threat_note: DPS&#39; Lightweight Investigation Notebook GitHub - OWASP/Amass: In-depth Attack Surface Mapping and Asset Discovery GitHub - woj-ciech/Kamerka-GUI: Ultimate Internet of Things/Industrial Control Systems reconnaissance tool. GitHub - random-robbie/My-Shodan-Scripts: Collection of Scripts for shodan searching stuff. GitHub - jakejarvis/awesome-shodan-queries: 🔍 A collection of interesting, funny, and depressing search queries to plug into shodan.io 👩‍💻 GitHub - pielco11/fav-up: IP lookup by favicon using Shodan ShodanSploit它允许你使用终端上的所有Shodan访问并进行详细查询。 Github repository: GitHub - shodansploit/shodansploit: 🔎 shodansploit &gt; v1.3.0 安装： 1234567git clone https://github.com/ismailtasdelen/shodansploit.gitcd shodansploitpython shodansploit.pydocker run -t ismailtasdelen/shodansploit Docker运行： docker run –rm -it ismailtasdelen/shodansploit 菜单： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647[1] GET &gt; /shodan/host/&#123;ip&#125; [2] GET &gt; /shodan/host/count[3] GET &gt; /shodan/host/search [4] GET &gt; /shodan/host/search/tokens [5] GET &gt; /shodan/ports [6] GET &gt; /shodan/exploit/author[7] GET &gt; /shodan/exploit/cve[8] GET &gt; /shodan/exploit/msb[9] GET &gt; /shodan/exploit/bugtraq-id[10] GET &gt; /shodan/exploit/osvdb[11] GET &gt; /shodan/exploit/title[12] GET &gt; /shodan/exploit/description[13] GET &gt; /shodan/exploit/date[14] GET &gt; /shodan/exploit/code[15] GET &gt; /shodan/exploit/platform[16] GET &gt; /shodan/exploit/port[17] GET &gt; /dns/resolve[18] GET &gt; /dns/reverse [19] GET &gt; /labs/honeyscore/&#123;ip&#125;[20] GET &gt; /account/profile [21] GET &gt; /tools/myip [22] GET &gt; /tools/httpheaders[23] GET &gt; /api-info [24] Exit Fav-Up描述：从favicon图标开始并使用Shodan来查找真实IP。 安装： 由于spicy语法，至少需要python3.6。 123git clone https://github.com/pielco11/fav-up.git pip3 install -r requirements.txt 命令概述： 示例： Favicon-file: 1python3 favUp.py –favicon-file favicon.ico -sc Favicon-url 1python3 favUp.py –favicon-url https://domain.behind.cloudflare/assets/favicon.ico -sc Web 1python3 favUp.py –web domain.behind.cloudflare -sc 插件： 12345678910111213141516171819from favUp import FavUpf = FavUp() f.shodanCLI = Truef.web = &quot;domain.behind.cloudflare&quot;f.show = True f.run()for result in f.faviconsList: print(f&quot;Real-IP: &#123;result[&#x27;found_ips&#x27;]&#125;&quot;) print(f&quot;Hash: &#123;result[&#x27;favhash&#x27;]&#125;&quot;) 相关信息：Unveiling IPs behind Cloudflare :: 0xNONEprivacy 6.shodan高级应用案例 Pivoting with Property Hashes Working with Shodan Data Files Create a GIF from an IP Image History 7.Shodan同类型工具网络搜索替代产品 Onyphe – 类似于Shodan，但除了扫描之外，它还从被动DNS查询，威胁列表查询和模糊站点查询中爬取数据。 但是，免费版本比Shodan更受限制。 ZoomEye – 与Shodan非常相似，它具有大量的高级筛选规则，这些记录比Shodan的记录更先进，并且有大量的预设查询。还有一个很棒的免费API接口。 Censys –像Shodan一样，它也具有跟踪网络变化，发送警报等的功能。似乎没有免费的API计划，唯一免费的是使用它。 thingful – 仅针对物联网设备的搜索引擎。 FOFA – 就像Shodan一样，它也具有CLI工具以及Java，Go，C和Python库。 Greynoise – 就像Shodan，没有免费的API计划，只有Web可视化工具访问。但也具有python库和CLI工具。 BinaryEdge – 像Shodan一样，有搜索引擎，蜜罐/服务器监测器，但有一个不常见的功能：Torrents / DHT Monitoring。有免费的Web和API计划。 开源自动托管替代产品 IVRE – Source &gt;具有WebUI和CLI工具，是一个网络侦查框架，包括用于被动侦查（依赖于Bro，Argus，Nfdump的流分析，基于Bro和p0f的指纹分析）和主动侦查（IVRE使用Nmap进行扫描，可以使用ZMap作为预扫描工具）的工具； IVRE还可以从Nmap和Masscan导入XML输出。 purplepee – Source &gt;允许你查看有关网站的HTTP标头、DNS记录、SSL证书和开放的TCP端口以及ASN whois信息的大概关系。除了开源项目，还在线托管了一个公共实例。 References SHODAN for Penetration testers Shodan – CLI Snippets Shodan Command-Line Interface Shodan library documentation Shodan help center 本文中直接引用了更多参考 __EOF__Shodan是用于搜索连接到互联网的设备的工具。与搜索引擎可以帮助你找到网站不同，Shodan可以帮助你找到有关台式机，服务器，IoT设备等的信息。此信息包括元数据，例如在每个设备上运行的软件。 Shodan的常见用途包括网络安全，市场研究，网络风险，扫描IoT设备和跟踪勒索软件。本指南将侧重于在渗透测试中涉及的这些应用。 1.什么是Shodan？ Shodan是用于搜索互联网连接设备的搜索引擎。 它由John C. Matherly（@achillean）于2009年创建。 Shodan可让你探索互联网。发现连接在网络中的设备或网络服务，监视网络安全性，进行全球性统计等。 Shodan的网站/数据库引用了广泛的互联网端口扫描的结果。 2.Shodan接口本节将展示连接Shodan的各种方法。我们可以通过主站、官方的python命令行界面工具和库，各种语言的社区驱动库以及官方的REST API与Shodan进行交互。 2.1 CLI工具由python编写的shodan官方命令行界面（CLI），可在终端中快速使用。 2.1.1安装在pyenv这样的虚拟python环境中： 1$ easy_install shodan 在BlackArch上，可以安装以下软件包： 1＃pacman -S python-shodan 安装shodan CLI工具后，只需执行以下步骤即可设置API令牌： 1$ shodan init &lt;YOUR_API_KEY&gt; 2.1.2命令概述2.1.2.1 帮助(–help) 12$ shodan –helpUsage: shodan [OPTIONS] COMMAND [ARGS]… 12Options: -h, –help Show this message and exit. 1234567891011121314151617181920Commands:alert Manage the network alerts for your account.convert Convert the given input data file into a different format.count Returns the number of results for a search.data Bulk data access to Shodan.domain View all available information for a domain.download Download search results and save them in a compressed JSON file.honeyscore Check whether the IP is a honeypot or not.host View all available information for an IP address.info Shows general information about your account.init Initialize the Shodan command-line.myip Print your external IP address.org Manage your organization’s access to Shodan.parse Extract information out of compressed JSON files.radar Real-Time Map of some results as Shodan finds them.scan Scan an IP/ netblock using Shodan.search Search the Shodan database.stats Provide summary information about a search query.stream Stream data in real-time.version Print version of this tool. 2.1.2.2 信息(info) 如果已设置API令牌，可以检查剩余的积分数： 123$ shodan info Query credits available: 100 Scan credits available: 100 查询积分(Query credits)用于搜索Shodan，扫描积分(Scan credits)用于扫描IP。 2.1.2.3 版本(version) 12$ shodan version 1.21.2 2.1.2.4 计数 返回搜索查询的结果数。 1234$ shodan count openssh 23128 $ shodan count openssh 7 219 2.1.2.5 下载 搜索Shodan并将结果下载到文件中，其中每一行都是JSON语句。 默认情况下，仅下载1,000个结果，如果要下载更多结果，请查看–limit标志。 下载命令使你可以保存结果，然后使用parse命令对其进行处理。 因此，如果你经常搜索相同的查询，将有助于你节省积分。 导出积分用于以以下速率从网站下载数据：1个导出积分可让你下载多达10,000个结果。它们是一次性的，这意味着一旦你使用它们，它们就不会在月初自动更新。但是，如果你没有导出积分，则可以使用1个查询积分来保存100个结果。 12345678910$ shodan download -h Usage: shodan download [OPTIONS] &lt;filename&gt; &lt;search query&gt; Download search results and save them in a compressed JSON file. Options: --limit INTEGER The number of results you want to download. -1 to download all the data possible. --skip INTEGER The number of results to skip when starting the download. -h, --help Show this message and exit. 2.1.2.6 主机 查看有关主机的信息，例如主机的位置，打开的端口以及哪个组织拥有IP。 12345678910111213141516171819202122232425262728$ shodan host 1.1.1.1 1.1.1.1 Hostnames: one.one.one.one Country: Australia Organization: Mountain View Communications Updated: 2020-01-21T22:26:00.168041 Number of open ports: 3 Ports: 53/udp 80/tcp 443/tcp |-- SSL Versions: -SSLv2, -SSLv3, TLSv1, TLSv1.1, TLSv1.2, TLSv1.3 $ shodan host 138.201.81.199 138.201.81.199 Hostnames: apollo.archlinux.org Country: Germany Organization: Hetzner Online GmbH Updated: 2020-01-21T03:02:11.476262 Number of open ports: 4 Ports: 22/tcp OpenSSH (8.1) 25/tcp Postfix smtpd 80/tcp nginx (1.16.1) 443/tcp nginx (1.16.1) |-- SSL Versions: -SSLv2, -SSLv3, -TLSv1, -TLSv1.1, TLSv1.2, TLSv1.3 2.1.2.7 myip 返回你的互联网IP地址: 12$ shodan myip 199.30.49.210 2.1.2.8 parse 使用parse来分析使用download命令生成的文件。 此命令使你可以过滤出你感兴趣的字段，将JSON转换为CSV，并且便于通过管道传输到其他脚本中。 123456789101112131415$ shodan parse -h Usage: shodan parse [OPTIONS] &lt;filenames&gt; Extract information out of compressed JSON files. Options: --color / --no-color --fields TEXT List of properties to output. -f, --filters TEXT Filter the results for specific values using key:value pairs. -O, --filename TEXT Save the filtered results in the given file (append if file exists). --separator TEXT The separator between the properties of the search results. -h, --help Show this message and exit. 以下命令输出上述例子中下载的openssh数据的过滤数据： 12345678910111213141516171819202122232425262728293031323334353637$ shodan parse --fields location.country_code3,ip_str,hostnames -f port:2222 openssh-data.json.gz ITA 89.107.109.247 HUN 193.6.173.187 FRA 77.87.111.110 pro-sip1.srv.proceau.net USA 50.210.94.33 USA 35.130.36.118 035-130-036-118.biz.spectrum.com AUT 80.120.19.180 JPN 124.155.95.212 v095212.ppp.asahi-net.or.jp POL 83.144.70.114 83-144-70-114.static.chello.pl BGR 84.238.200.8 AUT 80.120.19.168 USA 162.211.126.140 CAN 76.10.173.222 mail.nanoman.ca USA 24.172.82.71 rrcs-24-172-82-71.midsouth.biz.rr.com AUT 80.120.19.182 ITA 188.14.96.151 host151-96-static.14-188-b.business.telecomitalia.it USA 216.67.111.198 216-67-111-198.static.acsalaska.net USA 73.179.238.221 c-73-179-238-221.hsd1.fl.comcast.net HKG 113.28.18.59 113-28-18-59.static.imsbiz.com $ shodan parse --fields port,ip_str,location.city,location.postal_code -f location.country_code:FR --separator , openssh-data.json.gz 22,188.92.65.5,Hésingue,68220 2222,77.87.111.110,, 22,51.89.105.163,, 22,5.135.218.249,, 22,93.177.70.142,, 2222,81.250.129.207,Paris,75116 22,51.255.85.97,, 22,193.52.218.40,Aix-en-provence,13090 22,51.77.112.86,, 22,149.202.19.41,, 22,5.39.117.104,, 22,195.154.53.223,Beaumont,95260 22,37.71.132.198,, 22,178.33.71.35,, 22,212.83.188.179,Jouy-le-moutier,95280 2222,195.200.166.216,Berre-l&#x27;etang,13130 22,82.251.157.165,Paris,75004 2.1.2.9 搜索 此命令使你通过终端的方式搜索Shodan并查看结果。 默认情况下，它将显示IP，端口，主机名和数据。你可以使用–fields参数来输出你感兴趣的任何字段。 一个简单的查询不会消耗任何积分，但是如果你使用搜索过滤器或请求第2页及以后的页面，则会消耗积分。 12345678910111213$ shodan search -h Usage: shodan search [OPTIONS] &lt;search query&gt; Search the Shodan database Options: --color / --no-color --fields TEXT List of properties to show in the search results. --limit INTEGER The number of search results that should be returned. Maximum: 1000 --separator TEXT The separator between the properties of the search results. -h, --help Show this message and exit. 不扣积分的查询示例： 123456789101112131415161718$ shodan search --fields ip_str,port,os smb 156.226.167.81 445 Windows Server 2008 R2 Datacenter 7601 Service Pack 1 156.243.104.194 445 Windows Server 2008 R2 Enterprise 7601 Service Pack 1 91.230.243.89 445 Windows 10 Pro 16299 85.3.170.18 445 Windows 6.1 213.238.170.132 445 Windows Server 2012 R2 Standard 9600 154.208.176.81 445 Windows Server 2008 R2 Enterprise 7601 Service Pack 1 103.235.171.78 445 Windows Server 2016 Datacenter 14393 102.130.40.85 445 Windows Server 2016 Standard 14393 50.3.151.113 445 Windows Server 2012 R2 Standard 9600 220.241.112.233 445 Windows Server 2019 Standard 17763 100.27.15.229 445 WWindows Server 2012 R2 Standard 9600 212.71.136.11 445 Unix 156.255.174.225 445 Windows Server 2008 R2 Datacenter 7601 Service Pack 1 156.232.162.239 445 WWindows Server 2008 R2 Enterprise 7601 Service Pack 1 186.210.102.132 445 Unix 154.94.153.34 445 Windows Server 2012 R2 Datacenter 9600 213.130.28.31 445 Windows 6.1 花费1个积分的查询示例（由于使用了过滤器）： 1234567891011121314151617$ shodan search --fields ip_str,port,org,info product:mongodb 165.22.3.203 27017 Digital Ocean 213.159.208.76 27017 JSC The First 209.6.48.11 27017 RCN 23.239.0.110 27017 Linode 52.220.230.134 27017 Amazon.com 47.91.139.188 27017 Alibaba 159.203.169.196 27017 Digital Ocean 49.233.135.180 27017 Tencent cloud computing 122.228.113.75 27017 WENZHOU, ZHEJIANG Province, P.R.China. 106.14.42.66 27017 Hangzhou Alibaba Advertising Co.,Ltd. 59.108.91.3 27017 Beijing Founder Broadband Network Technology Co.,L 115.29.176.18 27017 Hangzhou Alibaba Advertising Co.,Ltd. 148.251.46.75 27017 Hetzner Online GmbH 3.121.222.150 27017 Amazon.com 47.75.211.162 27017 Alibaba 200.219.217.122 27017 Equinix Brazil 2.1.2.10 扫描 1234567891011121314$ shodan scan -h Usage: shodan scan [OPTIONS] COMMAND [ARGS]... Scan an IP/ netblock using Shodan. Options: -h, --help Show this message and exit. Commands: internet Scan the Internet for a specific port and protocol using the... list Show recently launched scans protocols List the protocols that you can scan with using Shodan. status Check the status of an on-demand scan. submit Scan an IP/ netblock using Shodan. 启动扫描将产生以下费用：1个扫描积分可让你扫描1个IP 默认情况下，扫描结果将显示到stdout，但是你可以将其保存到文件中以便以后解析。 1$ shodan scan submit --filename 104.27.154.244_scan.json.gz 104.27.154.244 如果主机在最近24小时内已经被扫描，那么如果没有企业级账户，将无法再次扫描。 1234$ shodan scan submit --filename 104.27.154.244_scan.json.gz 104.27.154.244 Starting Shodan scan at 2020-01-22 23:46 - 100 scan credits left No open ports found or the host has been recently crawled and cant get scanned again so soon. 你还可以查看之前启动的扫描及其ID和状态： 12345$ shodan scan list # 2 Scans Total - Showing 10 most recent scans: # Scan ID Status Size Timestamp zmWj3RNgiPbiQjx9 PROCESSING 1 2020-01-22T22:49:39.037000 8J9yu7jqTQO7AIiP PROCESSING 1 2020-01-22T22:46:34.790000 不必强制使用–filename命令要去保存扫描结果。你可以简单地启动扫描而不保存它，然后借助扫描ID在以后下载结果： 1$ shodan download --limit -1 scan-results.json.gz scan:zmWj3RNgiPbiQjx9 由于扫描是异步进行的，因此你可以随时检查扫描状态。 12$ shodan scan status zmWj3RNgiPbiQjx9 DONE 在启动扫描时查看扫描ID，你可以使用verbose模式： 12345$ shodan scan submit --verbose 13.226.145.4 Starting Shodan scan at 2020-01-23 00:00 - 97 scan credits left # Scan ID: 3z6Cqf1CCyVLtc6P# Scan status: DONE 拥有企业数据许可证的客户只需指定端口和协议/模块，就可以请求对整个Internet进行扫描。 1$ shodan scan internet 8080 wemo-http 可用的协议和模块可以与shodan扫描协议一起列出。 2.1.2.11统计 提供有关搜索查询的摘要信息 12345678910$ shodan stats -h Usage: shodan stats [OPTIONS] &lt;search query&gt; Provide summary information about a search query Options: --limit INTEGER The number of results to return. --facets TEXT List of facets to get statistics for. -O, --filename TEXT Save the results in a CSV file of the provided name. -h, --help Show this message and exit. 目测默认情况下，你只会获得前十名，而不是所有方面： 123456789101112131415161718192021222324$ shodan stats nginx Top 10 Results for Facet: country US 13,598,596 CN 6,013,993 ZA 3,067,296 DE 1,560,114 HK 1,065,990 RU 869,931 FR 859,715 GB 555,946 NL 550,591 JP 526,386 Top 10 Results for Facet: org Amazon.com 1,897,943 CloudInnovation infrastructure 1,288,280 Leaseweb USA 1,200,146 EGIHosting 1,131,973 DXTL Tseung Kwan O Service 1,052,688 Hangzhou Alibaba Advertising Co.,Ltd. 770,553 Digital Ocean 749,221 Asline Limited 680,364 Power Line Datacenter 678,264 Quantil Networks 585,935 但是我们可以自定义： 123456789101112131415161718192021$ shodan stats --facets domain,port,asn --limit 5 nginx Top 5 Results for Facet: domain amazonaws.com 2,208,958 scalabledns.com 435,980 googleusercontent.com 308,114 t-ipconnect.de 225,276 your-server.de 180,711 Top 5 Results for Facet: port 80 10,019,366 443 5,300,058 5000 588,809 5001 563,208 8080 453,604 Top 5 Results for Facet: asn as37353 2,447,679 as35916 1,878,181 as15003 1,508,786 as16509 1,236,249 as18779 1,132,180 2.2 网站2.2.1 主界面Shodan的主要界面是搜索引擎。 它的工作方式类似于CLI工具的搜索命令，但带有精美的WebUI来显示结果。它显示每个主机的摘要，与查询匹配的主机总数（如CLI的count命令）和一些统计信息（如stats命令）。 选择主机后，你将可以看到快照规范表，漏洞影响主机，开放端口和开放端口标识信息。 2.2.1.1 下载数据 搜索后，将显示“下载结果”按钮： 然后，可以JSON，CSV或XML格式下载搜索结果。 仅有JSON格式可以包含完整数据，并与Shodan CLI工具兼容。 而CSV格式将仅包含IP，端口，banner，组织和主机名。 Shodan不建议使用XML格式，因为XML比JSON占用更多的空间。 2.2.1.2 生成报告 Shodan可以基于搜索查询生成报告。 该报告包含图形/图表，可让你大致了解结果如何在Internet上分布。此功能是免费的，任何人都可以使用。 要生成报告，请在搜索结果页面上单击“创建报告”按钮： 命名报告： 生成报告通常需要花费几分钟，当Shodan准备好带有链接的报告后，你会收到一封电子邮件。报告是静态的，不会自动更新。 另外，你可以在报告页面上找到所有以前的报告。 2.2.2地图用于搜索Shodan数据库的地图界面的工作方式类似于CLI的stats命令，但是根据主机的物理位置，在交互式地图中显示结果。 由于它不会显示超过1000个结果，因此你必须放大或缩小或四处移动才能显示其他结果。 2.2.3图片图片是可检索的抓取设备截图的图库。 图像数据是从5种不同的源收集来的：VNC，远程桌面（RDP），RTSP，网络摄像头和X Windows。 has_screenshot：true过滤操作可以在全局搜索引擎中使用，以仅保留具有屏幕截图的主机。 2.2.4漏洞利用Exploits 是可一次在各种漏洞数据库中查找poc的搜索引擎。 2.2.5开发人员仪表板开发人员信息中心会显示你的积分消费和API计划。 2.2.6 网络监控器跟踪你架设在互联网上的设备。设置通知，启动扫描并完全监控你的服务器或设备。 监控仪表板可让你跟踪设备，在检测到可疑事件时提醒你，启动扫描并显示合成仪表板上的内容。 首先，添加要监视的IP，范围或域，然后选择通知服务。 然后，你可以管理资产，从此处可以启动扫描或修改触发规则。 你可以选择哪种事件将触发警报。 然后，仪表板将显示公开的服务。 2.2.7 ICS雷达ICS Radar是由Shodan爬虫建立的工业控制系统（ICS）设备的3D地图。 2.2.8 Honeypot scoreHoneypot or not?服务会将Honeyscore归因于一个IP地址（成为蜜罐的可能性）。 就像CLI的honeyscore命令一样，它只是API的抽象化： 123$ shodan honeyscore 46.244.103.227 Not a honeypot Score: 0.3 2.2.9 Shodan 2000Shodan 2000类似于Tron的界面，可随机显示主机。 2.2.10社区查询我们可以浏览社区其他用户导出和共享的查询结果。 共享查询具有标题，描述和标签，因此可以轻松浏览它们。 当然你也可以共享查询，请单击搜索结果页面上的“共享搜索”按钮。 2.3 REST APIShodan带有REST API，可用于构建基于Shodan的Web应用程序服务，或者如果您喜欢的语言中尚不存在封装库，则可以创建库。 API的基本URL为：https://api.shodan.io，所有API方法的速率均限制为1 req / sec。 该API需要通过身份验证，因此，如果您忘记提供API密钥，则会收到HTTP 401错误。 使用curl查询API计划信息的示例： 1curl -s https://api.shodan.io/api-info?key=&#123;YOUR_API_KEY&#125; | jq 123456789101112131415&#123; &quot;scan_credits&quot;: 95, &quot;usage_limits&quot;: &#123; &quot;scan_credits&quot;: 100, &quot;query_credits&quot;: 100, &quot;monitored_ips&quot;: 16 &#125;, &quot;plan&quot;: &quot;dev&quot;, &quot;https&quot;: false, &quot;unlocked&quot;: true, &quot;query_credits&quot;: 94, &quot;monitored_ips&quot;: 2, &quot;unlocked_left&quot;: 94, &quot;telnet&quot;: false &#125; 另一个获取主机信息的查询： 1curl -s https://api.shodan.io/shodan/host/1.1.1.1?key=&#123;YOUR_API_KEY&#125; | jq 123456789101112131415161718192021222324252627282930313233343536373839404142434445&#123; &quot;region_code&quot;: null, &quot;ip&quot;: 16843009, &quot;postal_code&quot;: null, &quot;country_code&quot;: &quot;AU&quot;, &quot;city&quot;: null, &quot;dma_code&quot;: null, &quot;last_update&quot;: &quot;2020-01-25T15:55:54.880090&quot;, &quot;latitude&quot;: -33.494, &quot;tags&quot;: [], &quot;area_code&quot;: null, &quot;country_name&quot;: &quot;Australia&quot;, &quot;hostnames&quot;: [ &quot;one.one.one.one&quot; ], &quot;org&quot;: &quot;Mountain View Communications&quot;, &quot;data&quot;: [ &#123; &quot;_shodan&quot;: &#123; &quot;id&quot;: &quot;f4218ca0-2728-4d7b-97f8-875f4f04149d&quot;, &quot;options&quot;: &#123; &quot;referrer&quot;: &quot;601b650e-3cc7-4189-babe-921fdf53a9e2&quot;, &quot;hostname&quot;: &quot;www.1yhaoduo.com&quot; &#125;, &quot;ptr&quot;: true, &quot;module&quot;: &quot;http&quot;, &quot;crawler&quot;: &quot;d264629436af1b777b3b513ca6ed1404d7395d80&quot; &#125;, &quot;hash&quot;: -237371161, &quot;os&quot;: null, &quot;opts&quot;: &#123;&#125;, &quot;ip&quot;: 16843009, &quot;isp&quot;: &quot;APNIC and Cloudflare DNS Resolver project&quot;, &quot;http&quot;: &#123; &quot;html_hash&quot;: 1145258596, &quot;robots_hash&quot;: null, &quot;redirects&quot;: [], &quot;securitytxt&quot;: null, &quot;title&quot;: &quot;DNS resolution error | www.1yhaoduo.com | Cloudflare&quot;, &quot;sitemap_hash&quot;: null, &quot;waf&quot;: &quot;CloudFlare&quot;, &quot;robots&quot;: null, &quot;favicon&quot;: null, &quot;host&quot;: &quot;www.1yhaoduo.com&quot;, ... 查看REST API文档以获取所有方法的完整说明。 2.4语言包（库）要将工具与Shodan API接口，可以使用封装库之一。 官方库是用Python制作的，但是在Ruby，PHP，Haskell，Rust，Perl，Node.js，Go，PowerShell，Java和C＃中也有公共库。 这里给出三个示例： Python – shodan-python Ruby – shodanz Node.js – shodan-client 2.4.1 Python – shodan-python2.4.1.1安装 与CLI工具的安装相同，因为CLI工具是在python库上制作的，它们被打包在一起。 在像pyenv这样的虚拟python环境中： 1$ easy_install shodan 在BlackArch上，可以安装以下软件包： 1# pacman -S python-shodan 然后，API密钥将始终像我们的代码中那样进行初始化： 12345import shodan SHODAN_API_KEY = &#x27;API key here&#x27; api = shodan.Shodan(SHODAN_API_KEY) 注意：该库适用于python 2和python 3，但由于不推荐使用python 2，因此我们仅使用python 3。 2.4.1.2示例 1234567891011121314# 基本搜索示例：try: # Shodan搜索 results = api.search(&#x27;apache&#x27;) ## 输出结果 print(&#x27;Results found: &#123;&#125;&#x27;.format(results[&#x27;total&#x27;])) for result in results[&#x27;matches&#x27;]: print(&#x27;IP: &#123;&#125;&#x27;.format(result[&#x27;ip_str&#x27;])) print(result[&#x27;data&#x27;]) print(&#x27;&#x27;) except shodan.APIError as e: print(&#x27;Error: &#123;&#125;&#x27;.format(e)) 1234567891011121314151617181920212223242526272829303132# 结果输出示例：IP: 65.99.237.196 HTTP/1.1 200 OK Date: Sat, 25 Jan 2020 16:07:19 GMT Server: Apache Transfer-Encoding: chunked Content-Type: text/html IP: 212.72.184.58 HTTP/1.1 200 OK Date: Sat, 25 Jan 2020 16:07:29 GMT Server: Apache/2.2.22 (Debian) mod_python/3.3.1 Python/2.7.3 mod_ssl/2.2.22 OpenSSL/1.0.1t X-Powered-By: PHP/5.4.45-0+deb7u14 Expires: Mon, 26 Jul 1997 05:00:00 GMT Cache-Control: no-store, no-cache, must-revalidate Pragma: no-cache Last-Modified: Sat, 25 Jan 2020 16:07:29 GMT Vary: Accept-Encoding Transfer-Encoding: chunked Content-Type: text/html IP: 208.109.44.217 HTTP/1.1 404 Not Found Date: Sat, 25 Jan 2020 16:07:20 GMT Server: Apache Content-Length: 381 Content-Type: text/html; charset=iso-8859-1 12345678910111213# 探测主机的可用端口示例：try: # 查找主机 host = api.host(&#x27;1.1.1.1&#x27;) # 输出基本信息 print(&quot;&quot;&quot; IP: &#123;&#125; Organization: &#123;&#125; Operating System: &#123;&#125; &quot;&quot;&quot;.format(host[&#x27;ip_str&#x27;], host.get(&#x27;org&#x27;, &#x27;n/a&#x27;), host.get(&#x27;os&#x27;, &#x27;n/a&#x27;))) # Print all banners for item in host[&#x27;data&#x27;]: print(&quot;&quot;&quot; Port: &#123;&#125; Banner: &#123;&#125; &quot;&quot;&quot;.format(item[&#x27;port&#x27;], item[&#x27;data&#x27;])) except shodan.APIError as e: print(&#x27;Error: &#123;&#125;&#x27;.format(e)) 12345678910111213141516171819202122232425262728293031323334353637# 结果输出示例：IP: 1.1.1.1 Organization: Mountain View Communications Operating System: None Port: 80 Banner: HTTP/1.1 409 Conflict Date: Sat, 25 Jan 2020 15:55:54 GMT Content-Type: text/html; charset=UTF-8 Transfer-Encoding: chunked Connection: close Set-Cookie: __cfduid=d6241813d879cf2a39d03f5d6ce5a1abc1579967754; expires=Mon, 24-Feb-20 15:55:54 GMT; path=/; domain=.www.1yhaoduo.com; HttpOnly; SameSite=Lax Cache-Control: max-age=6 Expires: Sat, 25 Jan 2020 15:56:00 GMT X-Frame-Options: SAMEORIGIN Vary: Accept-Encoding Server: cloudflare CF-RAY: 55ab6f23aee09cbd-AMS Port: 443 Banner: HTTP/1.1 301 Moved Permanently Date: Sat, 25 Jan 2020 15:47:19 GMT Transfer-Encoding: chunked Connection: keep-alive Cache-Control: max-age=3600 Expires: Sat, 25 Jan 2020 16:47:19 GMT Location: https://get.vitalsource.com/ Expect-CT: max-age=604800, report-uri=&quot;https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct&quot; Vary: Accept-Encoding Server: cloudflare CF-RAY: 55ab628f3b05acca-OTP Port: 53 Banner: \\x00\\x00\\x80\\x83\\x00\\x01\\x00\\x00\\x00\\x01\\x00\\x00\\t_services\\x07_dns-sd\\x04_udp\\x05local\\x00\\x00\\x0c\\x00\\x01\\x00\\x00\\x06\\x00\\x01\\x00\\x00(\\xac\\x00@\\x01a\\x0croot-servers\\x03net\\x00\\x05nstld\\x0cverisign-grs\\x03com\\x00xf\\xf1\\xd4\\x00\\x00\\x07\\x08\\x00\\x00\\x03\\x84\\x00\\t:\\x80\\x00\\x01Q\\x80 123456789101112131415161718192021222324252627282930313233343536373839404142# 显示统计信息示例：# 我们想要的摘要信息的属性列表 FACETS = [ (&#x27;org&#x27;, 3), &#x27;domain&#x27;, &#x27;port&#x27;, &#x27;asn&#x27;, (&#x27;country&#x27;, 10), ] FACET_TITLES = &#123; &#x27;org&#x27;: &#x27;Top 3 Organizations&#x27;, &#x27;domain&#x27;: &#x27;Top 5 Domains&#x27;, &#x27;port&#x27;: &#x27;Top 5 Ports&#x27;, &#x27;asn&#x27;: &#x27;Top 5 Autonomous Systems&#x27;, &#x27;country&#x27;: &#x27;Top 10 Countries&#x27;, &#125; try: # 查询 query = &#x27;apache 2.4&#x27; # 计算结果 result = api.count(query, facets=FACETS) print(&#x27;Shodan Summary Information&#x27;) print(&#x27;Query: %s&#x27; % query) print(&#x27;Total Results: %s\\n&#x27; % result[&#x27;total&#x27;]) # 从列表facets中打印摘要信息 for facet in result[&#x27;facets&#x27;]: print(FACET_TITLES[facet]) for term in result[&#x27;facets&#x27;][facet]: print(&#x27;%s: %s&#x27; % (term[&#x27;value&#x27;], term[&#x27;count&#x27;])) # Print an empty line between summary info print(&#x27;&#x27;) except shodan.APIError as e: print(&#x27;Error: &#123;&#125;&#x27;.format(e)) 12345678910111213141516171819202122232425262728293031323334353637383940414243# 结果输出示例：Shodan Summary Information Query: apache 2.4 Total Results: 64678 Top 3 Organizations Liquid Web, L.L.C: 23199 Amazon.com: 7588 Hetzner Online GmbH: 1818 Top 5 Domains amazonaws.com: 10679 telecom.net.ar: 1661 your-server.de: 1243 t-ipconnect.de: 664 vultr.com: 443 Top 5 Ports 80: 21212 443: 19890 8080: 3024 10000: 1723 8081: 1366 Top 5 Autonomous Systems as53824: 13848 as32244: 9351 as16509: 6294 as24940: 1759 as7303: 1453 Top 10 Countries US: 31090 DE: 5833 CN: 4554 BR: 3010 AR: 1809 JP: 1475 GB: 1168 IN: 1009 FR: 756 CA: 613 2.4.2 Ruby– shodanz 2.4.2.1安装 在rbenv的虚拟ruby环境中： 然后，API密钥进行初始化： 123require &#x27;shodanz&#x27; api = Shodanz.client.new(key: &#x27;YOUR_API_KEY&#x27;) 对于生产项目，您可能希望通过环境变量SHODAN_API_KEY读取API密钥。 2.4.2.2示例 1234567891011# 基本搜索示例：# Search Shodan results = api.host_search(&#x27;apache&#x27;) # Show results puts &quot;Results found: #&#123;results[&#x27;total&#x27;]&#125;&quot; results[&#x27;matches&#x27;].each do |result| puts &quot;IP: #&#123;result[&#x27;ip_str&#x27;]&#125;&quot; puts result[&#x27;data&#x27;] + &quot;\\n&quot; end 1234567891011121314151617181920212223242526272829303132333435363738# 结果输出示例：IP: 154.218.139.58 HTTP/1.1 200 OK Date: Tue, 28 Jan 2020 22:13:53 GMT Server: Apache Upgrade: h2 Connection: Upgrade, close Last-Modified: Wed, 26 Apr 2017 08:03:47 GMT ETag: &quot;52e-54e0d47a39ec0&quot; Accept-Ranges: bytes Content-Length: 1326 Vary: Accept-Encoding Content-Type: text/html IP: 132.148.235.102 HTTP/1.1 200 OK Date: Tue, 28 Jan 2020 22:13:53 GMT Server: Apache Upgrade: h2,h2c Connection: Upgrade Last-Modified: Fri, 10 May 2019 09:10:49 GMT ETag: &quot;a4edb-7ab-58884f152c219&quot; Accept-Ranges: bytes Content-Length: 1963 Vary: Accept-Encoding,User-Agent Content-Type: text/html IP: 112.126.140.94 HTTP/1.1 404 Not Found Date: Tue, 28 Jan 2020 22:13:34 GMT Server: Apache X-Powered-By: PHP/5.2.17 X-UA-Compatible: IE=EmulateIE7 Transfer-Encoding: chunked Content-Type: text/html 123456789101112# 探测主机的可用端口示例：# Lookup the host host = api.host(&#x27;1.1.1.1&#x27;) # Print general info puts &quot; IP: #&#123;host[&#x27;ip_str&#x27;]&#125; Organization: #&#123;host[&#x27;org&#x27;] || &#x27;n/a&#x27;&#125; Operating System: #&#123;host[&#x27;os&#x27;] || &#x27;n/a&#x27;&#125; &quot; # Print all banners host[&#x27;data&#x27;].each do |item| puts &quot; Port: #&#123;item[&#x27;port&#x27;] || &#x27;n/a&#x27;&#125; Banner: #&#123;item[&#x27;data&#x27;] || &#x27;n/a&#x27;&#125; &quot; end 1234567891011121314151617181920212223242526272829303132333435# 结果输出示例：IP: 1.1.1.1 Organization: Mountain View Communications Operating System: n/a Port: 443 Banner: HTTP/1.1 403 Forbidden Server: cloudflare Date: Tue, 28 Jan 2020 18:34:35 GMT Content-Type: text/html Content-Length: 553 Connection: keep-alive CF-RAY: 55c50fb4e8149d5a-AMS Port: 80 Banner: HTTP/1.1 409 Conflict Date: Tue, 28 Jan 2020 17:26:54 GMT Content-Type: text/html; charset=UTF-8 Transfer-Encoding: chunked Connection: close Set-Cookie: __cfduid=d189a930262f96d94a707a90d853a56bd1580232414; expires=Thu, 27-Feb-20 17:26:54 GMT; path=/; domain=.www.1yhaoduo.com; HttpOnly; SameSite=Lax Cache-Control: max-age=6 Expires: Tue, 28 Jan 2020 17:27:00 GMT X-Frame-Options: SAMEORIGIN Vary: Accept-Encoding Server: cloudflare CF-RAY: 55c4ac8fba63801a-SAN Port: 53 Banner: Recursion: enabled Resolver ID: AMS 123456789101112131415161718192021222324252627282930313233343536373839# 显示统计信息：# The list of properties we want summary information on FACETS = &#123; &#x27;org&#x27;: 3, &#x27;domain&#x27;: 5, &#x27;port&#x27;: 5, &#x27;asn&#x27;: 5, &#x27;country&#x27;: 10, &#125; FACET_TITLES = &#123; &#x27;org&#x27;: &#x27;Top 3 Organizations&#x27;, &#x27;domain&#x27;: &#x27;Top 5 Domains&#x27;, &#x27;port&#x27;: &#x27;Top 5 Ports&#x27;, &#x27;asn&#x27;: &#x27;Top 5 Autonomous Systems&#x27;, &#x27;country&#x27;: &#x27;Top 10 Countries&#x27;, &#125; # Query query = &#x27;apache 2.4&#x27; # Count results result = api.host_count(query, facets: FACETS) puts &#x27;Shodan Summary Information&#x27; puts &quot;Query: #&#123;query&#125;&quot; puts &quot;Total Results: #&#123;result[&#x27;total&#x27;]&#125;\\n&quot; # Print the summary info from the facets result[&#x27;facets&#x27;].each do |facet, _v| puts FACET_TITLES[facet] result[&#x27;facets&#x27;][facet].each do |term| puts &quot;#&#123;term[&#x27;value&#x27;]&#125;: #&#123;term[&#x27;count&#x27;]&#125;&quot; end # Print an empty line between summary info puts &#x27;&#x27; end 123456789101112131415161718192021222324252627282930313233343536373839404142# 输出结果示例：Shodan Summary Information Query: apache 2.4 Total Results: 63939 Liquid Web, L.L.C: 23126 Amazon.com: 7843 Hetzner Online GmbH: 1798 amazonaws.com: 10398 telecom.net.ar: 1609 your-server.de: 1232 t-ipconnect.de: 629 vultr.com: 450 80: 21131 443: 19772 8080: 3023 10000: 1672 8081: 1372 as53824: 13810 as32244: 9316 as16509: 6138 as24940: 1740 as7303: 1410 US: 30877 DE: 5781 CN: 4432 BR: 2949 AR: 1757 JP: 1472 GB: 1168 IN: 1030 FR: 720 CA: 613 12345678910111213141516171819202122# 基于API流的异步支持require &#x27;async&#x27; require &#x27;shodanz&#x27; api = Shodanz.client.new(key: &#x27;YOUR_API_KEY&#x27;) # Asynchronously stream banner info from shodan and check any # IP addresses against the experimental honeypot scoring service. api.streaming_api.banners do |banner| if ip = banner[&#x27;ip_str&#x27;] Async do score = api.rest_api.honeypot_score(ip).wait puts &quot;#&#123;ip&#125; has a #&#123;score * 100&#125;% chance of being a honeypot&quot; rescue Shodanz::Errors::RateLimited sleep rand retry rescue # any other errors next end end end 注意：这个异步示例来自shodanz文档。 12345678910111213141516171819202122232425# 可用到的方法：# Returns all the protocols that can be used when launching an Internet scan api.protocols # Returns a list of port numbers that the Shodan crawlers are looking for api.ports # Returns information about the Shodan account linked to this API key api.profile # Look up the IP address for the provided list of hostnames api.resolve(&#x27;archlinux.org&#x27;, &#x27;blackarch.org&#x27;) # Look up the hostnames that have been defined for the given list of IP addresses api.reverse_lookup(&#x27;138.201.81.199&#x27;, &#x27;176.31.253.211&#x27;) # Get your current IP address as seen from the Internet api.my_ip # Calculates a honeypot probability score ranging from 0 (not a honeypot) to 1.0 (is a honeypot) api.honeypot_score(&#x27;1.1.1.1&#x27;) # API Plan Information api.info 12345# Exploits APIputs client.exploit_count(port: 22, page: 1) puts client.exploit_search(&#x27;rce couchdb&#x27;, type: &#x27;remote&#x27;, platform: &#x27;linux&#x27;, author: &#x27;Metasploit&#x27;) 你可以在此处找到更多示例，或阅读shodanz API文档。 2.4.3 Node.js – shodan客户端2.4.3.1安装 在nodenv的虚拟nodejs环境中： 1$ npm i shodan-client 然后，API密钥进行初始化： 1234const util = require(&#x27;util&#x27;); const api = require(&#x27;shodan-client&#x27;); const key = &#x27;API key here&#x27;; 2.4.3.2示例 12345678910111213141516171819# 基本搜索示例：const searchOpts = &#123;&#125;; const searchQuery = &#x27;apache&#x27;; api .search(searchQuery, key, searchOpts) // Search Shodan .then(results =&gt; &#123; console.log(&#x27;Results found: &#x27; + results[&#x27;total&#x27;] + &quot;\\n&quot;); // Show results for (const result of results[&#x27;matches&#x27;]) &#123; console.log(`IP: $&#123;result[&#x27;ip_str&#x27;]&#125;`); console.log(result[&#x27;data&#x27;] + &quot;\\n&quot;); &#125; &#125;) .catch(err =&gt; &#123; console.log(&#x27;Error:&#x27;); console.log(err); &#125;); 1234567891011121314151617181920212223242526272829303132333435363738394041# 结果输出示例：Results found: 25855805 IP: 210.143.102.156 HTTP/1.1 302 Found Date: Sat, 01 Feb 2020 18:45:43 GMT Server: Apache/2.2.15 (Scientific Linux) Location: https://210.143.102.156/ Content-Length: 299 Connection: close Content-Type: text/html; charset=iso-8859-1 IP: 52.168.162.242 HTTP/1.1 200 OK Date: Sat, 01 Feb 2020 18:44:49 GMT Server: Apache X-Frame-Options: SAMEORIGIN Last-Modified: Tue, 13 Aug 2019 14:51:43 GMT ETag: &quot;f11-59000c7615dc0&quot; Accept-Ranges: bytes Content-Length: 3857 X-XSS-Protection: 1; mode=block Cache-Control: no-cache, no-store, must-revalidate Pragma: no-cache Expires: 0 Content-Type: text/html; charset=UTF-8 Set-Cookie: pwcount=2;Secure;Path=/ Cache-Control: no-cache IP: 217.160.91.209 HTTP/1.1 403 Forbidden Date: Sat, 01 Feb 2020 18:45:18 GMT Server: Apache Content-Length: 1364 X-Frame-Options: deny Content-Type: text/html 1234567891011121314151617181920# 探测主机的可用端口示例：const searchOpts = &#123;&#125;; const ip = &#x27;1.1.1.1&#x27;; api .host(ip, key, searchOpts) // Lookup the host .then(host =&gt; &#123; // Print general info console.log(` IP: $&#123;host[&#x27;ip_str&#x27;]&#125; Organization: $&#123;host[&#x27;org&#x27;] || &#x27;n/a&#x27;&#125; Operating System: $&#123;host[&#x27;os&#x27;] || &#x27;n/a&#x27;&#125; `); // Print all banners for (const item of host[&#x27;data&#x27;]) &#123; console.log(` Port: $&#123;item[&#x27;port&#x27;] || &#x27;n/a&#x27;&#125; Banner: $&#123;item[&#x27;data&#x27;] || &#x27;n/a&#x27;&#125; `); &#125; &#125;) .catch(err =&gt; &#123; console.log(&#x27;Error:&#x27;); console.log(err); &#125;); 12345678910111213141516171819202122232425262728293031# 结果输出示例：IP: 1.1.1.1 Organization: Mountain View Communications Operating System: n/a Port: 443 Banner: HTTP/1.1 403 Forbidden Server: cloudflare Date: Sat, 01 Feb 2020 19:26:14 GMT Content-Type: text/html Content-Length: 553 Connection: keep-alive CF-RAY: 55e650de89868020-SAN Port: 80 Banner: HTTP/1.1 409 Conflict Date: Sat, 01 Feb 2020 19:16:16 GMT Content-Type: text/html; charset=UTF-8 Transfer-Encoding: chunked Connection: close Set-Cookie: __cfduid=dd6d38c961c18135646e1681bd1f809ad1580584576; expires=Mon, 02-Mar-20 19:16:16 GMT; path=/; domain=.www.1yhaoduo.com; HttpOnly; SameSite=Lax Cache-Control: max-age=6 Expires: Sat, 01 Feb 2020 19:16:22 GMT X-Frame-Options: SAMEORIGIN Vary: Accept-Encoding Server: cloudflare CF-RAY: 55e64240bb5a801a-SAN 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748# 显示统计信息：const FACETS = &#123; &#x27;org&#x27;: 3, &#x27;domain&#x27;: 5, &#x27;port&#x27;: 5, &#x27;asn&#x27;: 5, &#x27;country&#x27;: 10, &#125;; const FACET_TITLES = &#123; &#x27;org&#x27;: &#x27;Top 3 Organizations&#x27;, &#x27;domain&#x27;: &#x27;Top 5 Domains&#x27;, &#x27;port&#x27;: &#x27;Top 5 Ports&#x27;, &#x27;asn&#x27;: &#x27;Top 5 Autonomous Systems&#x27;, &#x27;country&#x27;: &#x27;Top 10 Countries&#x27;, &#125;; // https://github.com/jesusprubio/shodan-client/issues/34 // const opts = &#123; facets: FACETS &#125;; const opts = &#123; facets: JSON.stringify(FACETS).replace(/[&quot;&#123;&#125;]/g, &#x27;&#x27;) &#125;; // Query const query = &#x27;apache 2.4&#x27;; api .count(query, key, opts) // Count results .then(result =&gt; &#123; console.log(&#x27;Shodan Summary Information&#x27;); console.log(`Query: $&#123;query&#125;`); console.log(`Total Results: $&#123;result[&#x27;total&#x27;]&#125;\\n`); // Print the summary info from the facets for (const facet in result[&#x27;facets&#x27;]) &#123; console.log(FACET_TITLES[facet]); for (const term of result[&#x27;facets&#x27;][facet]) &#123; console.log(`$&#123;term[&#x27;value&#x27;]&#125;: $&#123;term[&#x27;count&#x27;]&#125;`); &#125; // Print an empty line between summary info console.log(&#x27;&#x27;); &#125; &#125;) .catch(err =&gt; &#123; console.log(&#x27;Error:&#x27;); console.log(err); &#125;); 12345678910111213141516171819202122232425262728293031323334353637383940414243# 结果输出示例：Shodan Summary Information Query: apache 2.4 Total Results: 63112 Top 3 Organizations Liquid Web, L.L.C: 22985 Amazon.com: 8614 Hetzner Online GmbH: 1797 Top 5 Domains amazonaws.com: 10051 telecom.net.ar: 1600 your-server.de: 1220 t-ipconnect.de: 603 vultr.com: 429 Top 5 Ports 80: 21098 443: 19669 8080: 3040 10000: 1669 8081: 1411 Top 5 Autonomous Systems as53824: 13725 as32244: 9260 as16509: 5941 as24940: 1750 as7303: 1383 Top 10 Countries US: 30672 DE: 5780 CN: 4072 BR: 2931 AR: 1745 JP: 1415 GB: 1147 IN: 939 FR: 738 CA: 675 2.5插件2.5.1 Firefox该附加组件Shodan.io会检索收集你正在浏览当前网站的Shodan数据。它向你展示基本信息（例如组织）以及开放端口。 2.5.2 ChromiumShodan插件会展示网站服务器的托管位置（国家/地区，城市），IP的所有者以及开放的端口或运行的服务。 Chrome的Shodan插件会自动检查Shodan是否具有当前网站的任何信息。目标网站是否还运行FTP，DNS，SSH或某些不寻常服务？使用此插件，您可以查看Shodan在指定的网站/域上收集的所有信息。 3.Shodan搜索查询语法3.1 标语和属性为了充分利用Shodan，了解搜索查询语法很重要。在Shodan的语法表中，标语是包含服务信息的对象。 在官方文档中，给出了以下简化的标语示例： 123456789&#123; &quot;data&quot;: &quot;Moxa Nport Device Status: Authentication disabled Name: NP5232I_4728 MAC: 00:90:e8:47:10:2d&quot;, &quot;ip_str&quot;: &quot;46.252.132.235&quot;, &quot;port&quot;: 4800, &quot;org&quot;: &quot;Starhub Mobile&quot;, &quot;location&quot;: &#123; &quot;country_code&quot;: &quot;SG&quot; &#125; &#125; 字典的每个键都称为一个属性（data，ip_str，端口等）。每个属性存储有关服务的不同类型的信息。 默认情况下，Shodan仅在未提供过滤条件的情况下查看data属性。 3.2 搜索过滤条件您可以通过搜索Moxa Nport设备找到上一个示例标语，但是如果您从Starhub Mobile中搜索设备，则不会返回预期的结果。正如前面所说，这是因为Shodan默认情况下仅搜索data属性！ 要使用其他属性搜索数据，我们必须使用过滤器。 搜索过滤条件是特殊的关键字，用于告诉Shodan你希望搜索特定的属性。 过滤条件的格式设置为key:value 示例： 要搜索位于Starhub移动网络中的设备： org:”Starhub Mobile” 要搜索位于新加坡的设备： country:SG 当然可以将它们组合在一起： org:”Starhub Mobile” country:SG Properties/filters specification这是标语属性的完整列表（来源：官方文档）。 一般属性： 可选属性： SSL属性 4.Shodan dorks和使用案例Shodan已经给出了CLI的简单示例。 1. 易受心脏滴血漏洞影响的设备数量： 12$ shodan count vuln:cve-2014-0160 80467 2. 获取域的子域名列表 12345678910111213141516171819$ shodan domain cnn.com CNN.COM A 151.101.193.67 A 151.101.129.67 A 151.101.65.67 A 151.101.1.67 ... newsroom.blogs CNAME cnnnewsroom.wordpress.com newsstream.blogs CNAME cnninewsstream.wordpress.com now CNAME www.cnn.com ntm.blogs CNAME ntm.blogs.cnn.com.edgesuite.net olympics.blogs CNAME olympics.blogs.cnn.com.edgesuite.net olympics.edition CNAME cnn.site.scribblelive.com on A 157.166.224.172 outfront.blogs CNAME cnnoutfront.wordpress.com pagingdrgupta.blogs CNAME cnnpagingdrgupta.wordpress.com parkerspitzer.blogs CNAME cnnparkerspitzer.wordpress.com ... 3.为你的网络创建一个私人防护并订阅它 1$ shodan alert create mynetwork 198.20.58.0/24 &amp;&amp; shodan stream --alerts=all 4.查找位于瑞士的服务器最常见的10个漏洞 123456789101112$ shodan stats --facets vuln country:CH Top 10 Results for Facet: vuln cve-2018-1312 36,562 cve-2017-7679 31,109 cve-2019-0220 28,882 cve-2016-8612 27,638 cve-2018-17199 26,706 cve-2016-4975 26,560 cve-2018-1283 25,477 cve-2017-15715 25,477 cve-2017-15710 25,477 cve-2017-7668 23,261 我们将继续进行一些公开共享的查询： 5.D-Link网络摄像机DCS-5300系列，无需身份验证 1$ shodan search &#x27;d-Link Internet Camera, 200 OK&#x27; 6.启用匿名身份验证的FTP服务器 1$ shodan search &#x27;230 login successful port:21&#x27; 7.数据库 1234567891011121314151617181920212223242526# MySQL $ shodan search &#x27;product:MySQL&#x27; # MongoDB $ shodan search &#x27;product:MongoDB&#x27; # elastic $ shodan search &#x27;port:9200 json&#x27; # Memcached $ shodan search &#x27;product:Memcached&#x27; # CouchDB $ shodan search &#x27;product:CouchDB&#x27; # PostgreSQL $ shodan search &#x27;port:5432 PostgreSQL&#x27; # Riak $ shodan search &#x27;port:8087 Riak&#x27; # Redis $ shodan search &#x27;product:Redis&#x27; # Cassandra $ shodan search &#x27;product:Cassandra&#x27; 8.游戏 1234567891011# Minecraft $ shodan search &#x27;Minecraft Server port:25565&#x27; # Counter-Strike: Global Offensive $ shodan search &#x27;product:&quot;Counter-Strike Global Offensive&quot;&#x27; # Starbound $ shodan search &#x27;product:Starbound&#x27; # ARK: Survival Evolved $ shodan search &#x27;product:&quot;ARK Survival Evolved&quot;&#x27; 9.工业控制系统 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950# XZERES Wind Turbine $ shodan search &#x27;title:&quot;xzeres wind&quot;&#x27; # PIPS Automated License Plate Reader $ shodan search &#x27;html:&quot;PIPS Technology ALPR Processors&quot;&#x27; # Modbus $ shodan search &#x27;port:502&#x27; # Niagara Fox $ shodan search &#x27;port:1911,4911 product:Niagara&#x27; # GE-SRTP $ shodan search &#x27;port:18245,18246 product:&quot;general electric&quot;&#x27; # MELSEC-Q $ shodan search &#x27;port:5006,5007 product:mitsubishi&#x27; # CODESYS $ shodan search &#x27;port:2455 operating system&#x27; # S7 $ shodan search &#x27;port:102&#x27; # BACnet $ shodan search &#x27;port:47808&#x27; # HART-IP $ shodan search &#x27;port:5094 hart-ip&#x27; # Omron FINS $ shodan search &#x27;port:9600 response code&#x27; # IEC 60870-5-104 $ shodan search &#x27;port:2404 asdu address&#x27; # DNP3 $ shodan search &#x27;port:20000 source address&#x27; # EtherNet/IP $ shodan search &#x27;port:44818&#x27; # PCWorx $ shodan search &#x27;port:1962 PLC&#x27; # Crimson v3.0 $ shodan search &#x27;port:789 product:&quot;Red Lion Controls&quot;&#x27; # ProConOS $ shodan search &#x27;port:20547 PLC&#x27; 10.ASCII视频示例 Shodan on asciinema.org 11.被黑的Ubiquiti Networks设备 1$ shodan search &#x27;hacked-router-help-sos&#x27; 12.监控摄像头，用户：admin，无密码 13.家用路由器的存储设备/附加的USB存储设备 1$ shodan search &#x27;IPC$ all storage devices&#x27; 14.无需身份验证的PBX电话网关 1$ shodan search &#x27;port:23 console gateway -password&#x27; 15.Lantronix以太网适配器的管理界面，无需密码 1$ shodan search &#x27;Press Enter for Setup Mode port:9999&#x27; 16.Polycom视频会议系统免认证shell 1$ shodan search &#x27;&quot;polycom command shell&quot;&#x27; 17.未经身份验证的VNC服务器 1$ shodan search &#x27;&quot;authentication disabled&quot; port:5900,5901&#x27; 18.NPort串口转eth / MoCA设备无密码 1$ shodan search &#x27;nport -keyin port:23&#x27; 一些 PenTestIT 查询: 1.Jenkins默认安装 1$ shodan search &#x27;http.favicon.hash:81586312&#x27; 2.SonarQube安装 1$ shodan search &#x27;http.favicon.hash:1485257654&#x27; 3.IBM WebSphere版本泄漏 1$ shodan search &#x27;WASRemoteRuntimeVersion&#x27; 最后，提供了一系列搜索查询：Awesome Shodan Search Queries Website GitHub 5.应用Shodan的工具 Shodan Developer GitHub - BullsEye0/shodan-eye: Shodan Eye This tool collects all the information about all devices directly connected to the internet using the specified keywords that you enter. Author: Jolanda de Koff Shodan Search https://github.com/s0md3v/Striker GitHub - lanmaster53/recon-ng: Open Source Intelligence gathering tool aimed at reducing the time spent harvesting information from open sources. GitHub - smicallef/spiderfoot: SpiderFoot automates OSINT for threat intelligence and mapping your attack surface. GitHub - DefensePointSecurity/threat_note: DPS&#39; Lightweight Investigation Notebook GitHub - OWASP/Amass: In-depth Attack Surface Mapping and Asset Discovery GitHub - woj-ciech/Kamerka-GUI: Ultimate Internet of Things/Industrial Control Systems reconnaissance tool. GitHub - random-robbie/My-Shodan-Scripts: Collection of Scripts for shodan searching stuff. GitHub - jakejarvis/awesome-shodan-queries: 🔍 A collection of interesting, funny, and depressing search queries to plug into shodan.io 👩‍💻 GitHub - pielco11/fav-up: IP lookup by favicon using Shodan ShodanSploit它允许你使用终端上的所有Shodan访问并进行详细查询。 Github repository: GitHub - shodansploit/shodansploit: 🔎 shodansploit &gt; v1.3.0 安装： 1234567git clone https://github.com/ismailtasdelen/shodansploit.gitcd shodansploitpython shodansploit.pydocker run -t ismailtasdelen/shodansploit Docker运行： docker run –rm -it ismailtasdelen/shodansploit 菜单： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647[1] GET &gt; /shodan/host/&#123;ip&#125; [2] GET &gt; /shodan/host/count[3] GET &gt; /shodan/host/search [4] GET &gt; /shodan/host/search/tokens [5] GET &gt; /shodan/ports [6] GET &gt; /shodan/exploit/author[7] GET &gt; /shodan/exploit/cve[8] GET &gt; /shodan/exploit/msb[9] GET &gt; /shodan/exploit/bugtraq-id[10] GET &gt; /shodan/exploit/osvdb[11] GET &gt; /shodan/exploit/title[12] GET &gt; /shodan/exploit/description[13] GET &gt; /shodan/exploit/date[14] GET &gt; /shodan/exploit/code[15] GET &gt; /shodan/exploit/platform[16] GET &gt; /shodan/exploit/port[17] GET &gt; /dns/resolve[18] GET &gt; /dns/reverse [19] GET &gt; /labs/honeyscore/&#123;ip&#125;[20] GET &gt; /account/profile [21] GET &gt; /tools/myip [22] GET &gt; /tools/httpheaders[23] GET &gt; /api-info [24] Exit Fav-Up描述：从favicon图标开始并使用Shodan来查找真实IP。 安装： 由于spicy语法，至少需要python3.6。 123git clone https://github.com/pielco11/fav-up.git pip3 install -r requirements.txt 命令概述： 示例： Favicon-file: 1python3 favUp.py –favicon-file favicon.ico -sc Favicon-url 1python3 favUp.py –favicon-url https://domain.behind.cloudflare/assets/favicon.ico -sc Web 1python3 favUp.py –web domain.behind.cloudflare -sc 插件： 12345678910111213141516171819from favUp import FavUpf = FavUp() f.shodanCLI = Truef.web = &quot;domain.behind.cloudflare&quot;f.show = True f.run()for result in f.faviconsList: print(f&quot;Real-IP: &#123;result[&#x27;found_ips&#x27;]&#125;&quot;) print(f&quot;Hash: &#123;result[&#x27;favhash&#x27;]&#125;&quot;) 相关信息：Unveiling IPs behind Cloudflare :: 0xNONEprivacy 6.shodan高级应用案例 Pivoting with Property Hashes Working with Shodan Data Files Create a GIF from an IP Image History 7.Shodan同类型工具网络搜索替代产品 Onyphe – 类似于Shodan，但除了扫描之外，它还从被动DNS查询，威胁列表查询和模糊站点查询中爬取数据。 但是，免费版本比Shodan更受限制。 ZoomEye – 与Shodan非常相似，它具有大量的高级筛选规则，这些记录比Shodan的记录更先进，并且有大量的预设查询。还有一个很棒的免费API接口。 Censys –像Shodan一样，它也具有跟踪网络变化，发送警报等的功能。似乎没有免费的API计划，唯一免费的是使用它。 thingful – 仅针对物联网设备的搜索引擎。 FOFA – 就像Shodan一样，它也具有CLI工具以及Java，Go，C和Python库。 Greynoise – 就像Shodan，没有免费的API计划，只有Web可视化工具访问。但也具有python库和CLI工具。 BinaryEdge – 像Shodan一样，有搜索引擎，蜜罐/服务器监测器，但有一个不常见的功能：Torrents / DHT Monitoring。有免费的Web和API计划。 开源自动托管替代产品 IVRE – Source &gt;具有WebUI和CLI工具，是一个网络侦查框架，包括用于被动侦查（依赖于Bro，Argus，Nfdump的流分析，基于Bro和p0f的指纹分析）和主动侦查（IVRE使用Nmap进行扫描，可以使用ZMap作为预扫描工具）的工具； IVRE还可以从Nmap和Masscan导入XML输出。 purplepee – Source &gt;允许你查看有关网站的HTTP标头、DNS记录、SSL证书和开放的TCP端口以及ASN whois信息的大概关系。除了开源项目，还在线托管了一个公共实例。 References SHODAN for Penetration testers Shodan – CLI Snippets Shodan Command-Line Interface Shodan library documentation Shodan help center 本文中直接引用了更多参考 –EOF– 转载：https://www.cnblogs.com/H4ck3R-XiX/p/12950736.html","categories":[{"name":"网络安全","slug":"网络安全","permalink":"http://www.lvhejin.cn/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"},{"name":"Shodan","slug":"网络安全/Shodan","permalink":"http://www.lvhejin.cn/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/Shodan/"}],"tags":[{"name":"网络安全","slug":"网络安全","permalink":"http://www.lvhejin.cn/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"},{"name":"Shodan","slug":"Shodan","permalink":"http://www.lvhejin.cn/tags/Shodan/"}]},{"title":"一分钟教你社工利器：搜索引擎高级语法","slug":"搜索引擎/Baidu/一分钟教你社工利器：搜索引擎高级语法","date":"2022-11-21T11:56:23.000Z","updated":"2024-01-05T17:32:17.651Z","comments":true,"path":"2022/11/21/搜索引擎/Baidu/一分钟教你社工利器：搜索引擎高级语法/index.html","link":"","permalink":"http://www.lvhejin.cn/2022/11/21/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/Baidu/%E4%B8%80%E5%88%86%E9%92%9F%E6%95%99%E4%BD%A0%E7%A4%BE%E5%B7%A5%E5%88%A9%E5%99%A8%EF%BC%9A%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95/index.html","excerpt":"","text":"简 介 随着网络安全防护技术及安全防护产品的应用越来越成熟，很多常规的入侵手段越来越难。在这种情况下，更多的攻击者将攻击手法转向了社会工程学攻击，同时利用社会工程学的攻击手段也日趋成熟，技术含量也越来越高。在实施社会工程学攻击之前必须掌握一定的心理学、人际关系、行为学等知识和技能，以便搜集和掌握实施社会工程学攻击行为所需要的资料和信息等。 信息收集就是攻击者常用的社会工程学攻击手段之一。信息收集是通过各种手段去获取攻击目标的一些相关信息。例如：攻击对象的身份职务、兴趣爱好等信息；目标机构的业务流程、机构内部常用的一些术语、行话等。 3.1搜索引擎高级搜索语法 社会工程学攻击者在实施攻击的过程中，会用到各种各样可以利用的工具和手段，比如：利用一个他们知道的电话号码打一通诱使你上当的电话；制作一个含攻击代码的崭新U盘扔在你必经的路上；制作一个以假乱真的页面建议你打开等等。下面介绍的就是社会工程学攻击者实施攻击中，常常会用到的一些辅助工具。 3.1.1搜索引擎 对于搜索引擎相信大家都不会陌生，每天日常生活中都会使用百度等大型搜索引擎站点对相关信息进行检索，搜索引擎的主要作用也正是将与用户搜索相匹配的信息反馈给用户。然而，搜索引擎在给网民提供便利的同时，也成为了攻击者最常利用的信息收集工具。 1.百度高级搜索语法 百度高级搜索语法是采用特定的关键词，把查询内容范围限定在更精确的范围内，使用户更方便找到需要的结果。 1）常用百度高级搜索语法 以下是比较常用的百度高级搜索语法介绍和举例。 +（加号） 功能：加号是搜索同时包含两个关键字的内容。相当于空格和and。 格式：关键词1+关键词2 例如：安全技术+渗透，是搜索同时包含“安全技术”和“渗透”两个关键词的页面。 -（减号） 功能：减号是让某一关键字不要出现在搜索结果里面。 格式：关键词1（空格）-关键词2 例如：安全技术 -渗透，是搜索“安全技术”这个关键词但不包含“渗透”的页面。 搜索结果，如图3.1所示。 图3.1 减号搜索举例 “”（双引号） 功能：把关键字打上双引号（中英文均可）后把引号内容作为整体来搜索。 格式：“关键词” 例如：“防火墙安全技术” 在百度中输入“防火墙安全技术”作为一个整体内容来搜索，当我们需要精确搜索“防火墙安全技术”的时候，此方法非常实用。如图3.2所示。 图3.2 双引号搜索举例 如果不加双引号，会将包含“防火墙”、“安全”等关键词的内容全部返回，这样就会增加很多无用信息，干扰我们的搜索结果。如图3.3所示。 图3.3 未加引号搜索举例 or（或） 功能：用或的方法搜索两个或更多关键字。 格式：“关键词1or关键词2” 例如：“防火墙or安全技术” 在百度中输入“防火墙or安全技术”，单独包含“防火墙”、“安全技术”的页面，以及这两个关键词都包含的页面，都会搜索出来。 Intitle 功能：将查询内容范围限定在网页标题中，搜索要找的页面。也常与其他关键词结合使用。 格式：关键词1（空格） intitle:关键词2 例如：字典 intitle:社会工程学 在百度中输入“字典 intitle:社会工程学”。搜索网页标题中包含“社会工程学”，正文中包含“字典”关键字的所有页面。 Intext 功能：将查询内容范围限定在正文中，搜索要找的页面。 格式：intext:关键词 例如：intext:社会工程学 在百度中输入“intext:社会工程学”。搜索网页正文中包含”社会工程学”关键字的所有页面。 filetype 功能：搜索包含关键词的特定格式文档页面,支持文档格式有pdf、doc，xls，ppt，rtf,all（所有上面的文档格式）。通常与其他关键词结合使用。 格式：filetype:文档格式（空格）关键词2 例如：在百度中输入“filetype:doc 社会工程学”，搜索“社会工程学”相关的doc文档页面。如图：3.4所示。 图3.4 filetype搜索举例 inurl 功能：在URL地址中搜索关键词。 格式：inurl:关键词 例如：inurl:admin.jsp 在百度中输入“inurl:admin.jsp”,将返回很多“admin.jsp”结尾的URL页面。 site 功能：搜索指定网站的页面内容，也常与其他关键词结合使用。 格式：site:网站域名（空格）关键词 例如：site:www.****.com 网络工程师 在百度中输入“site:www..com 网络工程师”，在www..com 网站相关页面，搜索包含“网络工程师”相关的页面。 以上是常用的百度高级搜索语法介绍，目前主流的搜索引擎都支持类似的高级搜索功能，这些功能的灵活应用，可以给我们搜索查找信息带来很大的便利。但如同“Google hacking”一样，如果应用在社会工程学攻击者手中，也可以成为他们进行信息收集的有利工具。 2）搜索引擎安全防范方法 从安全的角度来说，搜索引擎是个双刃剑，既能方便用户查找信息，帮助企业增加曝光度，也有被别有用心者利用进行信息收集的风险。对于防止搜索引擎过度信息采集方面，通常使用robots.txt文件来进行安全限制。 Robots协议（也称为爬虫协议、机器人协议等）的全称是“网络爬虫排除标准”（Robots Exclusion Protocol），它是是国际互联网界通行的道德规范，基于以下原则建立： 搜索技术应服务于人类，同时尊重信息提供者的意愿，并维护其隐私权； 网站有义务保护其使用者的个人信息和隐私不被侵犯。 网站通过Robots协议告诉搜索引擎哪些页面可以抓取，哪些页面不能抓取。当一个搜索机器人访问一个网站时会先看该站是否存在robots.txt这个文件，如果存在这个文件，搜索机器人将不再对该文件中所限制的目录下的信息进行采集，这样可以防范网站上的一些敏感目录被搜索引擎抓取到，如图3.5所示。 图3.5 robots.txt文件内容示例 因此，保护网站安全，防范搜索引擎导致的信息泄露，网站的开发者需要通过robots.txt文件来限制搜索引擎信息抓取范围。同时还要确保robots.txt中不包含敏感信息，将不希望对外公布的目录或文件使用权限控制等方法，使得匿名用户无法访问这些信息，降低因搜索引擎导致信息泄露的风险。 转载：https://author.baidu.com/home?app_id=1708043485114948","categories":[{"name":"搜索引擎","slug":"搜索引擎","permalink":"http://www.lvhejin.cn/categories/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"},{"name":"Baidu","slug":"搜索引擎/Baidu","permalink":"http://www.lvhejin.cn/categories/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/Baidu/"}],"tags":[{"name":"搜索引擎","slug":"搜索引擎","permalink":"http://www.lvhejin.cn/tags/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"},{"name":"Baidu","slug":"Baidu","permalink":"http://www.lvhejin.cn/tags/Baidu/"},{"name":"搜索语法","slug":"搜索语法","permalink":"http://www.lvhejin.cn/tags/%E6%90%9C%E7%B4%A2%E8%AF%AD%E6%B3%95/"}]},{"title":"一分钟教你社工利器：shodan暗黑搜索引擎使用方法","slug":"网络安全/Shodan/一分钟教你社工利器：shodan暗黑搜索引擎使用方法","date":"2022-11-21T11:48:32.000Z","updated":"2024-01-05T17:32:17.655Z","comments":true,"path":"2022/11/21/网络安全/Shodan/一分钟教你社工利器：shodan暗黑搜索引擎使用方法/index.html","link":"","permalink":"http://www.lvhejin.cn/2022/11/21/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/Shodan/%E4%B8%80%E5%88%86%E9%92%9F%E6%95%99%E4%BD%A0%E7%A4%BE%E5%B7%A5%E5%88%A9%E5%99%A8%EF%BC%9Ashodan%E6%9A%97%E9%BB%91%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/index.html","excerpt":"","text":"简 介 Shodan是个啥？之前没听说过吗？那可要小声说你是做安全的，会被人笑话。如果说百度、谷歌是名门正派，那Shodan就是典型的魔教一般的存在；如果百度、谷歌是一招一式都遵规守矩的江湖大侠，那Shodan就是专踢人裤裆的市井混混。和百度、谷歌干的事儿类似，但Shodan专搜各家各户IT系统设备的软肋。好人用了他可以发现自己的漏洞及时修复，恶人用了他也可以助纣为虐，大耍流氓。无论你是厌他还是爱他，他都是做安全的人绕不开的一个存在。 做安全的人当然个个都想做伸张正义、威风凛凛的大侠，但千万别让人用Shodan踢了你的裤裆，那样不仅丢人，而且要命。 4.1 Shodan Shodan（撒旦黑暗）搜索引擎是由Web工程师是由约翰·马瑟利（John Matherly）于2009年开发的，被业内称为“最可怕的搜索引擎”。 Shodan的用法与Google大致相同，但根本区别在于Shodan不是在网上搜索网址，而是直接进入互联网的背后通道。Shodan可以说是一款“黑暗”谷歌，一刻不停地在寻找着所有和互联网关联的服务器、摄像头、打印机、路由器等。 Shodan具备惊人的搜索能力，每个月Shodan都会在大约5亿个服务器上日夜不停地搜集信息。凡是联接到互联网的红绿灯、安全摄像头、家庭自动化设备以及加热系统等等都会被轻易的搜索到。利用Shodan强大的搜索功能可以帮助安全从业者对互联网平台进行安全审计，但如果被互联网上不怀好意者利用，也可成为他们搜集信息伺机攻击的“帮凶”。 Shodan的常见语法，如表3-1所示。 表3-1 Shodan的常见语法 1）Shodan的基本使用方法 登录Shodan官网即可登录此搜索引擎。如图4.1所示。 图4.1 Shodan网站 登录后应首先注册账户再使用，如果不注册直接使用，功能上会有诸多限制，比如：不可以过滤条件等等。 要执行搜索在搜索引擎框中输入要审计的网站公网IP地址，点击搜索按钮后，返回的结果如图4.2所示。 图4.2 搜索地址返回信息 此网站地址所属的国家、地区、平台、开放的端口等信息全部展示出来。从中可以看出此网站的安全漏洞非常明显，使用的Web服务器版本信息一览无余。 如果要搜索摄像头，在搜索框中输入“webcam”，也可以两个关键字结合使用，如输入“city:beijing webcam”，即是搜索北京的摄像头，如图4.3所示。 图4.3 搜索位于北京的摄像头 随便点击一个IP地址进入链接页面，即可看到关于这个IP地址的详细信息，右侧展示的为对外开放的全部端口号，如图4.4所示。 图4.4 开放的端号信息 在3.12页面向下拉，左侧可以看到该地址所连设备存在的安全漏洞信息，如图4.5所示。 图4.5 漏洞信息 使用Shodan搜索引擎也通过端口号进行搜索，如：“port:3306,1433”等，点击搜索按钮后，返回开放了3306和1433端口的网址信息。如图4.6所示。 图4.6 基于端口号搜索 点击任意一个公网IP地址链接，可以进一步查看详情。从图4.7可以看出，之所以被shodan扫描并发现数据库端口，是因为该机构信息平台的安全管理严重忽视导致。 根据以往课程中学习到的知识，大家都知道：数据库端口通常不需要在互联网开放，数据库端口也完全可以改成非标准端口，以及仅允许必要的IP地址访问数据库等，这些常规的安全手段都可以提高互联网平台的安全性。正是因为态度上的忽视，才导致了互联网平台存在巨大的安全隐患。 2）Shodan扫描的防范方法 做好互联网平台自身的安全防护 虽然Shodan以其强大的搜索引擎可以发现海量的网站信息以及安全漏洞，但是首先应该做好网站自身的安全防范，如：配置严格的安全策略、部署WAF防火墙、部署IPS等安全设备，这些都可以大大提升互联网平台的安全性。做好基本的安全防护，即使被Shodan扫描，也保证其获得的信息是非常有限的，这样可以在很大程度上降低安全风险。 将Shodan的IP地址纳入防火墙黑名单 国内外的一些威胁情报平台定期会更新Shodan扫描器的地址，比如ISC SANS威胁情报平台，提供的Shodan扫描器IP地址信息，截选的部分截图，如图4.7所示。 图4.7 ISC SANS平台提供的Shodan扫描器 Shodan扫描器执行扫描过程中也会暴露出自己的IP地址，如图4.8所示。 图4.8 Shodan扫描器扫描器的IP地址 通过收集整理Shodan扫描器的IP地址，纳入防火墙的黑名单。图4.9即是互联网用户整理的Shodan扫描器部分IP地址的截图。 图4.9 Shodan扫描器部分IP地址 虽然Shodan扫描器遍布世界各地，不能保证将所有扫描器IP都抵挡在外，但只要我们足够勤奋及时更新，也可以在很大程度上抵御Shodan扫描器的扫描攻击。 如何防止被Shodan踢了裤裆？这回你有点谱了吧，那就在下面留言吧。 当然，你也可以用Shodan嘲笑一下你的朋友，看他是不是还在穿着开裆裤，迈着绅士的方步裸奔。 转载：https://author.baidu.com/home?app_id=1708043485114948","categories":[{"name":"网络安全","slug":"网络安全","permalink":"http://www.lvhejin.cn/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"},{"name":"Shodan","slug":"网络安全/Shodan","permalink":"http://www.lvhejin.cn/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/Shodan/"}],"tags":[{"name":"网络安全","slug":"网络安全","permalink":"http://www.lvhejin.cn/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"},{"name":"Shodan","slug":"Shodan","permalink":"http://www.lvhejin.cn/tags/Shodan/"}]},{"title":"如何删除GIT中的.DS_Store","slug":"Git/如何删除GIT中的.DS_Store","date":"2022-11-16T18:10:25.000Z","updated":"2024-01-05T17:32:17.599Z","comments":true,"path":"2022/11/16/Git/如何删除GIT中的.DS_Store/index.html","link":"","permalink":"http://www.lvhejin.cn/2022/11/16/Git/%E5%A6%82%E4%BD%95%E5%88%A0%E9%99%A4GIT%E4%B8%AD%E7%9A%84.DS_Store/index.html","excerpt":"","text":".DS_Store 是什么使用 Mac 的用户可能会注意到，系统经常会自动在每个目录生成一个隐藏的 .DS_Store 文件。.DS_Store(英文全称 Desktop Services Store)是一种由苹果公司的Mac OS X操作系统所创造的隐藏文件，目的在于存贮目录的自定义属性，例如文件们的图标位置或者是背景色的选择。相当于 Windows 下的 desktop.ini。 删除 .DS_Store如果你的项目中还没有自动生成的 .DS_Store 文件，那么直接将 .DS_Store 加入到 .gitignore 文件就可以了。如果你的项目中已经存在 .DS_Store 文件，那就需要先从项目中将其删除，再将它加入到 .gitignore。如下： 1234567删除项目中的所有.DS_Store。这会跳过不在项目中的 .DS_Store1.find . -name .DS_Store -print0 | xargs -0 git rm -f --ignore-unmatch将 .DS_Store 加入到 .gitignore2.echo .DS_Store &gt;&gt; ~/.gitignore更新项目3.git add --all4.git commit -m &#x27;.DS_Store banished!&#x27; 如果你只需要删除磁盘上的 .DS_Store，可以使用下面的命令来删除当前目录及其子目录下的所有.DS_Store 文件: 1find . -name &#x27;*.DS_Store&#x27; -type f -delete 禁用或启用自动生成 禁止.DS_store生成： 1defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool TRUE 恢复.DS_store生成：恢复.DS_store生成： 1defaults delete com.apple.desktopservices DSDontWriteNetworkStores 转载：https://blog.csdn.net/houzhizhen/article/details/121760798","categories":[{"name":"Git","slug":"Git","permalink":"http://www.lvhejin.cn/categories/Git/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://www.lvhejin.cn/tags/Git/"},{"name":"Mac","slug":"Mac","permalink":"http://www.lvhejin.cn/tags/Mac/"}]},{"title":"工具 nrm ls 不带星，并且 nrm current 没有任何输出","slug":"NodeJS/Nrm/工具 nrm ls 不带星，并且 nrm current 没有任何输出","date":"2022-11-14T11:34:29.000Z","updated":"2024-01-05T17:32:17.643Z","comments":true,"path":"2022/11/14/NodeJS/Nrm/工具 nrm ls 不带星，并且 nrm current 没有任何输出/index.html","link":"","permalink":"http://www.lvhejin.cn/2022/11/14/NodeJS/Nrm/%E5%B7%A5%E5%85%B7%20nrm%20ls%20%E4%B8%8D%E5%B8%A6%E6%98%9F%EF%BC%8C%E5%B9%B6%E4%B8%94%20nrm%20current%20%E6%B2%A1%E6%9C%89%E4%BB%BB%E4%BD%95%E8%BE%93%E5%87%BA/index.html","excerpt":"","text":"原文：https://makeoptim.com/tool/nrm-ls-no-star 问题现象执行以下命令，安装最新版 nrm 1$ npm i -g nrm 执行以下命令 12345678$ nrm ls npm ---------- https://registry.npmjs.org/ yarn --------- https://registry.yarnpkg.com/ tencent ------ https://mirrors.cloud.tencent.com/npm/ cnpm --------- https://r.cnpmjs.org/ taobao ------- https://registry.npmmirror.com/ npmMirror ---- https://skimdb.npmjs.com/registry/ 没有看到星（*）标注当前的 registry。 执行以下命令 1$ nrm current 没有任何输出 解决方法执行以下命令，通过源码安装 nrm 1$ npm install Pana/nrm -g 验证 12345678910$ nrm ls* npm ---------- https://registry.npmjs.org/ yarn --------- https://registry.yarnpkg.com/ tencent ------ https://mirrors.cloud.tencent.com/npm/ cnpm --------- https://r.cnpmjs.org/ taobao ------- https://registry.npmmirror.com/ npmMirror ---- https://skimdb.npmjs.com/registry/$ nrm currentYou are using npm registry. 参考链接 https://github.com/Pana/nrm/issues/111 https://github.com/Pana/nrm/issues/66","categories":[{"name":"NodeJS","slug":"NodeJS","permalink":"http://www.lvhejin.cn/categories/NodeJS/"},{"name":"Nrm","slug":"NodeJS/Nrm","permalink":"http://www.lvhejin.cn/categories/NodeJS/Nrm/"}],"tags":[{"name":"开发异常","slug":"开发异常","permalink":"http://www.lvhejin.cn/tags/%E5%BC%80%E5%8F%91%E5%BC%82%E5%B8%B8/"},{"name":"Nrm","slug":"Nrm","permalink":"http://www.lvhejin.cn/tags/Nrm/"}]},{"title":"yarn错误The engine \"node\" is incompatible with this module","slug":"Go/Go-admin-ui/Github上Go-admin-ui项目在MAC构建异常及解决方法","date":"2022-11-14T11:17:45.000Z","updated":"2024-01-05T17:32:17.615Z","comments":true,"path":"2022/11/14/Go/Go-admin-ui/Github上Go-admin-ui项目在MAC构建异常及解决方法/index.html","link":"","permalink":"http://www.lvhejin.cn/2022/11/14/Go/Go-admin-ui/Github%E4%B8%8AGo-admin-ui%E9%A1%B9%E7%9B%AE%E5%9C%A8MAC%E6%9E%84%E5%BB%BA%E5%BC%82%E5%B8%B8%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/index.html","excerpt":"","text":"12345678910a8@a8deMBP go-admin-ui-2.0.9 % yarnyarn install v1.22.19info No lockfile found.[1/5] 🔍 Validating package.json...[2/5] 🔍 Resolving packages...此处省略N行……[3/5] 🚚 Fetching packages...error @achrinza/node-ipc@9.2.2: The engine &quot;node&quot; is incompatible with this module. Expected version &quot;8 || 10 || 12 || 14 || 16 || 17&quot;. Got &quot;18.7.0&quot;error Found incompatible module.info Visit https://yarnpkg.com/en/docs/cli/install for documentation about this command. 原因是nodejs版本冲突了，解决： 先运行 yarn config set ignore-engines true，再运行刚才的命令。 其中，ignore-engines=true是用于修复node版本不兼容的命令配置，本质上是忽略引擎版本检查。 解决方法一： yarn config set ignore-engines true 解决方法二： yarn install --ignore-engines 其中，ignore-engines=true是用于修复node版本不兼容的命令配置，本质上是忽略引擎版本检查。","categories":[{"name":"Go","slug":"Go","permalink":"http://www.lvhejin.cn/categories/Go/"},{"name":"Go-admin-ui","slug":"Go/Go-admin-ui","permalink":"http://www.lvhejin.cn/categories/Go/Go-admin-ui/"}],"tags":[{"name":"开发异常","slug":"开发异常","permalink":"http://www.lvhejin.cn/tags/%E5%BC%80%E5%8F%91%E5%BC%82%E5%B8%B8/"},{"name":"Go-admin-ui","slug":"Go-admin-ui","permalink":"http://www.lvhejin.cn/tags/Go-admin-ui/"}]},{"title":"Github上go-admin项目启动mac","slug":"Go/Go-Admin/Github上go-admin项目启动mac","date":"2022-11-11T17:48:41.000Z","updated":"2024-01-05T17:32:17.615Z","comments":true,"path":"2022/11/11/Go/Go-Admin/Github上go-admin项目启动mac/index.html","link":"","permalink":"http://www.lvhejin.cn/2022/11/11/Go/Go-Admin/Github%E4%B8%8Ago-admin%E9%A1%B9%E7%9B%AE%E5%90%AF%E5%8A%A8mac/index.html","excerpt":"","text":"安装好Go语言环境12go versiongo version go1.18.1 darwin/arm64 mac 电脑芯片如果是苹果的下载arm，否则下载amd版本的。 克隆go-admin项目（go-admin-2.1.2）编译12345678910111213141516171819git clone https://github.com/go-admin-team/go-admin.git//设置环境cd ./go-adminexport GO111MODULE=onexport GOPROXY=&quot;https://goproxy.cn&quot;# 编译go mod tidygo build#初始化./go-admin migrate -c=&quot;config/settings.yml&quot;#启动./go-admin server -c=&quot;config/settings.yml&quot; 下载如果失败，可以尝试换代理地址 https://goproxy.io 或者 https://mirrors.aliyun.com/goproxy go build 出现 1warning: &#x27;TARGET_OS_MAC&#x27; is not defined, evaluates to 0 [-Wundef-prefix=TARGET_OS_] 设置 1go env -w CGO_ENABLED=&quot;0&quot; 克隆go-admin-ui项目（go-admin-ui-2.0.9）启动123456789101112131415# clonegit clone https://github.com/go-admin-team/go-admin-ui.git#安装node 环境npm install##npm ERR! code ERESOLVE##npm ERR! ERESOLVE unable to resolve dependency tree##如果报错，依赖冲突问题##使用npm i --legacy-peer-deps#启动项目npm run dev 启动时间如果提示：1、95% emitting CompressionPlugin ERROR Error: error:0308010C:digital envelope routines::unsupported1.1、解决方案：npm install时遇到错误”error:0308010C:digital envelope routines::unsupported”的解决办法2、NodeJS版本问题 npm WARN EBADENGINE Unsupported engine {npm WARN EBADENGINE package: ‘@achrinza/&#110;&#111;&#100;&#101;&#45;&#x69;&#112;&#x63;&#x40;&#x39;&#x2e;&#50;&#x2e;&#x32;‘,npm WARN EBADENGINE required: { node: ‘8 || 10 || 12 || 14 || 16 || 17’ },npm WARN EBADENGINE current: { node: ‘v19.7.0’, npm: ‘9.5.0’ }npm WARN EBADENGINE }下载对应的支持版本：https://nodejs.org/en/about/previous-releases node-v16.20.2-x64.msi 转载：https://blog.csdn.net/weixin_42597761/article/details/124297930","categories":[{"name":"Go","slug":"Go","permalink":"http://www.lvhejin.cn/categories/Go/"},{"name":"Go-Admin","slug":"Go/Go-Admin","permalink":"http://www.lvhejin.cn/categories/Go/Go-Admin/"}],"tags":[{"name":"开发异常","slug":"开发异常","permalink":"http://www.lvhejin.cn/tags/%E5%BC%80%E5%8F%91%E5%BC%82%E5%B8%B8/"},{"name":"Go-Admin","slug":"Go-Admin","permalink":"http://www.lvhejin.cn/tags/Go-Admin/"}]},{"title":"说明UNIX系统进程信号","slug":"Linux/说明UNIX系统进程信号","date":"2022-11-11T16:55:23.000Z","updated":"2024-01-05T17:32:17.639Z","comments":true,"path":"2022/11/11/Linux/说明UNIX系统进程信号/index.html","link":"","permalink":"http://www.lvhejin.cn/2022/11/11/Linux/%E8%AF%B4%E6%98%8EUNIX%E7%B3%BB%E7%BB%9F%E8%BF%9B%E7%A8%8B%E4%BF%A1%E5%8F%B7/index.html","excerpt":"","text":"1234567kill -1 //终端挂起或控制进程终止。当用户退出Shell时，由该进程启动的所有进程都会收到这个信号，默认动作为终止进程。kill -2 //键盘中断。当用户按下组合键时，用户终端向正在运行中的由该终端启动的程序发出此信号。默认动作为终止进程。kill -3 //键盘退出键被按下。当用户按下或组合键时，用户终端向正在运行中的由该终端启动的程序发出此信号。默认动作为退出程序。kill -8 //发生致命的运算错误时发出。不仅包括浮点运算错误，还包括溢出及除数为0等所有的算法错误。默认动作为终止进程并产生core文件。kill -9 //无条件终止进程。进程接收到该信号会立即终止，不进行清理和暂存工作。该信号不能被忽略、处理和阻塞，它向系统管理员提供了可以杀死任何进程的方法。kill -14 //定时器超时，默认动作为终止进程。kill -15 //程序结束信号，可以由 kill 命令产生。与SIGKILL不同的是，SIGTERM 信号可以被阻塞和终止，以便程序在退出前可以保存工作或清理临时文件等。 参考：https://www.jianshu.com/p/36469ccf7d5b","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.lvhejin.cn/categories/Linux/"}],"tags":[{"name":"kill","slug":"kill","permalink":"http://www.lvhejin.cn/tags/kill/"}]},{"title":"supervisor+go+beanstalkd环境配置和部署","slug":"Supervisor/supervisor+go+beanstalkd环境配置和部署","date":"2022-11-11T16:14:09.000Z","updated":"2024-01-05T17:32:17.647Z","comments":true,"path":"2022/11/11/Supervisor/supervisor+go+beanstalkd环境配置和部署/index.html","link":"","permalink":"http://www.lvhejin.cn/2022/11/11/Supervisor/supervisor+go+beanstalkd%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%92%8C%E9%83%A8%E7%BD%B2/index.html","excerpt":"","text":"1. 背景本次部署包含要素： golang 可执行文件，叫 task_center beanstalkd supervisor centos服务器 目的：把golang程序部署到centos服务器，golang程序里面包含beanstalkd后台服务需要启动，用supervisor来控制golang程序和beanstalkd后台服务在开机时可以自动启动 1.1 官网Supervisor 官网 1.2 介绍 Supervisor 是一个进程控制系统。它是一个 C/S 系统 (注意：其提供 WEB 接口给用户查询和控制)。它允许用户去监控和控制在类 UNIX 系统的进程。它的目标与 launchd、daemontools 和 runit 有些相似。但是与它们不一样的是、它不是作为 init (进程号 pid 是 1) 运行。它是被用来控制进程、并且它在启动的时候和一般程序并无二致。那么通俗点，它的作用是什么？你的 Nginx，Tomcat，memcache，Redis… 会崩么？那你自己写的服务器监测脚本呢？好吧、不要再纠结了、交给 Supervisor 吧！它会帮你维护这些、即使它们不小心崩了、Supervisor 会帮你看住它们、维护它们。 2. 操作2.1 supervisor安装和配置安装supervisor 1yum install -y supervisor 启动supervisor 1systemctl start supervisord 查看supervisor服务状态 1systemctl status supervisord 12345[root@server06 centos]# systemctl status supervisord● supervisord.service - Process Monitoring and Control Daemon Loaded: loaded (/usr/lib/systemd/system/supervisord.service; enabled; vendor preset: disabled) Active: inactive (dead) since 二 2022-04-26 15:30:24 CST; 2 weeks 3 days ago Main PID: 4643 (code=exited, status=0/SUCCESS) 查看配置文件最底层，新增自己的进程监听配置文件目录 1vim /etc/supervisord.conf 进入supervisord.d文件，新建自己的配置 12cd /etc/supervisord.d/vim task_center.ini 123456789101112131415161718192021222324252627282930313233343536#项目名[program:task_center]#脚本目录directory=/home/centos/task_center#脚本执行命令command=/home/centos/task_center/task_center#脚本运行的用户身份 user = root#supervisor启动的时候是否随着同时启动，默认Trueautostart=true#当程序exit的时候，这个program不会自动重启,默认unexpected，设置子进程挂掉后自动重启的情况，#有三个选项，false,unexpected和true。如果为false的时候，无论什么情况下，都不会被重新启动，#如果为unexpected，只有当进程的退出码不在下面的exitcodes里面定义的时候autorestart=true#这个选项是子进程启动多少秒之后，此时状态如果是running，则我们认为启动成功了。默认值为1startsecs=1#当进程启动失败后，最大尝试启动的次数，默认为3次startretries=3#这个是当我们向子进程发送stopsignal信号后，到系统返回信息给supervisord所等待的最大时间#默认为10秒stopwaitsecs=10#把stderr重定向到stdout，默认 falseredirect_stderr = true#日志输出 stdout_logfile=/home/centos/task_center/log/comm.logs#stdout日志文件大小，默认 50MBstdout_logfile_maxbytes = 50M#stdout日志文件备份数stdout_logfile_backups = 10stderr_logfile=/home/centos/task_center/log/err.log#stderr日志文件大小，默认 50MBstderr_logfile_maxbytes = 50M#stderr日志文件备份数stderr_logfile_backups = 10 把golang执行文件 task_center 放在/home/centos/task_center目录下 12345678[centos@server06 task_center]$ pwd/home/centos/task_center[centos@server06 task_center]$ ll总用量 18952drwxrwxr-x 2 centos centos 4096 5月 12 17:54 confdrwxrwxr-x 2 centos centos 4096 5月 12 22:28 log-rwxrwxr-x 1 centos centos 19391610 5月 12 17:41 task_centerdrwxrwxr-x 2 centos centos 4096 5月 12 17:31 temp 然后执行supervisorctl update更新supervisor配置 supervisor常用命令： 1234567891011121314151617181920#supervisord 安装完成后有两个可用的命令行 supervisord 和 supervisorctl，命令使用解释如下：supervisord #初始启动 Supervisord，启动、管理配置中设置的进程。#停止某一个进程(programxxx)，programxxx 为 [program:beepkg] 里配置的值，这个示例就是 beepkg。supervisorctl status #查看程序运行状态supervisorctl stop programxxx #停止指定应用supervisorctl stop all #停止所有应用supervisorctl start programxxx #启动某个进程supervisorctl start all #启动所有应用supervisorctl restart programxxx #重启某个进程supervisorctl restart all #重启所有应用supervisorctl stop groupworker #重启所有属于名为 groupworker 这个分组的进程(start,restart 同理)supervisorctl stop all #停止全部进程，注：start、restart、stop 都不会载入最新的配置文件。supervisorctl reload #载入最新的配置文件，停止原有进程并按新的配置启动、管理所有进程。supervisorctl update #根据最新的配置文件，启动新配置或有改动的进程，配置没有改动的进程不会受影响而重启。sudo supervisorctl update #修改服务配置文件后执行命令supervisorctl tail test stdout #错误信息查看# 注意：显示用 stop 停止掉的进程，用 reload 或者 update 都不会自动重启。 update 更新新的配置到supervisord(不会重启原来已运行的程序) reload，载入所有配置文件，并按新的配置启动、管理所有进程(会重启原来已运行的程序) 2.2 beanstalkd安装和开启安装beanstalkd 1yum -y install beanstalkd --enablerepo=epel 查看版本 1beanstalkd -v 因为我的项目中要开启11300和11301端口，并且我打算让服务器启动后自动启动这个两个端口的服务，所以可以用supervisor来运行相关的指令来实现这个功能 同上面一样，在目录/etc/supervisord.d/下新建一个文件 1vim task_centor_port.ini 1234567891011121314151617181920[program:task_center_port]# 同时开启 11300 和 11301 端口服务command=/bin/bash -c &quot;beanstalkd -l 172.18.92.148 -p 11300 &amp; beanstalkd -l 172.18.92.148 -p 11301 &amp;&quot;directory=/home/centos/task_centerautostart=truestartsecs=5startretries=3autorestart=truestopwaitsecs=10user=rootredirect_stderr=truestdout_logfile=/home/centos/task_center/log/comm_port.logstdout_logfile_maxbytes=100MBstdout_logfile_backups=5stderr_logfile=/home/centos/task_center/log/err_port.logstderr_logfile_maxbytes=100MBstderr_logfile_backups=5 然后执行supervisorctl update更新supervisor配置 退出服务器后重新打开，用如下命令检查是否开启端口 1ps -aux | grep beanstalkd 如下结果表示开启成功 1234567891011连接主机...连接主机成功Last login: Fri May 13 18:35:43 2022 from 183.56.160.125Welcome to Alibaba Cloud Elastic Compute Service ![centos@server06 ~]$ ps -aux | grep beanstalkdcentos 12953 0.0 0.0 112720 988 pts/0 S+ 18:35 0:00 grep --color=auto beanstalkdroot 17135 0.0 0.0 8748 664 ? S 5月12 0:02 beanstalkd -l 172.18.92.148 -p 11300root 17136 0.0 0.0 8748 660 ? S 5月12 0:02 beanstalkd -l 172.18.92.148 -p 11301[centos@server06 ~]$ 2.3 修改配置文件发布supervisorctl管理界面vi /etc/supervisord.conf [inet_http_server] ; inet (TCP) server disabled by default port=0.0.0.0:9001 ; (ip_address:port specifier, *:port for all iface) username=user ; (default is no username (open server)) password=123 ; (default is no password (open server)) 2.4 说明Unix系统进程信号参考： https://www.sulvblog.cn supervisor 安装与使用 supervisor 安装配置使用","categories":[{"name":"Supervisor","slug":"Supervisor","permalink":"http://www.lvhejin.cn/categories/Supervisor/"}],"tags":[{"name":"Go","slug":"Go","permalink":"http://www.lvhejin.cn/tags/Go/"},{"name":"Supervisor","slug":"Supervisor","permalink":"http://www.lvhejin.cn/tags/Supervisor/"},{"name":"Beanstalkd","slug":"Beanstalkd","permalink":"http://www.lvhejin.cn/tags/Beanstalkd/"}]},{"title":"IDEA显示“Cannot resolve symbol XXX”","slug":"IDEA/IDEA显示“Cannot resolve symbol XXX”","date":"2022-11-10T18:33:40.000Z","updated":"2024-01-05T17:32:17.623Z","comments":true,"path":"2022/11/10/IDEA/IDEA显示“Cannot resolve symbol XXX”/index.html","link":"","permalink":"http://www.lvhejin.cn/2022/11/10/IDEA/IDEA%E6%98%BE%E7%A4%BA%E2%80%9CCannot%20resolve%20symbol%20XXX%E2%80%9D/index.html","excerpt":"","text":"IDEA显示“Cannot resolve symbol XXX”菜单 “File” -&gt; “Invalidate Caches / Restart”→ “Invalidate and Restart”。 然后再打开idea果然是有效果的。亲测有效","categories":[{"name":"IDEA","slug":"IDEA","permalink":"http://www.lvhejin.cn/categories/IDEA/"}],"tags":[{"name":"开发异常","slug":"开发异常","permalink":"http://www.lvhejin.cn/tags/%E5%BC%80%E5%8F%91%E5%BC%82%E5%B8%B8/"},{"name":"IDEA","slug":"IDEA","permalink":"http://www.lvhejin.cn/tags/IDEA/"},{"name":"Java","slug":"Java","permalink":"http://www.lvhejin.cn/tags/Java/"}]},{"title":"TCP和UDP端口探测","slug":"Linux/TCP和UDP端口探测","date":"2022-11-10T18:19:55.000Z","updated":"2024-01-05T17:32:17.639Z","comments":true,"path":"2022/11/10/Linux/TCP和UDP端口探测/index.html","link":"","permalink":"http://www.lvhejin.cn/2022/11/10/Linux/TCP%E5%92%8CUDP%E7%AB%AF%E5%8F%A3%E6%8E%A2%E6%B5%8B/index.html","excerpt":"","text":"Linux中可以使用命令行工具nc，判断指定端口的TCP和UDP连接是否通畅 。 安装： macOS自带nc 1yum install -y nc 常用命令： 12345检查UDP端口连接是否工作：nc -vuz &#123;hostIP&#125; &#123;port&#125; 检查服务器侧TCP端口连接是否工作：nc -l &#123;port&#125; 检查客户端侧TCP端口连接是否工作：nc &#123;hostIP&#125; &#123;port&#125;telnet 42.11.12.13 123nc -vuz 42.11.12.13 123 常用参数： 123456-l 用于指定nc将处于侦听模式。指定该参数，则意味着nc被当作server，侦听并接受连接，而非向其它地址发起连接。-s 指定发送数据的源IP地址，适用于多网卡机-u 指定nc使用UDP协议，默认为TCP-v 输出交互或出错信息，新手调试时尤为有用-w 超时秒数，后面跟数字-z 即zero，表示扫描时不发送任何数据 参考： https://blog.51cto.com/fccwcom/1164909 https://www.csdn.net/tags/MtjaggzsMjgzOTItYmxvZwO0O0OO0O0O.html","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.lvhejin.cn/categories/Linux/"}],"tags":[{"name":"Mac","slug":"Mac","permalink":"http://www.lvhejin.cn/tags/Mac/"},{"name":"Nc","slug":"Nc","permalink":"http://www.lvhejin.cn/tags/Nc/"},{"name":"端口探测","slug":"端口探测","permalink":"http://www.lvhejin.cn/tags/%E7%AB%AF%E5%8F%A3%E6%8E%A2%E6%B5%8B/"},{"name":"端口检测","slug":"端口检测","permalink":"http://www.lvhejin.cn/tags/%E7%AB%AF%E5%8F%A3%E6%A3%80%E6%B5%8B/"}]},{"title":"Eclipse MAT failed to create the java virtual machine","slug":"MAT/Eclipse-MAT-failed-to-create-the-java-virtual-machine","date":"2022-11-03T11:06:44.000Z","updated":"2024-01-05T17:32:17.639Z","comments":true,"path":"2022/11/03/MAT/Eclipse-MAT-failed-to-create-the-java-virtual-machine/index.html","link":"","permalink":"http://www.lvhejin.cn/2022/11/03/MAT/Eclipse-MAT-failed-to-create-the-java-virtual-machine/index.html","excerpt":"","text":"换了mac笔记本，装了比较新的eclipse 4.18版本，jdk最低版本11； 查看Eclipse版本号及各个版本区别和对应JDK：https://wiki.eclipse.org/Eclipse/Installation 需要降低版本装eclipse 4.16，下载安装包之后，Eclipes installer 遇到问题：Failed to create the java virtual machine 尝试了各种办法都没法解决：https://stackoverflow.com/questions/24342886/how-to-install-java-8-on-mac https://github.com/AdoptOpenJDK/homebrew-openjdk/issues/106 https://stackoverflow.com/questions/25609405/error-could-not-create-the-java-virtual-machine-mac-osx-mavericks 先删除了已安装的jdk，重装sudo rm -rf /Library/Java/JavaVirtualMachines/ 装完之后，~/.bash_profile 中环境变量，已经jdk和java环境如下，确保正确。 wde@wdeMacBook-Pro WebRTCGlient % /usr/libexec/java_home -V Matching Java Virtual Machines (2): 1.8.211.12 (x86_64) &quot;Oracle Corporation&quot; - &quot;Java&quot; /Library/Internet Plug-Ins/JavaAppletPlugin.plugin/Contents/Home 1.8.0_211 (x86_64) &quot;Oracle Corporation&quot; - &quot;Java SE 8&quot; /Library/Java/JavaVirtualMachines/jdk1.8.0_211.jdk/Contents/Home /Library/Java/JavaVirtualMachines/jdk1.8.0_211.jdk/Contents/Home wde@wdeMacBook-Pro WebRTCGlient % java -version java version “1.8.0_211” Java(TM) SE Runtime Environment (build 1.8.0_211-b12) Java HotSpot(TM) 64-Bit Server VM (build 25.211-b12, mixed mode) wde@wdeMacBook-Pro WebRTCGlient % echo $JAVA_HOME /Library/Java/JavaVirtualMachines/jdk1.8.0_211.jdk/Contents/Home wde@wdeMacBook-Pro WebRTCGlient % 最后在这里找到了解决办法：参考这里头的一个步骤：https://stackoverflow.com/questions/62647625/not-able-to-run-eclipse-on-macos-big-sur 12cd /Library/Java/JavaVirtualMachines/jdk1.8.0_201.jdk/Contents/Home/libsudo ln -s ../jre/lib/server/libjvm.dylib libserver.dylib 1234***@***deMBP lib % java -versionopenjdk version &quot;1.8.0_292&quot;OpenJDK Runtime Environment (AdoptOpenJDK)(build 1.8.0_292-b10)OpenJDK 64-Bit Server VM (AdoptOpenJDK)(build 25.292-b10, mixed mode) MAT： 下载：Eclipse Memory Analyzer Open Source Project | The Eclipse FoundationEclipse Memory Analyzer Open Source Project | The Eclipse Foundation版本：MemoryAnalyzer-1.11.0.20201202-macosx.cocoa.x86_64.dmg ————————————————原文链接：https://blog.csdn.net/wangzhong1979/article/details/114468391","categories":[{"name":"MAT","slug":"MAT","permalink":"http://www.lvhejin.cn/categories/MAT/"}],"tags":[{"name":"开发异常","slug":"开发异常","permalink":"http://www.lvhejin.cn/tags/%E5%BC%80%E5%8F%91%E5%BC%82%E5%B8%B8/"},{"name":"Java","slug":"Java","permalink":"http://www.lvhejin.cn/tags/Java/"},{"name":"Eclipse","slug":"Eclipse","permalink":"http://www.lvhejin.cn/tags/Eclipse/"}]},{"title":"SpringBoot自动配置原理","slug":"SpringBoot/SpringBoot自动配置原理","date":"2022-10-27T15:22:11.000Z","updated":"2024-01-05T17:32:17.643Z","comments":true,"path":"2022/10/27/SpringBoot/SpringBoot自动配置原理/index.html","link":"","permalink":"http://www.lvhejin.cn/2022/10/27/SpringBoot/SpringBoot%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86/index.html","excerpt":"","text":"本文正在参与 「掘力星计划」 ，赢取创作大礼包，挑战创作激励金。 我们知道，Spring Boot 项目创建完成后，即使不进行任何的配置，也能够顺利地运行，这都要归功于 Spring Boot 的自动化配置。 Spring Boot 默认使用 application.properties 或 application.yml 作为其全局配置文件，我们可以在该配置文件中对各种自动配置属性（server.port、logging.level.* 、spring.config.active.no-profile 等等）进行修改，并使之生效，那么您有没有想过这些属性是否有据可依呢？答案是肯定的。 Spring Boot 官方文档：常见应用属性中对所有的配置属性都进行了列举和解释，我们可以根据官方文档对 Spring Boot 进行配置，但 Spring Boot 中的配置属性数量庞大，仅仅依靠官方文档进行配置也十分麻烦。我们只有了解了 Spring Boot 自动配置的原理，才能更加轻松熟练地对 Spirng Boot 进行配置。本节为你揭开 SpringBoot 自动配置的神秘面纱。 Spring Factories 机制Spring Boot 的自动配置是基于 Spring Factories 机制实现的。 Spring Factories 机制是 Spring Boot 中的一种服务发现机制，这种扩展机制与 Java SPI 机制十分相似。Spring Boot 会自动扫描所有 Jar 包类路径下 META-INF/spring.factories 文件，并读取其中的内容，进行实例化，这种机制也是 Spring Boot Starter 的基础。 spring.factoriesspring.factories 文件本质上与 properties 文件相似，其中包含一组或多组键值对（key=vlaue），其中，key 的取值为接口的完全限定名；value 的取值为接口实现类的完全限定名，一个接口可以设置多个实现类，不同实现类之间使用“，”隔开，例如：\\ 1234org.springframework.boot.autoconfigure.AutoConfigurationImportFilter=\\org.springframework.boot.autoconfigure.condition.OnBeanCondition,\\org.springframework.boot.autoconfigure.condition.OnClassCondition,\\org.springframework.boot.autoconfigure.condition.OnWebApplicationCondition Spring Factories 实现原理spring-core 包里定义了 SpringFactoriesLoader 类，这个类会扫描所有 Jar 包类路径下的 META-INF/spring.factories 文件，并获取指定接口的配置。在 SpringFactoriesLoader 类中定义了两个对外的方法，如下表。 返回值 方法 描述 List loadFactories(Class factoryType, @Nullable ClassLoader classLoader) 静态方法； 根据接口获取其实现类的实例； 该方法返回的是实现类对象列表。 List loadFactoryNames(Class&lt;?&gt; factoryType, @Nullable ClassLoader classLoader) 公共静态方法； 根据接口l获取其实现类的名称； 该方法返回的是实现类的类名的列表 以上两个方法的关键都是从指定的 ClassLoader中获取spring.factories 文件，并解析得到类名列表，具体代码如下。 loadFactories() 方法能够获取指定接口的实现类对象，具体代码如下。 1234567891011121314151617181920212223public static &lt;T&gt; List&lt;T&gt; loadFactories(Class&lt;T&gt; factoryType, @Nullable ClassLoader classLoader) &#123; Assert.notNull(factoryType, &quot;&#x27;factoryType&#x27; must not be null&quot;); ClassLoader classLoaderToUse = classLoader; if (classLoader == null) &#123; classLoaderToUse = SpringFactoriesLoader.class.getClassLoader(); &#125; // 调用loadFactoryNames获取接口的实现类 List&lt;String&gt; factoryImplementationNames = loadFactoryNames(factoryType, classLoaderToUse); if (logger.isTraceEnabled()) &#123; logger.trace(&quot;Loaded [&quot; + factoryType.getName() + &quot;] names: &quot; + factoryImplementationNames); &#125; // 遍历 factoryNames 数组，创建实现类的对象 List&lt;T&gt; result = new ArrayList(factoryImplementationNames.size()); Iterator var5 = factoryImplementationNames.iterator(); //排序 while(var5.hasNext()) &#123; String factoryImplementationName = (String)var5.next(); result.add(instantiateFactory(factoryImplementationName, factoryType, classLoaderToUse)); &#125; AnnotationAwareOrderComparator.sort(result); return result;&#125; loadFactoryNames() 方法能够根据接口获取其实现类类名的集合，具体代码如下。 12345678910public static List&lt;String&gt; loadFactoryNames(Class&lt;?&gt; factoryType, @Nullable ClassLoader classLoader) &#123; ClassLoader classLoaderToUse = classLoader; if (classLoader == null) &#123; classLoaderToUse = SpringFactoriesLoader.class.getClassLoader(); &#125; String factoryTypeName = factoryType.getName(); //获取自动配置类 return (List)loadSpringFactories(classLoaderToUse).getOrDefault(factoryTypeName, Collections.emptyList());&#125; loadSpringFactories() 方法能够读取该项目中所有 Jar 包类路径下 META-INF/spring.factories 文件的配置内容，并以 Map 集合的形式返回，具体代码如下。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748private static Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(ClassLoader classLoader) &#123; Map&lt;String, List&lt;String&gt;&gt; result = (Map)cache.get(classLoader); if (result != null) &#123; return result; &#125; else &#123; HashMap result = new HashMap(); try &#123; //扫描所有 Jar 包类路径下的 META-INF/spring.factories 文件 Enumeration urls = classLoader.getResources(&quot;META-INF/spring.factories&quot;); while(urls.hasMoreElements()) &#123; URL url = (URL)urls.nextElement(); UrlResource resource = new UrlResource(url); //将扫描到的 META-INF/spring.factories 文件中内容包装成 properties 对象 Properties properties = PropertiesLoaderUtils.loadProperties(resource); Iterator var6 = properties.entrySet().iterator(); while(var6.hasNext()) &#123; Map.Entry&lt;?, ?&gt; entry = (Map.Entry)var6.next(); //提取 properties 对象中的 key 值 String factoryTypeName = ((String)entry.getKey()).trim(); //提取 proper 对象中的 value 值（多个类的完全限定名使用逗号连接的字符串） // 使用逗号为分隔符转换为数组，数组内每个元素都是配置类的完全限定名 String[] factoryImplementationNames = StringUtils.commaDelimitedListToStringArray((String)entry.getValue()); String[] var10 = factoryImplementationNames; int var11 = factoryImplementationNames.length; //遍历配置类数组，并将数组转换为 list 集合 for(int var12 = 0; var12 &lt; var11; ++var12) &#123; String factoryImplementationName = var10[var12]; ((List)result.computeIfAbsent(factoryTypeName, (key) -&gt; &#123; return new ArrayList(); &#125;)).add(factoryImplementationName.trim()); &#125; &#125; &#125; //将 propertise 对象的 key 与由配置类组成的 List 集合一一对应存入名为 result 的 Map 中 result.replaceAll((factoryType, implementations) -&gt; &#123; return (List)implementations.stream().distinct().collect(Collectors.collectingAndThen(Collectors.toList(), Collections::unmodifiableList)); &#125;); cache.put(classLoader, result); //返回 result return result; &#125; catch (IOException var14) &#123; throw new IllegalArgumentException(&quot;Unable to load factories from location [META-INF/spring.factories]&quot;, var14); &#125; &#125;&#125; 自动配置的加载Spring Boot 自动化配置也是基于 Spring Factories 机制实现的，在 spring-boot-autoconfigure-xxx.jar 类路径下的 META-INF/spring.factories 中设置了 Spring Boot 自动配置的内容 ，如下。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132# Auto Configureorg.springframework.boot.autoconfigure.EnableAutoConfiguration=\\org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\\org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\\org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\\org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\\org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\\org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\\org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\\org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration,\\org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\\org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\\org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\\org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\\org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\\org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveDataAutoConfiguration,\\org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveRepositoriesAutoConfiguration,\\org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\\org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\\org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveDataAutoConfiguration,\\org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveRepositoriesAutoConfiguration,\\org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\\org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\\org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\\org.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRepositoriesAutoConfiguration,\\org.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRestClientAutoConfiguration,\\org.springframework.boot.autoconfigure.data.jdbc.JdbcRepositoriesAutoConfiguration,\\org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\\org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\\org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\\org.springframework.boot.autoconfigure.data.mongo.MongoReactiveDataAutoConfiguration,\\org.springframework.boot.autoconfigure.data.mongo.MongoReactiveRepositoriesAutoConfiguration,\\org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\\org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\\org.springframework.boot.autoconfigure.data.neo4j.Neo4jReactiveDataAutoConfiguration,\\org.springframework.boot.autoconfigure.data.neo4j.Neo4jReactiveRepositoriesAutoConfiguration,\\org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\\org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\\org.springframework.boot.autoconfigure.data.r2dbc.R2dbcDataAutoConfiguration,\\org.springframework.boot.autoconfigure.data.r2dbc.R2dbcRepositoriesAutoConfiguration,\\org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\\org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration,\\org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\\org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\\org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\\org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchRestClientAutoConfiguration,\\org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\\org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\\org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\\org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\\org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\\org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\\org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\\org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\\org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration,\\org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration,\\org.springframework.boot.autoconfigure.influx.InfluxDbAutoConfiguration,\\org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\\org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\\org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\\org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\\org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\\org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\\org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\\org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\\org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\\org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\\org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\\org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\\org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\\org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\\org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\\org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration,\\org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\\org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration,\\org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\\org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\\org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\\org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\\org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\\org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\\org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\\org.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration,\\org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\\org.springframework.boot.autoconfigure.neo4j.Neo4jAutoConfiguration,\\org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\\org.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration,\\org.springframework.boot.autoconfigure.r2dbc.R2dbcAutoConfiguration,\\org.springframework.boot.autoconfigure.r2dbc.R2dbcTransactionManagerAutoConfiguration,\\org.springframework.boot.autoconfigure.rsocket.RSocketMessagingAutoConfiguration,\\org.springframework.boot.autoconfigure.rsocket.RSocketRequesterAutoConfiguration,\\org.springframework.boot.autoconfigure.rsocket.RSocketServerAutoConfiguration,\\org.springframework.boot.autoconfigure.rsocket.RSocketStrategiesAutoConfiguration,\\org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration,\\org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration,\\org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration,\\org.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration,\\org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration,\\org.springframework.boot.autoconfigure.security.rsocket.RSocketSecurityAutoConfiguration,\\org.springframework.boot.autoconfigure.security.saml2.Saml2RelyingPartyAutoConfiguration,\\org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\\org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\\org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientAutoConfiguration,\\org.springframework.boot.autoconfigure.security.oauth2.client.reactive.ReactiveOAuth2ClientAutoConfiguration,\\org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerAutoConfiguration,\\org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerAutoConfiguration,\\org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\\org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration,\\org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration,\\org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\\org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\\org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\\org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\\org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration,\\org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration,\\org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration,\\org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration,\\org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration,\\org.springframework.boot.autoconfigure.web.reactive.error.ErrorWebFluxAutoConfiguration,\\org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorAutoConfiguration,\\org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration,\\org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration,\\org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration,\\org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration,\\org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration,\\org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration,\\org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration,\\org.springframework.boot.autoconfigure.websocket.reactive.WebSocketReactiveAutoConfiguration,\\org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration,\\org.springframework.boot.autoconfigure.websocket.servlet.WebSocketMessagingAutoConfiguration,\\org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration,\\org.springframework.boot.autoconfigure.webservices.client.WebServiceTemplateAutoConfiguration 以上配置中，value 取值是由多个 xxxAutoConfiguration （使用逗号分隔）组成，每个 xxxAutoConfiguration 都是一个自动配置类。Spring Boot 启动时，会利用 Spring-Factories 机制，将这些 xxxAutoConfiguration 实例化并作为组件加入到容器中，以实现 Spring Boot 的自动配置。 @SpringBootApplication 注解所有 Spring Boot 项目的主启动程序类上都使用了一个 @SpringBootApplication 注解，该注解是 Spring Boot 中最重要的注解之一 ，也是 Spring Boot 实现自动化配置的关键。 @SpringBootApplication 是一个组合元注解，其主要包含两个注解：@SpringBootConfiguration 和 @EnableAutoConfiguration，其中 @EnableAutoConfiguration 注解是 SpringBoot 自动化配置的核心所在。 @EnableAutoConfiguration 注解@EnableAutoConfiguration 注解用于开启 Spring Boot 的自动配置功能， 它使用 Spring 框架提供的 @Import 注解通过 AutoConfigurationImportSelector类（选择器）给容器中导入自动配置组件。 图2：@EnableAutoConfiguration 注解 AutoConfigurationImportSelector 类AutoConfigurationImportSelector 类实现了 DeferredImportSelector 接口，AutoConfigurationImportSelector 中还包含一个静态内部类 AutoConfigurationGroup，它实现了 DeferredImportSelector 接口的内部接口 Group（Spring 5 新增）。 AutoConfigurationImportSelector 类中包含 3 个方法，如下表 返回值 方法声明 描述 内部类方法 内部类 Class&lt;? extends Group&gt; getImportGroup() 该方法获取实现了 Group 接口的类，并实例化 否 void process(AnnotationMetadata annotationMetadata, DeferredImportSelector deferredImportSelector) 该方法用于引入自动配置的集合 是 AutoConfigurationGroup Iterable selectImports() 遍历自动配置类集合（Entry 类型的集合），并逐个解析集合中的配置类 是 AutoConfigurationGroup AutoConfigurationImportSelector 内各方法执行顺序如下。 getImportGroup() 方法 process() 方法 selectImports() 方法 下面我们将分别对以上 3 个方法及其调用过程进行介绍。 1. getImportGroup() 方法AutoConfigurationImportSelector 类中 getImportGroup() 方法主要用于获取实现了 DeferredImportSelector.Group 接口的类，代码如下。 12345 public Class&lt;? extends Group&gt; getImportGroup() &#123; //获取实现了 DeferredImportSelector.Gorup 接口的 AutoConfigurationImportSelector.AutoConfigurationGroup 类 return AutoConfigurationImportSelector.AutoConfigurationGroup.class; &#125;复制代码 2. process() 方法静态内部类 AutoConfigurationGroup 中的核心方法是 process()，该方法通过调用 getAutoConfigurationEntry() 方法读取 spring.factories 文件中的内容，获得自动配置类的集合，代码如下 1234567891011121314151617public void process(AnnotationMetadata annotationMetadata, DeferredImportSelector deferredImportSelector) &#123; Assert.state(deferredImportSelector instanceof AutoConfigurationImportSelector, () -&gt; &#123; return String.format(&quot;Only %s implementations are supported, got %s&quot;, AutoConfigurationImportSelector.class.getSimpleName(), deferredImportSelector.getClass().getName()); &#125;); //拿到 META-INF/spring.factories中的EnableAutoConfiguration，并做排除、过滤处理 //AutoConfigurationEntry里有需要引入配置类和排除掉的配置类，最终只要返回需要配置的配置类 AutoConfigurationImportSelector.AutoConfigurationEntry autoConfigurationEntry = ((AutoConfigurationImportSelector)deferredImportSelector).getAutoConfigurationEntry(annotationMetadata); //加入缓存,List&lt;AutoConfigurationEntry&gt;类型 this.autoConfigurationEntries.add(autoConfigurationEntry); Iterator var4 = autoConfigurationEntry.getConfigurations().iterator(); while(var4.hasNext()) &#123; String importClassName = (String)var4.next(); //加入缓存，Map&lt;String, AnnotationMetadata&gt;类型 this.entries.putIfAbsent(importClassName, annotationMetadata); &#125;&#125; getAutoConfigurationEntry() 方法通过调用 getCandidateConfigurations() 方法来获取自动配置类的完全限定名，并在经过排除、过滤等处理后，将其缓存到成员变量中，具体代码如下。1234567891011121314151617181920212223protected AutoConfigurationImportSelector.AutoConfigurationEntry getAutoConfigurationEntry(AnnotationMetadata annotationMetadata) &#123; if (!this.isEnabled(annotationMetadata)) &#123; return EMPTY_ENTRY; &#125; else &#123; //获取注解元数据中的属性设置 AnnotationAttributes attributes = this.getAttributes(annotationMetadata); //获取自动配置类 List&lt;String&gt; configurations = this.getCandidateConfigurations(annotationMetadata, attributes); //删除list 集合中重复的配置类 configurations = this.removeDuplicates(configurations); //获取飘出导入的配置类 Set&lt;String&gt; exclusions = this.getExclusions(annotationMetadata, attributes); //检查是否还存在排除配置类 this.checkExcludedClasses(configurations, exclusions); //删除排除的配置类 configurations.removeAll(exclusions); //获取过滤器，过滤配置类 configurations = this.getConfigurationClassFilter().filter(configurations); //出发自动化配置导入事件 this.fireAutoConfigurationImportEvents(configurations, exclusions); return new AutoConfigurationImportSelector.AutoConfigurationEntry(configurations, exclusions); &#125;&#125; 在 getCandidateConfigurations() 方法中，根据 Spring Factories 机制调用 SpringFactoriesLoader 的 loadFactoryNames() 方法，根据 EnableAutoConfiguration.class （自动配置接口）获取其实现类（自动配置类）的类名的集合，如下图。 图3：getCandidateConfigurations 方法 3. process() 方法 以上所有方法执行完成后，AutoConfigurationImportSelector.AutoConfigurationGroup#selectImports() 会将 process() 方法处理后得到的自动配置类，进行过滤、排除，最后将所有自动配置类添加到容器中。123456789101112131415161718public Iterable&lt;DeferredImportSelector.Group.Entry&gt; selectImports() &#123; if (this.autoConfigurationEntries.isEmpty()) &#123; return Collections.emptyList(); &#125; else &#123; //获取所有需要排除的配置类 Set&lt;String&gt; allExclusions = (Set)this.autoConfigurationEntries.stream(). map(AutoConfigurationImportSelector.AutoConfigurationEntry::getExclusions).flatMap(Collection::stream).collect(Collectors.toSet()); //获取所有经过自动化配置过滤器的配置类 Set&lt;String&gt; processedConfigurations = (Set)this.autoConfigurationEntries.stream().map(AutoConfigurationImportSelector. AutoConfigurationEntry::getConfigurations).flatMap(Collection::stream).collect(Collectors.toCollection(LinkedHashSet::new)); //排除过滤后配置类中需要排除的类 processedConfigurations.removeAll(allExclusions); return (Iterable)this.sortAutoConfigurations(processedConfigurations, this.getAutoConfigurationMetadata()).stream().map((importClassName) -&gt; &#123; return new DeferredImportSelector.Group.Entry((AnnotationMetadata)this.entries.get(importClassName), importClassName); &#125;).collect(Collectors.toList()); &#125;&#125; 自动配置的生效和修改spring.factories 文件中的所有自动配置类（xxxAutoConfiguration），都是必须在一定的条件下才会作为组件添加到容器中，配置的内容才会生效。这些限制条件在 Spring Boot 中以 @Conditional 派生注解的形式体现，如下表。 注解 生效条件 @ConditionalOnJava 应用使用指定的 Java 版本时生效 @ConditionalOnBean 容器中存在指定的 Bean 时生效 @ConditionalOnMissingBean 容器中不存在指定的 Bean 时生效 @ConditionalOnExpression 满足指定的 SpEL 表达式时生效 @ConditionalOnClass 存在指定的类时生效 @ConditionalOnMissingClass 不存在指定的类时生效 @ConditionalOnSingleCandidate 容器中只存在一个指定的 Bean 或这个 Bean 为首选 Bean 时生效 @ConditionalOnProperty 系统中指定属性存在指定的值时生效 @ConditionalOnResource 类路径下存在指定的资源文件时生效 @ConditionalOnWebApplication 当前应用是 web 应用时生效 @ConditionalOnNotWebApplication 当前应用不是 web 应用生效 下面我们以 ServletWebServerFactoryAutoConfiguration 为例，介绍 Spring Boot 自动配置是如何生效的。 ServletWebServerFactoryAutoConfigurationServletWebServerFactoryAutoConfiguration 代码如下。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263@Configuration( //表示这是一个配置类，与 xml 配置文件等价，也可以给容器中添加组件 proxyBeanMethods = false)@AutoConfigureOrder(-2147483648)@ConditionalOnClass(&#123;ServletRequest.class&#125;)//判断当前项目有没有 ServletRequest 这个类@ConditionalOnWebApplication(// 判断当前应用是否是 web 应用，如果是，当前配置类生效 type = Type.SERVLET)@EnableConfigurationProperties(&#123;ServerProperties.class&#125;)//启动指定类的属性配置（ConfigurationProperties）功能；将配置文件中对应的值和 ServerProperties 绑定起来；并把 ServerProperties 加入到ioc容器中@Import(&#123;ServletWebServerFactoryAutoConfiguration.BeanPostProcessorsRegistrar.class, EmbeddedTomcat.class, EmbeddedJetty.class, EmbeddedUndertow.class&#125;)public class ServletWebServerFactoryAutoConfiguration &#123; public ServletWebServerFactoryAutoConfiguration() &#123; &#125; @Bean //给容器中添加一个组件，这个组件的某些值需要从properties中获取 public ServletWebServerFactoryCustomizer servletWebServerFactoryCustomizer(ServerProperties serverProperties, ObjectProvider&lt;WebListenerRegistrar&gt; webListenerRegistrars) &#123; return new ServletWebServerFactoryCustomizer(serverProperties, (List) webListenerRegistrars.orderedStream().collect(Collectors.toList())); &#125; @Bean @ConditionalOnClass( name = &#123;&quot;org.apache.catalina.startup.Tomcat&quot;&#125; ) public TomcatServletWebServerFactoryCustomizer tomcatServletWebServerFactoryCustomizer(ServerProperties serverProperties) &#123; return new TomcatServletWebServerFactoryCustomizer(serverProperties); &#125; @Bean @ConditionalOnMissingFilterBean(&#123;ForwardedHeaderFilter.class&#125;) @ConditionalOnProperty( value = &#123;&quot;server.forward-headers-strategy&quot;&#125;, havingValue = &quot;framework&quot; ) public FilterRegistrationBean&lt;ForwardedHeaderFilter&gt; forwardedHeaderFilter() &#123; ForwardedHeaderFilter filter = new ForwardedHeaderFilter(); FilterRegistrationBean&lt;ForwardedHeaderFilter&gt; registration = new FilterRegistrationBean(filter, new ServletRegistrationBean[0]); registration.setDispatcherTypes(DispatcherType.REQUEST, new DispatcherType[]&#123;DispatcherType.ASYNC, DispatcherType.ERROR&#125;); registration.setOrder(-2147483648); return registration; &#125; public static class BeanPostProcessorsRegistrar implements ImportBeanDefinitionRegistrar, BeanFactoryAware &#123; private ConfigurableListableBeanFactory beanFactory; public BeanPostProcessorsRegistrar() &#123; &#125; public void setBeanFactory(BeanFactory beanFactory) throws BeansException &#123; if (beanFactory instanceof ConfigurableListableBeanFactory) &#123; this.beanFactory = (ConfigurableListableBeanFactory) beanFactory; &#125; &#125; public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) &#123; if (this.beanFactory != null) &#123; this.registerSyntheticBeanIfMissing(registry, &quot;webServerFactoryCustomizerBeanPostProcessor&quot;, WebServerFactoryCustomizerBeanPostProcessor.class, WebServerFactoryCustomizerBeanPostProcessor::new); this.registerSyntheticBeanIfMissing(registry, &quot;errorPageRegistrarBeanPostProcessor&quot;, ErrorPageRegistrarBeanPostProcessor.class, ErrorPageRegistrarBeanPostProcessor::new); &#125; &#125; private &lt;T&gt; void registerSyntheticBeanIfMissing(BeanDefinitionRegistry registry, String name, Class&lt;T&gt; beanClass, Supplier&lt;T&gt; instanceSupplier) &#123; if (ObjectUtils.isEmpty(this.beanFactory.getBeanNamesForType(beanClass, true, false))) &#123; RootBeanDefinition beanDefinition = new RootBeanDefinition(beanClass, instanceSupplier); beanDefinition.setSynthetic(true); registry.registerBeanDefinition(name, beanDefinition); &#125; &#125; &#125;&#125; 该类使用了以下注解： @Configuration：用于定义一个配置类，可用于替换 Spring 中的 xml 配置文件； @Bean：被 @Configuration 注解的类内部，可以包含有一个或多个被 @Bean 注解的方法，用于构建一个 Bean，并添加到 Spring 容器中；该注解与 spring 配置文件中 等价，方法名与 的 id 或 name 属性等价，方法返回值与 class 属性等价； 除了 @Configuration 和 @Bean 注解外，该类还使用 5 个 @Conditional 衍生注解： @ConditionalOnClass({ServletRequest.class})：判断当前项目是否存在 ServletRequest 这个类，若存在，则该配置类生效。 @ConditionalOnWebApplication(type = Type.SERVLET)：判断当前应用是否是 Web 应用，如果是的话，当前配置类生效。 @ConditionalOnClass(name = {“org.apache.catalina.startup.Tomcat”})：判断是否存在 Tomcat 类，若存在则该方法生效。 @ConditionalOnMissingFilterBean({ForwardedHeaderFilter.class})：判断容器中是否有 ForwardedHeaderFilter 这个过滤器，若不存在则该方法生效。 @ConditionalOnProperty(value = {“server.forward-headers-strategy”},havingValue = “framework”)：判断配置文件中是否存在 server.forward-headers-strategy = framework，若不存在则该方法生效。 ServerPropertiesServletWebServerFactoryAutoConfiguration 类还使用了一个 @EnableConfigurationProperties 注解，通过该注解导入了一个 ServerProperties 类，其部分源码如下。 12345678910111213141516171819202122232425262728293031323334@ConfigurationProperties( prefix = &quot;server&quot;, ignoreUnknownFields = true)public class ServerProperties &#123; private Integer port; private InetAddress address; @NestedConfigurationProperty private final ErrorProperties error = new ErrorProperties(); private ServerProperties.ForwardHeadersStrategy forwardHeadersStrategy; private String serverHeader; private DataSize maxHttpHeaderSize = DataSize.ofKilobytes(8L); private Shutdown shutdown; @NestedConfigurationProperty private Ssl ssl; @NestedConfigurationProperty private final Compression compression; @NestedConfigurationProperty private final Http2 http2; private final ServerProperties.Servlet servlet; private final ServerProperties.Tomcat tomcat; private final ServerProperties.Jetty jetty; private final ServerProperties.Netty netty; private final ServerProperties.Undertow undertow; public ServerProperties() &#123; this.shutdown = Shutdown.IMMEDIATE; this.compression = new Compression(); this.http2 = new Http2(); this.servlet = new ServerProperties.Servlet(); this.tomcat = new ServerProperties.Tomcat(); this.jetty = new ServerProperties.Jetty(); this.netty = new ServerProperties.Netty(); this.undertow = new ServerProperties.Undertow(); &#125; ....&#125; 我们看到，ServletWebServerFactoryAutoConfiguration 使用了一个 @EnableConfigurationProperties 注解，而 ServerProperties 类上则使用了一个 @ConfigurationProperties 注解。这其实是 Spring Boot 自动配置机制中的通用用法。 Spring Boot 中为我们提供了大量的自动配置类 XxxAutoConfiguration 以及 XxxProperties，每个自动配置类 XxxAutoConfiguration 都使用了 @EnableConfigurationProperties 注解，而每个 XxxProperties 上都使用 @ConfigurationProperties 注解。 @ConfigurationProperties 注解的作用，是将这个类的所有属性与配置文件中相关的配置进行绑定，以便于获取或修改配置，但是 @ConfigurationProperties 功能是由容器提供的，被它注解的类必须是容器中的一个组件，否则该功能就无法使用。而 @EnableConfigurationProperties 注解的作用正是将指定的类以组件的形式注入到 IOC 容器中，并开启其 @ConfigurationProperties 功能。因此，@ConfigurationProperties + @EnableConfigurationProperties 组合使用，便可以为 XxxProperties 类实现配置绑定功能。 自动配置类 XxxAutoConfiguration 负责使用 XxxProperties 中属性进行自动配置，而 XxxProperties 则负责将自动配置属性与配置文件的相关配置进行绑定，以便于用户通过配置文件修改默认的自动配置。也就是说，真正“限制”我们可以在配置文件中配置哪些属性的类就是这些 XxxxProperties 类，它与配置文件中定义的 prefix 关键字开头的一组属性是唯一对应的。 注意：XxxAutoConfiguration 与 XxxProperties 并不是一一对应的，大多数情况都是多对多的关系，即一个 XxxAutoConfiguration 可以同时使用多个 XxxProperties 中的属性，一个 XxxProperties 类中属性也可以被多个 XxxAutoConfiguration 使用。 转载：https://juejin.cn/post/7017027913308438536","categories":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://www.lvhejin.cn/categories/SpringBoot/"}],"tags":[{"name":"自动配置","slug":"自动配置","permalink":"http://www.lvhejin.cn/tags/%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE/"},{"name":"生效条件","slug":"生效条件","permalink":"http://www.lvhejin.cn/tags/%E7%94%9F%E6%95%88%E6%9D%A1%E4%BB%B6/"},{"name":"不生效","slug":"不生效","permalink":"http://www.lvhejin.cn/tags/%E4%B8%8D%E7%94%9F%E6%95%88/"}]},{"title":"MAC怎么一次选中多个文件","slug":"Mac/MAC怎么一次选中多个文件","date":"2022-10-24T14:36:12.000Z","updated":"2024-01-05T17:32:17.639Z","comments":true,"path":"2022/10/24/Mac/MAC怎么一次选中多个文件/index.html","link":"","permalink":"http://www.lvhejin.cn/2022/10/24/Mac/MAC%E6%80%8E%E4%B9%88%E4%B8%80%E6%AC%A1%E9%80%89%E4%B8%AD%E5%A4%9A%E4%B8%AA%E6%96%87%E4%BB%B6/index.html","excerpt":"","text":"Mac一次选中多个文件的方法如下：工具/原料：MacBookPro，macOSCatalina。 1、首先打开文件夹，点击选中一个文件。 2、要选择连续的多个文件，按下键盘的上箭头shift键。 3、点击后面的一个文件，二个文件之间的多个文件就选中了。 4、然后要选中多个不连续的文件，按下键盘的command键。 5、点击要选择的文件，多点几个就可多选了。","categories":[{"name":"Mac","slug":"Mac","permalink":"http://www.lvhejin.cn/categories/Mac/"}],"tags":[{"name":"Mac快捷键","slug":"Mac快捷键","permalink":"http://www.lvhejin.cn/tags/Mac%E5%BF%AB%E6%8D%B7%E9%94%AE/"},{"name":"多选","slug":"多选","permalink":"http://www.lvhejin.cn/tags/%E5%A4%9A%E9%80%89/"},{"name":"点选","slug":"点选","permalink":"http://www.lvhejin.cn/tags/%E7%82%B9%E9%80%89/"}]},{"title":"Arthas简介","slug":"Arthas/Arthas简介","date":"2022-10-21T11:15:34.000Z","updated":"2024-01-05T17:32:17.599Z","comments":true,"path":"2022/10/21/Arthas/Arthas简介/index.html","link":"","permalink":"http://www.lvhejin.cn/2022/10/21/Arthas/Arthas%E7%AE%80%E4%BB%8B/index.html","excerpt":"","text":"简介 Arthas 是一款线上监控诊断产品，通过全局视角实时查看应用 load、内存、gc、线程的状态信息，并能在不修改应用代码的情况下，对业务问题进行诊断，包括查看方法调用的出入参、异常，监测方法执行耗时，类加载信息等，大大提升线上问题排查效率。 Arthas（阿尔萨斯）能为你做什么？Arthas 是 Alibaba 开源的 Java 诊断工具，深受开发者喜爱。 当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决： 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？ 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？ 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？ 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！ 是否有一个全局视角来查看系统的运行状况？ 有什么办法可以监控到 JVM 的实时运行状态？ 怎么快速定位应用的热点，生成火焰图？ 怎样直接从 JVM 内查找某个类的实例？ Arthas 支持 JDK 6+，支持 Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 Tab 自动补全功能，进一步方便进行问题的定位和诊断。 如果您在使用 Arthas，请让我们知道，您的使用对我们非常重要：查看在新窗口打开 Contributors","categories":[{"name":"建站","slug":"建站","permalink":"http://www.lvhejin.cn/categories/%E5%BB%BA%E7%AB%99/"},{"name":"Hexo使用攻略","slug":"建站/Hexo使用攻略","permalink":"http://www.lvhejin.cn/categories/%E5%BB%BA%E7%AB%99/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5/"},{"name":"Github","slug":"建站/Hexo使用攻略/Github","permalink":"http://www.lvhejin.cn/categories/%E5%BB%BA%E7%AB%99/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5/Github/"}],"tags":[{"name":"测试","slug":"测试","permalink":"http://www.lvhejin.cn/tags/%E6%B5%8B%E8%AF%95/"},{"name":"开始","slug":"开始","permalink":"http://www.lvhejin.cn/tags/%E5%BC%80%E5%A7%8B/"}]},{"title":"Java运行指定类的main函数","slug":"Java/Java运行指定类的main函数","date":"2022-10-19T14:31:28.000Z","updated":"2024-01-05T17:32:17.635Z","comments":true,"path":"2022/10/19/Java/Java运行指定类的main函数/index.html","link":"","permalink":"http://www.lvhejin.cn/2022/10/19/Java/Java%E8%BF%90%E8%A1%8C%E6%8C%87%E5%AE%9A%E7%B1%BB%E7%9A%84main%E5%87%BD%E6%95%B0/index.html","excerpt":"","text":"运行jar文件的方法是：java -jar xxx.jar 但是有时，我们希望运行里面的具体某个类，这时可以通过：java -cp xxx.jar xxx.com.xxxx 它会找到这个类的main函数，开始执行 其中-cp命令是将xxx.jar加入到classpath，这样java class loader就会在这里面查找匹配的类。","categories":[{"name":"Java","slug":"Java","permalink":"http://www.lvhejin.cn/categories/Java/"}],"tags":[{"name":"启动","slug":"启动","permalink":"http://www.lvhejin.cn/tags/%E5%90%AF%E5%8A%A8/"}]},{"title":"JPS命令及参数介绍","slug":"Java/JPS命令及参数介绍","date":"2022-10-19T13:51:44.000Z","updated":"2024-01-05T17:32:17.623Z","comments":true,"path":"2022/10/19/Java/JPS命令及参数介绍/index.html","link":"","permalink":"http://www.lvhejin.cn/2022/10/19/Java/JPS%E5%91%BD%E4%BB%A4%E5%8F%8A%E5%8F%82%E6%95%B0%E4%BB%8B%E7%BB%8D/index.html","excerpt":"","text":"jps(Java Virtual Machine Process Status Tool) 查询Linux系统当前所有java进程pid的命令，并可通过opt来查看这些进程的详细启动参数。 命令格式：jps [options ] [ hostid ] [options]选项 ：-q：仅输出VM标识符，不包括classname,jar name,arguments in main method -m：输出main method的参数 -l：输出完全的包名，应用主类名，jar的完全路径名 -v：输出jvm参数 -V：输出通过flag文件传递到JVM中的参数(.hotspotrc文件或-XX:Flags=所指定的文件 -Joption：传递参数到vm,例如:-J-Xms512m [hostid]： [protocol:][[//]hostname][:port][/servername] 命令的输出格式 ：lvmid [ [ classname| JARfilename | “Unknown”] [ arg* ] [ jvmarg* ] ] 1.使用方法： 注：在当前命令行下打jps(jps存放在JAVA_HOME/bin/jps，使用时为了方便需将JAVA_HOME/bin/加入到Path) 。 $&gt; jps 201248 Bootstrap182106 AFEBootstrap157019 Jps76843 WorkgroupBootstrap76239 CtrlBootstrap 2.常用参数： -q 只显示pid，不显示class名称,jar文件名和传递给main方法的参数 $&gt; jps -q 28680 23789 -m 输出传递给main方法的参数，在嵌入式jvm上可能是null $&gt; jps -m 28715 Jps -m 23789 BossMain -l 输出应用程序main class的完整package名或者应用程序的jar文件完整路径名 $&gt; jps -l 28729 sun.tools.jps.Jps 23789 com.asiainfo.aimc.bossbi.BossMain 23651 23651 Resin -socketwait 32768 -stdout /resin/log/stdout.log -stderr /resin/log/stderr.log 23651 com.caucho.server.resin.Resin -v 输出传递给JVM的参数 $&gt; jps -v -V 隐藏输出传递给JVM的参数 $&gt; jps -V 转载：https://blog.csdn.net/u010214557/article/details/123225892","categories":[{"name":"Java","slug":"Java","permalink":"http://www.lvhejin.cn/categories/Java/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://www.lvhejin.cn/tags/Linux/"},{"name":"Win","slug":"Win","permalink":"http://www.lvhejin.cn/tags/Win/"},{"name":"jps","slug":"jps","permalink":"http://www.lvhejin.cn/tags/jps/"}]},{"title":"Java常用对象转换之文件操作","slug":"Java/Java常用对象转换之文件操作","date":"2022-10-18T18:17:40.000Z","updated":"2024-01-05T17:32:17.635Z","comments":true,"path":"2022/10/18/Java/Java常用对象转换之文件操作/index.html","link":"","permalink":"http://www.lvhejin.cn/2022/10/18/Java/Java%E5%B8%B8%E7%94%A8%E5%AF%B9%E8%B1%A1%E8%BD%AC%E6%8D%A2%E4%B9%8B%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/index.html","excerpt":"","text":"平时的开发中会经常遇到一些对象需要转换，本项目记录一些常见对象转换的方法，例如：文件转换、日期时间转换、stream流转换、集合对象转换等, 具体的示例代码见 github 项目：zzycreate/java-convert-example本文记录一些常用的文件操作，以备需要时直接使用 文件Java 为文件操作设计了很多的类，有数据相关的 IO Stream 流，与文件相关的File、Path等对文件系统的抽象。Java 的 io 包和几乎包含了所有操作输入、输出需要的类，另外 java1.4 开始推出的 nio 接口能更高效的完成一些工作。Java io 包中的流支持很多种格式，比如：基本类型、对象、本地化字符集等等。所有这些流类代表了输入源和输出目标。一个流可以理解为一个数据的序列。输入流表示从一个源读取数据，输出流表示向一个目标写数据。 IOIO 流分类： 按照流的流向分，可以分为输入流和输出流； 按照操作单元划分，可以划分为字节流和字符流； 按照流的角色划分为节点流和处理流。 按照操作方式分类： https://i.loli.net/2020/01/31/B51QcvfjrkKzygM.jpgjava IO Stream 操作方式分类 按照操作对象分类： https://i.loli.net/2020/01/31/T5cL6VxDgeqHvb2.jpgjava IO Stream 操作对象分类 IO 流基础对象： InputStream/Reader: 所有的输入流的基类，前者是字节输入流，后者是字符输入流。 OutputStream/Writer: 所有输出流的基类，前者是字节输出流，后者是字符输出流。 NIOjava 1.4 版本后，重新设计出了一套新的 IO 接口：Non-blocking IO(NIO) NIO 与 IO 的区别： IO是面向流的，NIO是面向缓冲区的； IO流是阻塞的，NIO流是不阻塞的; NIO有选择器，而IO没有。 读写数据方式： 从通道进行数据读取 ：创建一个缓冲区，然后请求通道读取数据。 从通道进行数据写入 ：创建一个缓冲区，填充数据，并要求通道写入数据。 文件java 文件操作的基础是 File/Path, 一个代表文件，一个代表路径，两者组合完整地描述各种操作系统中的文件，尤其适合 Linux 的‘Everything is a File’ 的哲学。 String -&gt; File （Write File）使用 NIO 的 Files (推荐)由于 Files 是 nio 在 java7 新增的内容，使用本方法需要首先将程序的 jdk 升级到 jdk7+; Files 工具类提供了各种读写创建删除文件等操作，可以很方便的操作文件和流。 如果写入的是字符数据，则需要设置字符编码 Charset 如果写入的是字节数据（byte[]），不需要设置字符编码 如果想在已存在的文件后追加内容，可以增加 java.nio.file.StandardOpenOption#APPEND 参数 DEMO 参考： String2FileWithJavaNioExample List lines = Arrays.asList(“The second line”, “The second line”);Path path = Paths.get(“filename.txt”);try { Files.write(path, lines, StandardCharsets.UTF_8);} catch (IOException e) { e.printStackTrace();} 使用 NIO 的 Channel标准的IO编程接口是面向字节流和字符流的。而NIO是面向通道和缓冲区的，数据总是从通道中读到buffer缓冲区内，或者从buffer写入到通道中。 Java NIO 的 Channel 和 IO 流的对比： 通道可以读也可以写，流一般来说是单向的（只能读或者写）。 通道可以异步读写。 通道总是基于缓冲区Buffer来读写。 DEMO 参考： String2FileWithJavaNioExample 使用 FileOutputStream 的 FileChannel： String data = “The second line” + System.getProperty(“line.separator”) + “The second line” + System.getProperty(“line.separator”);// use ByteBuffer wrap datafinal ByteBuffer buffer = ByteBuffer.wrap(data.getBytes());// try-with-resources auto close the channeltry (// open channel final FileOutputStream fos = new FileOutputStream(new File(“filename.txt”)); FileChannel channel = fos.getChannel()) { // write buffer to channel while (buffer.hasRemaining()) { channel.write(buffer); } } catch (IOException e) { e.printStackTrace();} 使用 RandomAccessFile 的 FileChannel： String data = “The second line” + System.getProperty(“line.separator”) + “The second line” + System.getProperty(“line.separator”);final ByteBuffer buffer = ByteBuffer.wrap(data.getBytes());try(final RandomAccessFile file = new RandomAccessFile(“filename.txt”, “rw”); FileChannel channel = file.getChannel()){ while (buffer.hasRemaining())&#123; channel.write(buffer); &#125; } catch (IOException e) { e.printStackTrace();} 使用 BufferedWriter (推荐) BufferedWriter 可以设置缓存区大小 OutputStreamWriter 可以指定字符集编码 FileOutputStream 可以指定文件编辑模式(追加/覆盖) 使用 PrintWriter/FileWriter 一般写入的内容比较少，如果需要写入大量数据，应该要使用缓冲流，提高效率。 DEMO 参考： String2FileWithWriterExample try (Writer writer = new BufferedWriter(new OutputStreamWriter( new FileOutputStream(“filename.txt”, true), StandardCharsets.UTF_8))) { writer.write(“The second line” + System.getProperty(“line.separator”) + “The second line” + System.getProperty(“line.separator”));} catch (IOException e) { e.printStackTrace();} 使用 PrintWrite使用PrintWrite可以很简单的使用println进行单行输入，但是存在的文件会被截断 如果文件已经存在，PrintWriter 会将文件大小截断为零，如果不想截断文件，可以使用FileWriter作为替代，FileWriter设置字符大小和缓冲大小。 使用 PrintWriter 不需要输入文件 path，所以创建文件的路径需要看执行程序时的工作目录。 PriteWriter 会导致吞异常，见 stackoverflow.com/a/1747092/4678667 。 DEMO 参考： String2FileWithWriterExample try (PrintWriter writer = new PrintWriter(“filename.txt”, “UTF-8”)) { writer.println(“The first line”); writer.println(“The second line”);} catch (FileNotFoundException | UnsupportedEncodingException e) { e.printStackTrace();} 使用 FileWriterFileWriter 在创建的时候可以指定追加/覆盖模式，避免 PrintWriter 截断已存在的文件。 DEMO 参考： String2FileWithWriterExample try (FileWriter writer = new FileWriter(new File(“filename.txt”), true)) { writer.append(“The first line”).append(System.getProperty(“line.separator”)) .append(LINE2).append(System.getProperty(“line.separator”));} catch (IOException e) { e.printStackTrace();} 使用 commons-io 的 FileUtilsCommons-io 项目地址： apache/commons-io使用 commons-io 包中的 FileUtils 进行文件写入, 重构的方法可以设置文件编码和写入模式 DEMO 参考： String2FileWithCommonsExample try { String data = “The second line” + System.getProperty(“line.separator”) + “The second line” + System.getProperty(“line.separator”); FileUtils.writeStringToFile(new File(“filename.txt”), data, StandardCharsets.UTF_8, true);} catch (IOException e) { e.printStackTrace();} 使用 guava 的 FilesGuava 的官方开源项目地址： google/guavaguava 的 Files 可以直接向文件中写入 byte[] 数据Files 已被标注为 @Beta 不稳定的版本，并提示使用 jdk7 nio 的 Files、MoreFiles 等工具类利用 nio 的 Path 进行文件处理 DEMO 参考： String2FileWithGuavaExample try { String data = “The second line” + System.getProperty(“line.separator”) + “The second line” + System.getProperty(“line.separator”); Files.write(data.getBytes(), new File(“filename.txt”));} catch (IOException e) { e.printStackTrace();} 使用 guava 的 CharSink/ByteSinkguava 的 CharSink 可以直接向文件中写入字符数据，ByteSink 则可以写入字节数据Files 中的 write、append、copy 等方法本质上都是调用的这些 Sink 类。 DEMO 参考： String2FileWithGuavaExample try { String data = “The second line” + System.getProperty(“line.separator”) + “The second line” + System.getProperty(“line.separator”); Files.asCharSink(new File(“filename.txt”), StandardCharsets.UTF_8, FileWriteMode.APPEND).write(data);} catch (IOException e) { e.printStackTrace();} File -&gt; String (Read File)使用 NIO 的 Files (推荐)NIO 的 Files 工具类提供多种 read 方法可以快速进行文件读取 DEMO 参考： File2StringWithNioExample 使用 readAllBytes 读取字节： try { return new String(Files.readAllBytes(Paths.get(“filename.txt”)));} catch (IOException e) { e.printStackTrace();} 使用 readAllLines 逐行读取字符串： try { List lines = Files.readAllLines(Paths.get(“filename.txt”), StandardCharsets.UTF_8); StringBuilder sb = new StringBuilder(); lines.forEach(s -&gt; sb.append(s).append(SEPARATOR)); return sb.toString();} catch (IOException e) { e.printStackTrace();}return null; 由于 Stream 内部无法在 lambda 中使用带有 checked Exception 的方法，因此要对异常的抓取，防止发生异常 使用 lines 逐行读取字符串： try (Stream lines = Files.lines(Paths.get(“filename.txt”), StandardCharsets.UTF_8)) { StringBuilder content = new StringBuilder(); lines.forEach(s -&gt; content.append(s).append(SEPARATOR)); return content.toString();} catch (IOException e) { e.printStackTrace();} 使用 ScannerScanner 默认的缓冲大小为 1024, 可以读取文件，但是读取空文件的时候会出现异常，见 Scanner的讨论 DEMO 参考： File2StringWithScannerExample try (Scanner scanner = new Scanner(new File(FILE_NAME_INPUT), “UTF-8”)) { return scanner.useDelimiter(“\\A”).next();} catch (FileNotFoundException e) { e.printStackTrace();} 使用 BufferedReader (推荐)BufferedReader 缓冲流，可以高效的读取文件，使用 Reader 和 InputStream 组合可以设置各种配置。 使用 InputStreamReader 可以设置字符集 使用 FileInputStream 可以读取文件 或者使用 FileReader 直接读取文件，并用 BufferedReader 包装成缓存使用 DEMO 参考： File2StringWithReaderExample // new BufferedReader(new FileReader(“filename.txt”));try (BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(“filename.txt”), StandardCharsets.UTF_8))) { String line; StringBuilder stringBuilder = new StringBuilder(); while ((line = reader.readLine()) != null) { stringBuilder.append(line).append(SEPARATOR); } return stringBuilder.toString();} catch (IOException e) { e.printStackTrace();} 使用 FileInputStream仅仅使用 FileInputStream 进行文件读取，从 FileInputStream 写入 byte[] 缓存，转换为文本数据，这段代码只需要 jdk1.0+ DEMO 参考： File2StringWithReaderExample FileInputStream fis = null;try { fis = new FileInputStream(“filename.txt”); byte[] buffer = new byte[fis.available()]; int length = fis.read(buffer); return new String(buffer, 0, length, StandardCharsets.UTF_8);} catch (IOException e) { e.printStackTrace();} finally { if (fis != null) { try { fis.close(); } catch (IOException e) { e.printStackTrace(); } }}return null; 使用 commons-io 的 IOUtilscommons-io 的 IOUtils 工具类提供了大量 IO 相关的工具方法，使用 IOUtils.copy 直接将 Reader/InputStream 转换为 Writer/OutputStream DEMO 参考： File2StringWithCommonsExample 使用 FileReader 读取文件，使用 StringWriter 将流中的内容输出出来: try (FileReader fileReader = new FileReader(“filename.txt”); StringWriter stringWriter = new StringWriter()) { IOUtils.copy(fileReader, stringWriter); return stringWriter.toString();} catch (IOException e) { e.printStackTrace();} 使用 commons-io 的 FileUtilscommons-io 的 FileUtils 提供了文件相关的工具方法， 使用 FileUtils.readByFileUtilsReadFileToString 读取文件内容 DEMO 参考： File2StringWithCommonsExample try { return FileUtils.readFileToString(new File(“filename.txt”), StandardCharsets.UTF_8);} catch (IOException e) { e.printStackTrace();} 使用 guava 的 Files直接使用 guava 的 Files 转换为 ByteSource/CharSource 然后直接 read 成字符串: try { // Resources.asCharSource(new URL(“”), StandardCharsets.UTF_8).read(); return Files.asCharSource(new File(“filename.txt”), StandardCharsets.UTF_8).read();} catch (IOException e) { e.printStackTrace();} 或者使用 readLines 逐行读取： try { return String.join(System.getProperty(“line.separator”), Files.readLines(new File(“filename.txt”), StandardCharsets.UTF_8));} catch (IOException e) { e.printStackTrace();} File -&gt; File (copy File)使用 NIO 的 Channel标准的IO编程接口是面向字节流和字符流的。而NIO是面向通道和缓冲区的，数据总是从通道中读到buffer缓冲区内，或者从buffer写入到通道中。 Java NIO 的 Channel 和 IO 流的对比： 通道可以读也可以写，流一般来说是单向的（只能读或者写）。 通道可以异步读写。 通道总是基于缓冲区Buffer来读写。 Buffer 及其子类不是线程安全的 Buffer 的属性： capacity - 缓存容量 limit - 缓存下表限制值 position - 当前操作的下标值 mark - 临时下标值 几个属性的关系： 0 &lt;= mark &lt;= position &lt;= limit &lt;= capacity Buffer 的方法： mark(): mark 设置成 position clear(): mark 设置为 -1 清除标记, position 设置为 0, limit 设置为 capacity, 数据写入 Buffer 前调用 flip(): limit 设置成 position 当前位置作为上限, position 设置为 0, Buffer 读取数据前调用 rewind(): position 设置为 0, limit 不变, 数据重新写入 Buffer 前调用 使用不同的 Channel 同时操作同一个 Buffer 可以实现文件的复制。 DEMO 参考： File2FileWithNioExample try (FileInputStream input = new FileInputStream(“filename.txt”); FileOutputStream output = new FileOutputStream(“filename.txt”); ReadableByteChannel from = input.getChannel(); WritableByteChannel to = output.getChannel()) { ByteBuffer buffer = ByteBuffer.allocateDirect(16 * 1024); while (from.read(buffer) != -1) { // Prepare the buffer to be drained buffer.flip(); // Make sure that the buffer was fully drained while (buffer.hasRemaining()) &#123; to.write(buffer); &#125; // Make the buffer empty, ready for filling buffer.clear(); &#125; } catch (IOException e) { e.printStackTrace();} 原文链接：https://zzycreate.github.io/2019/05/04/java-convert-example-file/","categories":[{"name":"Java","slug":"Java","permalink":"http://www.lvhejin.cn/categories/Java/"}],"tags":[{"name":"IO","slug":"IO","permalink":"http://www.lvhejin.cn/tags/IO/"},{"name":"流","slug":"流","permalink":"http://www.lvhejin.cn/tags/%E6%B5%81/"}]},{"title":"警告：BASE64Decoder是内部专用API，可能会在未来发行版中删除","slug":"Java/警告：BASE64Decoder是内部专用API，可能会在未来发行版中删除","date":"2022-10-18T16:10:23.000Z","updated":"2024-01-05T17:32:17.635Z","comments":true,"path":"2022/10/18/Java/警告：BASE64Decoder是内部专用API，可能会在未来发行版中删除/index.html","link":"","permalink":"http://www.lvhejin.cn/2022/10/18/Java/%E8%AD%A6%E5%91%8A%EF%BC%9ABASE64Decoder%E6%98%AF%E5%86%85%E9%83%A8%E4%B8%93%E7%94%A8API%EF%BC%8C%E5%8F%AF%E8%83%BD%E4%BC%9A%E5%9C%A8%E6%9C%AA%E6%9D%A5%E5%8F%91%E8%A1%8C%E7%89%88%E4%B8%AD%E5%88%A0%E9%99%A4/index.html","excerpt":"","text":"开发过程中遇到这个问题，虽然不影响项目运行，打包发布，但还是要把警告扼杀在摇篮中。sun.misc包都是sun公司的内部类，并没有在java api中公开过，不建议使用，所以使用这些方法是不安全的，将来随时可能会从中去除，所以相应的应该使用替代的对象及方法。 针对警告: BASE64Decoder是内部专用 API, 可能会在未来发行版中删除解决办法 采用org.apache.commons.codec.binary.Base64替换 1import org.apache.commons.codec.binary.Base64; 123456789101112131415161718192021222324252627282930import org.apache.commons.codec.binary.Base64;/** * @author wind * @version V1.0 * @className Base64Encoder * @createDate 2021年12月28日 */public class Base64Encoder &#123; /** * @param bytes * @return */ public static byte[] decode(final byte[] bytes) &#123; return Base64.decodeBase64(bytes); &#125; /** * 二进制数据编码为BASE64字符串 * * @param bytes * @return * @throws Exception */ public static String encode(final byte[] bytes) &#123; return new String(Base64.encodeBase64(bytes)); &#125;&#125; 原方法 123456789BASE64Encoder encoder = new BASE64Encoder();//String imagestr new String(base64en.encode(str.getBytes(&quot;GBK&quot;))).replace(&quot;\\n&quot;,&quot;&quot;).replace(&quot;\\r&quot;,&quot;&quot;);String imagestr = encoder.encode(captcha);BASE64Decoder decoder = new BASE64Decoder();byte[] bytes = decoder.decodeBuffer(imagestr); 现方法 12345678import java.util.Base64.Encoderimport java.util.Base64.DecoderEncoder encoder = Base64.getEncoder();String result = encoder.encodeToString(byteArray);Decoder decoder = Base64.getDecoder();byte[] result = decoder.decode(str); ————————————————原文链接：https://blog.csdn.net/weixin_42096792/article/details/122184709","categories":[{"name":"Java","slug":"Java","permalink":"http://www.lvhejin.cn/categories/Java/"}],"tags":[{"name":"开发异常","slug":"开发异常","permalink":"http://www.lvhejin.cn/tags/%E5%BC%80%E5%8F%91%E5%BC%82%E5%B8%B8/"},{"name":"base64","slug":"base64","permalink":"http://www.lvhejin.cn/tags/base64/"}]},{"title":"IDEA的Win和Mac快捷键大全","slug":"IDEA/IDEA的Win和Mac快捷键大全","date":"2022-10-13T18:05:58.000Z","updated":"2024-01-05T17:32:17.623Z","comments":true,"path":"2022/10/13/IDEA/IDEA的Win和Mac快捷键大全/index.html","link":"","permalink":"http://www.lvhejin.cn/2022/10/13/IDEA/IDEA%E7%9A%84Win%E5%92%8CMac%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%A4%A7%E5%85%A8/index.html","excerpt":"","text":"IDEA对新手来说难，可能其中一个原因就是快捷键组合多而且复杂但是它也很全，基本所有功能都可以通过快捷键来完成。 可以这么说，如果你掌握了所有IDEA的快捷键使用，那么你完全可以丢掉鼠标，而且不影响开发效率。 一、IntelliJ IDEA 快捷键大全 Win 版一、Ctrl 快捷键Ctrl + F 在当前文件进行文本查找 （必备） Ctrl + R 在当前文件进行文本替换 （必备） Ctrl + Z 撤销 （必备） Ctrl + Y 删除光标所在行 或 删除选中的行 （必备） Ctrl + X 剪切光标所在行 或 剪切选择内容 Ctrl + C 复制光标所在行 或 复制选择内容 Ctrl + D 复制光标所在行 或 复制选择内容，并把复制内容插入光标位置下面 （必备） Ctrl + W 递进式选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展选中范围（必备） Ctrl + E 显示最近打开的文件记录列表 （必备） Ctrl + N 根据输入的 名/类名 查找类文件 （必备） Ctrl + G 在当前文件跳转到指定行处 Ctrl + J 插入自定义动态代码模板 （必备） Ctrl + P 方法参数提示显示 （必备） Ctrl + Q 光标所在的变量 / 类名 / 方法名等上面（也可以在提示补充的时候按），显示文档内容 Ctrl + U 前往当前光标所在的方法的父类的方法 / 接口定义 （必备） Ctrl + B 进入光标所在的方法/变量的接口或是定义处，等效于 Ctrl + 左键单击 （必备） Ctrl + K 版本控制提交项目，需要此项目有加入到版本控制才可用 Ctrl + T 版本控制更新项目，需要此项目有加入到版本控制才可用 Ctrl + H 显示当前类的层次结构 Ctrl + O 选择可重写的方法 Ctrl + I 选择可继承的方法 Ctrl + + 展开代码 Ctrl + - 折叠代码 Ctrl + / 释光标所在行代码，会根据当前不同文件类型使用不同的注释符号 （必备） Ctrl + U 前往当前光标所在的方法的父类的方法 / 接口定义 （必备） Ctrl + B 进入光标所在的方法/变量的接口或是定义处，等效于 Ctrl + 左键单击 （必备） Ctrl + K 版本控制提交项目，需要此项目有加入到版本控制才可用 Ctrl + T 版本控制更新项目，需要此项目有加入到版本控制才可用 Ctrl + H 显示当前类的层次结构 Ctrl + O 选择可重写的方法 Ctrl + I 选择可继承的方法 Ctrl + + 展开代码 Ctrl + - 折叠代码 Ctrl + / 释光标所在行代码，会根据当前不同文件类型使用不同的注释符号 （必备） Ctrl + 移动光标到当前所在代码的花括号开始位置 Ctrl + ] 移动光标到当前所在代码的花括号结束位置 Ctrl + F1 在光标所在的错误代码处显示错误信息 （必备） Ctrl + F3 调转到所选中的词的下一个引用位置 （必备） Ctrl + F4 关闭当前编辑文件 Ctrl + F8 在 Debug 模式下，设置光标当前行为断点，如果当前已经是断点则去掉断点 Ctrl + F9 执行 Make Project 操作 Ctrl + F11 选中文件 / 文件夹，使用助记符设定 / 取消书签 （必备） Ctrl + F12 弹出当前文件结构层，可以在弹出的层上直接输入，进行筛选 Ctrl + Tab 编辑窗口切换，如果在切换的过程又加按上 delete，则是关闭对应选中的窗口 Ctrl + End 跳到文件尾 Ctrl + Home 跳到文件头 Ctrl + Space 基础代码补全，默认在 Windows 系统上被输入法占用，需要进行修改，建议 修改为 Ctrl +逗号 （必备） Ctrl + Delete 删除光标后面的单词或是中文句 （必备） Ctrl +BackSpace 删除光标前面的单词或是中文句 （必备） Ctrl +1,2,3…9 定位到对应数值的书签位置 （必备） Ctrl + 左键单击 在打开的文件标题上，弹出该文件路径 （必备） Ctrl + 光标定位按 Ctrl 不要松开，会显示光标所在的类信息摘要 Ctrl + 左方向键 光标跳转到当前单词 / 中文句的左侧开头位置 （必备） Ctrl + 右方向键 光标跳转到当前单词 / 中文句的右侧开头位置 （必备） Ctrl + 前方向键 等效于鼠标滚轮向前效果 （必备） Ctrl + 后方向键 等效于鼠标滚轮向后效果 （必备） 二、Alt 快捷键Alt + 显示版本控制常用操作菜单弹出层 （必备） Alt + Q 弹出一个提示，显示当前类的声明 / 上下文信息 Alt + F1 显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择 （必备） Alt + F2 对于前面页面，显示各类浏览器打开目标选择弹出层 Alt + F3 选中文本，逐个往下查找相同文本，并高亮显示 Alt + F7 查找光标所在的方法 / 变量 / 类被调用的地方 Alt + F8 在 Debug 的状态下，选中对象，弹出可输入计算表达式调试框，查看该输入内容的调试结果 Alt + Home 定位 / 显示到当前文件的 Navigation Bar Alt + Enter IntelliJ IDEA 根据光标所在问题，提供快速修复选择，光标放在的位置不同提示 的结果也不同 （必备） Alt + Insert 代码自动生成，如生成对象的 set / get 方法，构造函数，toString() 等 （必备） Alt + 左方向键 切换当前已打开的窗口中的子视图，比如 Debug 窗口中有 Output、Debugger 等子视图，用此快捷键就可以在子视图中切换 （必备） Alt + 右方向键 按切换当前已打开的窗口中的子视图，比如 Debug 窗口中有 Output、Debugger 等子视图，用此快捷键就可以在子视图中切换 （必备） Alt + 前方向键 当前光标跳转到当前文件的前一个方法名位置 （必备） Alt + 后方向键 当前光标跳转到当前文件的后一个方法名位置 （必备） Alt +1,2,3…9 显示对应数值的选项卡，其中 1 是 Project 用得最多 （必备） 三、Shift 快捷键Shift + F1 如果有外部文档可以连接外部文档 Shift + F2 跳转到上一个高亮错误 或 警告位置 Shift + F3 在查找模式下，查找匹配上一个 Shift + F4 对当前打开的文件，使用新 Windows 窗口打开，旧窗口保留 Shift + F6 对文件 / 文件夹 重命名 Shift + F7 在 Debug 模式下，智能步入。断点所在行上有多个方法调用，会弹出进入哪个方法 Shift + F8 在 Debug 模式下，跳出，表现出来的效果跟 F9 一样 Shift + F9 等效于点击工具栏的 Debug 按钮 Shift + F10 等效于点击工具栏的 Run 按钮 Shift + F11 弹出书签显示层 （必备） Shift + Tab 取消缩进 （必备） Shift + ESC 隐藏当前 或 最后一个激活的工具窗口 Shift + End 选中光标到当前行尾位置 Shift + Home 选中光标到当前行头位置 Shift + Enter 开始新一行。光标所在行下空出一行，光标定位到新行位置 （必备） Shift + 左键单击 在打开的文件名上按此快捷键，可以关闭当前打开文件 （必备） Shift + 滚轮前后滚动 当前文件的横向滚动轴滚动 （必备） 四、Ctrl + Alt 快捷键Ctrl + Alt + L 格式化代码，可以对当前文件和整个包目录使用 （必备） Ctrl + Alt + O 优化导入的类，可以对当前文件和整个包目录使用 （必备） Ctrl + Alt + I 光标所在行 或 选中部分进行自动代码缩进，有点类似格式化 Ctrl + Alt + T 对选中的代码弹出环绕选项弹出层 （必备） Ctrl + Alt + J 弹出模板选择窗口，将选定的代码加入动态模板中 Ctrl + Alt + H 调用层次 Ctrl + Alt + B 在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口 Ctrl + Alt + V 快速引进变量 Ctrl + Alt + Y 同步、刷新 Ctrl + Alt + S 打开 IntelliJ IDEA 系统设置 （必备） Ctrl + Alt + F7 显示使用的地方。寻找被该类或是变量被调用的地方，用弹出框的方式找出来 Ctrl + Alt + F11 切换全屏模式 Ctrl + Alt + Enter 光标所在行上空出一行，光标定位到新行 （必备） Ctrl + Alt + Home 弹出跟当前文件有关联的文件弹出层 Ctrl + Alt + Space 类名自动完成 Ctrl + Alt + 左方向键 退回到上一个操作的地方 （必备） Ctrl + Alt + 右方向键 前进到上一个操作的地方 （必备） Ctrl + Alt + 前方向键 在查找模式下，跳到上个查找的文件 Ctrl + Alt + 后方向键 在查找模式下，跳到下个查找的文件 五、Ctrl + Shift 快捷键Ctrl + Shift + F 根据输入内容查找整个项目 或 指定目录内文件 （必备） Ctrl + Shift + R 根据输入内容替换对应内容，范围为整个项目 或 指定目录内文件 （必备） Ctrl + Shift + J 自动将下一行合并到当前行末尾 （必备） Ctrl + Shift + Z 取消撤销 （必备） Ctrl + Shift + W 递进式取消选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展取消选中范围 （必备） Ctrl + Shift + N 通过文件名定位 / 打开文件 / 目录，打开目录需要在 输入的内容后面多加一个正斜杠 （必备） Ctrl + Shift + U 对选中的代码进行大 / 小写轮流转换 （必备） Ctrl + Shift + T 对当前类生成单元测试类，如果已经存在的单元测试类则可以进行选择 （必备） Ctrl + Shift + C 复制当前文件磁盘路径到剪贴板 （必备） Ctrl + Shift + V 弹出缓存的最近拷贝的内容管理器弹出层 Ctrl + Shift + E 显示最近修改的文件列表的弹出层 Ctrl + Shift + H 显示方法层次结构 Ctrl + Shift + B 跳转到类型声明处 （必备） Ctrl + Shift + I 快速查看光标所在的方法 或 类的定义 Ctrl + Shift + A 查找动作 / 设置 Ctrl + Shift + / 代码块注释 （必备） Ctrl + Shift + 选中从光标所在位置到它的顶部中括号位置 （必备） Ctrl + Shift + ] 选中从光标所在位置到它的底部中括号位置 （必备） Ctrl + Shift + + 展开所有代码 （必备） Ctrl + Shift + - 折叠所有代码 （必备） Ctrl + Shift + F7 高亮显示所有该选中文本，按 Esc 高亮消失 （必备） Ctrl + Shift + F8 在 Debug 模式下，指定断点进入条件 Ctrl + Shift + F9 编译选中的文件 / 包 / Module Ctrl + Shift + F12 编辑器最大化 （必备） Ctrl + Shift + Space 智能代码提示 Ctrl + Shift + Enter 自动结束代码，行末自动添加分号 （必备） Ctrl + Shift +Backspace 退回到上次修改的地方 （必备） Ctrl + Shift +1,2,3…9 快速添加指定数值的书签 （必备） Ctrl + Shift + 左键单击 把光标放在某个类变量上，按此快捷键可以直接定位到该类中 （必备） Ctrl + Shift + 左方向键 在代码文件上，光标跳转到当前单词 / 中文句的左侧开头位置， 同时选中该单词 / 中文句（必备） Ctrl + Shift + 右方向键 在代码文件上，光标跳转到当前单词 / 中文句的右侧开头位置， 同时选中该单词 / 中文句（必备） Ctrl + Shift + 前方向键 光标放在方法名上，将方法移动到上一个方法前面，调整方法排序 （必备） Ctrl + Shift + 后方向键 光标放在方法名上，将方法移动到下一个方法前面，调整方法 Ctrl + Shift + 右方向键 在代码文件上，光标跳转到当前单词 / 中文句的右侧开头位置， 同时选中该单词 / 中文句（必备） Ctrl + Shift + 前方向键 光标放在方法名上，将方法移动到上一个方法前面，调整方法排序 （必备） Ctrl + Shift + 后方向键 光标放在方法名上，将方法移动到下一个方法前面，调整方法 排序 （必备） 六、Alt + Shift 快捷键Alt + Shift + N 选择 / 添加 task （必备） Alt + Shift + F 显示添加到收藏夹弹出层 / 添加到收藏夹 Alt + Shift + C 查看最近操作项目的变化情况列表 Alt + Shift + I 查看项目当前文件 Alt + Shift + F7在 Debug 模式下，下一步，进入当前方法体内，如果方法体还有方法，则会进入该内嵌的方法中，依此循环进入 Alt + Shift + F9 弹出 Debug 的可选择菜单 Alt + Shift + F10 弹出 Run 的可选择菜单 Alt + Shift + 左键双击 选择被双击的单词 / 中文句，按住不放，可以同时选择其他单词 / 中文句 （必备） Alt + Shift + 前方向键 移动光标所在行向上移动 （必备） Alt + Shift + 后方向键 移动光标所在行向下移动 （必备） 七、Ctrl + Shift + Alt 快捷键Ctrl + Shift + Alt + V 无格式黏贴 （必备） Ctrl + Shift + Alt + N 前往指定的变量 / 方法 Ctrl + Shift + Alt + S 打开当前项目设置 （必备） Ctrl + Shift + Alt + C 复制参考信息 八、其他快捷键F2 跳转到下一个高亮错误 或 警告位置 （必备） F3 在查找模式下，定位到下一个匹配处 F4 编辑源 （必备） F7 在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中 F8 在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则不进入当前方法体内 F9 在 Debug 模式下，恢复程序运行，但是如果该断点下面代码还有断点则停在下一个断点上 F11 添加书签 （必备） F12 回到前一个工具窗口 （必备） Tab 缩进 （必备） ESC 从工具窗口进入代码文件窗口 （必备） 连按两次Shift 弹出 Search Everywhere 弹出层 推荐下自己做的 Spring Boot 的实战项目： https://github.com/YunaiV/ruoyi-vue-pro 二、IntelliJ IDEA 快捷键大全 MacMac键盘符号和修饰键说明⌘ Command ⇧ Shift ⌥ Option ⌃ Control ↩︎ Return/Enter ⌫ Delete ⌦ 向前删除键（Fn+Delete） ↑ 上箭头 ↓ 下箭头 ← 左箭头 → 右箭头 ⇞ Page Up（Fn+↑） ⇟ Page Down（Fn+↓） Home Fn + ← End Fn + → ⇥ 右制表符（Tab键） ⇤ 左制表符（Shift+Tab） ⎋ Escape (Esc) 一、Editing（编辑）⌃Space 基本的代码补全（补全任何类、方法、变量） ⌃⇧Space 智能代码补全（过滤器方法列表和变量的预期类型） ⌘⇧↩ 自动结束代码，行末自动添加分号 ⌘P 显示方法的参数信息 ⌃J, Mid. button click 快速查看文档 ⇧F1 查看外部文档（在某些代码上会触发打开浏览器显示相关文档） ⌘+鼠标放在代码上 显示代码简要信息 ⌘F1 在错误或警告处显示具体描述信息 ⌘N, ⌃↩, ⌃N 生成代码（getter、setter、构造函数、 hashCode/equals,toString） ⌃O 覆盖方法（重写父类方法） ⌃I 实现方法（实现接口中的方法） ⌘⌥T 包围代码（使用if..else, try..catch, for, synchronized等包围 选中的代码） ⌘/ 注释/取消注释与行注释 ⌘⌥/ 注释/取消注释与块注释 ⌥↑ 连续选中代码块 ⌥↓ 减少当前选中的代码块 ⌃⇧Q 显示上下文信息 ⌥↩ 显示意向动作和快速修复代码 ⌘⌥L 格式化代码 ⌃⌥O 优化import ⌃⌥I 自动缩进线 ⇥ / ⇧⇥ 缩进代码 / 反缩进代码 ⌘X 剪切当前行或选定的块到剪贴板 ⌘C 复制当前行或选定的块到剪贴板 ⌘V 从剪贴板粘贴 ⌘⇧V 从最近的缓冲区粘贴 ⌘D 复制当前行或选定的块 ⌘⌫ 删除当前行或选定的块的行 ⌃⇧J 智能的将代码拼接成一行 ⌘↩ 智能的拆分拼接的行 ⇧↩ 开始新的一行 ⌘⇧U 大小写切换 ⌘⇧] / ⌘⇧ 选择直到代码块结束/开始 ⌥⌦ 删除到单词的末尾（⌦键为Fn+Delete） ⌥⌫ 删除到单词的开头 ⌘+ / ⌘- 展开 / 折叠代码块 ⌘⇧+ 展开所以代码块 ⌘⇧- 折叠所有代码块 ⌘W 关闭活动的编辑器选项卡 二、Search/Replace（查询/替换）Double ⇧ 查询任何东西 ⌘F 文件内查找 ⌘G 查找模式下，向下查找 ⌘⇧G 查找模式下，向上查找 ⌘R 文件内替换 ⌘⇧F 全局查找（根据路径） ⌘⇧R 全局替换（根据路径） ⌘⇧S 查询结构（Ultimate Edition 版专用，需要在Keymap中设置） ⌘⇧M 替换结构（Ultimate Edition 版专用，需要在Keymap中设置） 三、Usage Search（使用查询）⌥F7 / ⌘F7 在文件中查找用法 / 在类中查找用法 ⌘⇧F7 在文件中突出显示的用法 ⌘⌥F7 显示用法 四、Compile and Run（编译和运行）⌘F9 编译Project ⌘⇧F9 编译选择的文件、包或模块 ⌃⌥R 弹出 Run 的可选择菜单 ⌃⌥D 弹出 Debug 的可选择菜单 ⌃R 运行 ⌃D 调试 ⌃⇧R, ⌃⇧D 从编辑器运行上下文环境配置 五、Debugging（调试）F8 进入下一步，如果当前行断点是一个方法，则不进入当前方法体内 F7 进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该 方法体还有方法，则不会进入该内嵌的方法中 ⇧F7 智能步入，断点所在行上有多个方法调用，会弹出进入哪个方法 ⇧F8 跳出 ⌥F9 运行到光标处，如果光标前有其他断点会进入到该断点 ⌥F8 计算表达式（可以更改变量值使其生效） ⌘⌥R 恢复程序运行，如果该断点下面代码还有断点则停在下一个断点上 ⌘F8 切换断点（若光标当前行有断点则取消断点，没有则加上断点） ⌘⇧F8 查看断点信息 六、Navigation（导航）⌘O 查找类文件 ⌘⇧O 查找所有类型文件、打开文件、打开目录，打开目录需要在输入的内容前面或后面加一个反斜杠/ ⌘⌥O 前往指定的变量 / 方法 ⌃← / ⌃→ 左右切换打开的编辑tab页 F12 返回到前一个工具窗口 ⎋ 从工具窗口进入代码文件窗口 ⇧⎋ 隐藏当前或最后一个活动的窗口，且光标进入代码文件窗口 ⌘⇧F4 关闭活动run/messages/find/… tab ⌘L 在当前文件跳转到某一行的指定处 ⌘E 显示最近打开的文件记录列表 ⌘⌥← / ⌘⌥→ 退回 / 前进到上一个操作的地方 ⌘⇧⌫ 跳转到最后一个编辑的地方 ⌥F1 显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择(如在 代码编辑窗口可以选择显示该文件的Finder) ⌘B / ⌘ 鼠标点击 进入光标所在的方法/变量的接口或是定义处 ⌘⌥B 跳转到实现处，在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口 ⌥ Space, ⌘Y 快速打开光标所在方法、类的定义 ⌃⇧B 跳转到类型声明处 ⌘U 前往当前光标所在方法的父类的方法 / 接口定义 ⌃↓ / ⌃↑ 当前光标跳转到当前文件的前一个/后一个方法名位置 ⌘] / ⌘ 移动光标到当前所在代码的花括号开始/结束位置 ⌘F12 弹出当前文件结构层，可以在弹出的层上直接输入进行筛选（可用于搜索类中的方法） ⌃H 显示当前类的层次结构 ⌘⇧H 显示方法层次结构 ⌃⌥H 显示调用层次结构 F2 / ⇧F2 跳转到下一个/上一个突出错误或警告的位置 F4 / ⌘↓ 编辑/查看代码源 ⌥ Home 显示到当前文件的导航条 F3选中文件/文件夹/代码行，添加/取消书签 ⌥F3 选中文件/文件夹/代码行，使用助记符添加/取消书签 ⌃0…⌃9 定位到对应数值的书签位置 ⌘F3 显示所有书签 七、Refactoring（重构）F5 复制文件到指定目录 F6 移动文件到指定目录 ⌘⌫ 在文件上为安全删除文件，弹出确认框 ⇧F6 重命名文件 ⌘F6 更改签名 ⌘⌥N 一致性 ⌘⌥M 将选中的代码提取为方法 ⌘⌥V 提取变量 ⌘⌥F 提取字段 ⌘⌥C 提取常量 ⌘⌥P 提取参数 八、VCS/Local History（版本控制/本地历史记录）⌘K 提交代码到版本控制器 ⌘T 从版本控制器更新代码 ⌥⇧C 查看最近的变更记录 ⌃C 快速弹出版本控制器操作面板 九、Live Templates（动态代码模板）⌘⌥J 弹出模板选择窗口，将选定的代码使用动态模板包住 ⌘J 插入自定义动态代码模板 十、General（通用）⌘1…⌘9 打开相应编号的工具窗口 ⌘S 保存所有 ⌘⌥Y 同步、刷新 ⌃⌘F 切换全屏模式 ⌘⇧F12 切换最大化编辑器 ⌥⇧F 添加到收藏夹 ⌥⇧I 检查当前文件与当前的配置文件 §⌃, ⌃` 快速切换当前的scheme（切换主题、代码样式等） ⌘, 打开IDEA系统设置 ⌘; 打开项目结构对话框 ⇧⌘A 查找动作（可设置相关选项） ⌃⇥ 编辑窗口标签和工具窗口之间切换（如果在切换的过程加按上delete，则是关闭对应选中的窗口） 十一、Other（一些官方文档上没有体现的快捷键）⌘⇧8 竖编辑模式 导航⌘O 查找类文件 Ctrl + N ⌘⌥O 前往指定的变量 / 方法 Ctrl + Shift + Alt + N ⌃← / ⌃→ 左右切换打开的编辑tab页 Alt← / Alt→ ⎋ 从工具窗口进入代码文件窗口 ESC ⌘L 在当前文件跳转到某一行的指定处 Ctrl + G ⌘E 显示最近打开的文件记录列表 Ctrl + E ⌘⌥← / ⌘⌥→ 退回 / 前进到上一个操作的地方 Ctrl + Alt + ← Ctrl + Alt + → ⌘⇧⌫ 跳转到最后一个编辑的地方 ⌃H 显示当前类的层次结构 Ctrl + H ⌘⇧H 显示方法层次结构 ⌃⌥H 显示调用层次结构 F4 / ⌘↓ 编辑/查看代码源 ⌘⌥U 显示类UML图 ⌃J 查看注释 编辑⌥⌦ 删除到单词的末尾（⌦键为Fn+Delete） ⌥⌫ 删除到单词的开头 ⌘+ / ⌘- 展开 / 折叠代码块 ⌘F1 在错误或警告处显示具体描述信息 ⌘⌥L 格式化代码 ⌃⌥O 优化import ⇧↩ 开始新的一行 ⌘⇧↩ 自动结束代码，行末自动添加分号 ⌃I 实现方法（实现接口中的方法） ⇧F6 重命名文件或者变量 ⌘N, ⌃↩, ⌃N 生成代码（getter、setter、构造函数、hashCode/equals,toString） ⌘P 显示方法的参数信息 查找Double⇧ 查找任何东西 ⌘⇧F 全局查找（根据路径） ⌘F 文件内查找 ⌘G 查找模式下，向下查找 ⌘⇧G 查找模式下，向上查找 ⌘⌥B 跳转到接口的实现 ⌘U 查看接口定义 ⌘⌥← / ⌘⌥→ 退回 / 前进到上一个操作的地方 ⌘B / ⌘ 鼠标点击 进入光标所在的方法/变量的接口或是定义处 ⌃⇧B 跳转到类型声明处 ⌥ Space, ⌘Y 快速打开光标所在方法、类的定义 ⌘O 查找类文件 ⌘⇧O 查找所有类型文件、打开文件、打开目录，打开目录需要在输入的内容前面或后面加一个反斜杠/ F12 返回到前一个工具窗口 ⎋ 从工具窗口进入代码文件窗口 ⇧⎋ 隐藏当前或最后一个活动的窗口，且光标进入代码文件窗口 F3选中文件/文件夹/代码行，添加/取消书签 ⌥F3 选中文件/文件夹/代码行，使用助记符添加/取消书签 ⌃0…⌃9 定位到对应数值的书签位置 ⌘F3 显示所有书签 ⌥F1 显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择(如在代码编辑窗口可以选择显示该文件的Finder) ⌘F12 弹出当前文件结构层，可以在弹出的层上直接输入进行筛选（可用于搜索类中的方法） 通用 ⌃⌘F 切换全屏模式 链接： https://www.jianshu.com/p/2b61f162a2ee https://www.cnblogs.com/zzlback/p/16410171.html https://stock.xinpianchang.com/article/scbaike/33609.html https://www.cnblogs.com/wxd0108/p/5295017.html","categories":[{"name":"IDEA","slug":"IDEA","permalink":"http://www.lvhejin.cn/categories/IDEA/"}],"tags":[{"name":"快捷键","slug":"快捷键","permalink":"http://www.lvhejin.cn/tags/%E5%BF%AB%E6%8D%B7%E9%94%AE/"}]},{"title":"SpringBoot自定义HTTP返回状态码","slug":"SpringBoot/SpringBoot自定义HTTP返回状态码","date":"2022-10-13T17:17:22.000Z","updated":"2024-01-05T17:32:17.647Z","comments":true,"path":"2022/10/13/SpringBoot/SpringBoot自定义HTTP返回状态码/index.html","link":"","permalink":"http://www.lvhejin.cn/2022/10/13/SpringBoot/SpringBoot%E8%87%AA%E5%AE%9A%E4%B9%89HTTP%E8%BF%94%E5%9B%9E%E7%8A%B6%E6%80%81%E7%A0%81/index.html","excerpt":"","text":"最近在开发一些http server类型程序，通过spring boot构建一些web程序，这些web程序之间通过http进行数据访问、共享，如下图， 假设现在client发起一次保存数据的请求到server，server可能会返回如下类似的数据 1234&#123; &quot;status&quot;:1, &quot;message&quot;:&quot;xxxxxx&quot;&#125; 然后client通过解析json获得status来判断当前的请求操作是否成功，开发过程中通过都是这么做的，但是这样在restful设计中不怎么好，其实这个status字段的表达完全可以通过http status来表示，类似404、500、502这种都有明确的定义并且相互理解、沟通起来也方便。 文章主要记录一下我是如何在spring boot中实现自定反馈状态码的，以及我找到的三种实现方式。 第一种，使用**@ResponseStatus**。这是一个注解，可以作用在方法和类上面，如下使用， 在方法上使用方式， 12345@RequestMapping(value = &quot;/user&quot;, method = RequestMethod.GET) @ResponseStatus(code=HttpStatus.INTERNAL_SERVER_ERROR,reason=&quot;server error&quot;) public String getUser()&#123; return &quot;im zhangsan&quot;; &#125; 启动web程序，通过postman访问http://127.0.0.1:8100/user，会出现下面结果， 1234567&#123; &quot;timestamp&quot;: 1497850427325, &quot;status&quot;: 500, &quot;error&quot;: &quot;Internal Server Error&quot;, &quot;message&quot;: &quot;server error&quot;, &quot;path&quot;: &quot;/user&quot;&#125; 这里我一开始觉得很奇怪，为什么我的getUser方法中没有错误，结果还是出现了500错误？原因就是@ResponseStatus注解的问题，我后面猜测它会强制的将映射转化成500的状态码。这种应用场景我想不太明白在什么地方会用到。 在类中使用方式， 1234@ResponseStatus(code=HttpStatus.INTERNAL_SERVER_ERROR,reason=&quot;111&quot;)public class ServerException extends Exception &#123;&#125; 这种使用方式就是将自定义异常和状态码结合在一起，合理使用自定义异常机制可以最大化的提高程序的健壮性，下面看如何使用， 1234567@RequestMapping(value = &quot;/user&quot;, method = RequestMethod.GET)public String getUser(@RequestParam String userName) throws ServerException&#123; if(StringUtils.isEmpty(userName))&#123; throw new ServerException(); &#125; return &quot;im zhangsan&quot;;&#125; 这段代码的意思是当userName字段为null的时候会抛出ServerException异常，但是ServerException类被标记了@ResponseStatus注解，因此会直接报500错误，如果觉得500不适合还可以定义其它的错误代码。 这种方式看着已经很好了，可以按照逻辑自定义反馈码，程序够健壮。这种方式也有不好地方，如果反馈码太多需要定义太多的异常类，并且错误内容reason还是不能手动定义。 到这里，我基本上放弃了@ResponseStatus的使用了。 第二种，使用HttpServletResponse，HttpServletResponse是javax.servlet下的一个接口，如下使用， 12345@RequestMapping(value = &quot;/user&quot;, method = RequestMethod.GET)public void getUser(HttpServletResponse response) throws IOException&#123; response.setStatus(500); response.getWriter().append(&quot;server error&quot;);&#125; 这种方式可以很好的实现同时满足自定义反馈码+消息内容，一般的实现方式也都是这样。但是这样也不是太好， 在括号内创建了一个response内置变量，这样显得不够美观，反而有些多余。 在方法中调用了源生的方法来设置反馈码和消息体，并且如果需要返回json格式数据还需要设置response.setContentType(&quot;application/json&quot;);和response.setCharacterEncoding(&quot;UTF-8&quot;);，这样做有些多余，重复的工作太多，虽然可以进行封装。 最严重的问题这个方法必须是void类型，否则就会和@ResponseBody出现冲突，其次就是不能利用@ResponseBody自动封装json的特性，在spring mvc框架中如果在方法上加上@ResponseBody是可以对返回值自动进行json封装的。 再找找其他的，如果没有找到，估计也只能接受这个不完美的东西了。 后来在翻阅spring boot文档的时候找到了ResponseEntity这么一个东西，这就是我要说的第三种方式。 第三种，使用ResponseEntity 不多说，直接上代码， 123456@RequestMapping(value = &quot;/user&quot;, method = RequestMethod.GET)public ResponseEntity&lt;Map&lt;String,Object&gt;&gt; getUser() throws IOException&#123; Map&lt;String,Object&gt; map = new HashMap&lt;String,Object&gt;(); map.put(&quot;name&quot;, &quot;zhangsan&quot;); return new ResponseEntity&lt;Map&lt;String,Object&gt;&gt;(map,HttpStatus.OK);&#125; 通过postman查看返回结果，如下， 123&#123; &quot;name&quot;: &quot;zhangsan&quot;&#125; 可以直接将map对象帮我转化成json对象，并且可以获得自定义状态码，很好，很强大。 这种方式很和我意， 不需要多于的HttpServletResponse，看着很干净。 可以充分利用@ResponseBody注解，直接将我的返回值帮我转化成json对象。 在设置返回值的时候同时还可以设置http反馈码，HttpStatus是springframework提供的一个枚举类，里面封装了所有的http反馈码，方便使用命名统一，不会有任何歧义。 相比于前面两种，这种方式很对我胃口。 仔细看了ResponseEntity的说明，发现spring mvc其它很多地方也都有使用，如下，下面内容摘自org.springframework.http.ResponseEntity文件注释， In RestTemplate, this class is returned by getForEntity() and exchange(): 1234ResponseEntity&lt;String&gt; entity = template.getForEntity(&quot;http://example.com&quot;, String.class);String body = entity.getBody();MediaType contentType = entity.getHeaders().getContentType();HttpStatus statusCode = entity.getStatusCode(); Can also be used in Spring MVC, as the return value from a @Controller method: 12345678@RequestMapping(&quot;/handle&quot;) public ResponseEntity&lt;String&gt; handle() &#123; URI location = ...; HttpHeaders responseHeaders = new HttpHeaders(); responseHeaders.setLocation(location); responseHeaders.set(&quot;MyResponseHeader&quot;, &quot;MyValue&quot;); return new ResponseEntity&lt;String&gt;(&quot;Hello World&quot;, responseHeaders, HttpStatus.CREATED); &#125; 这就是上面说过的。 Or, by using a builder accessible via static methods: 12345@RequestMapping(&quot;/handle&quot;) public ResponseEntity&lt;String&gt; handle() &#123; URI location = ...; return ResponseEntity.created(location).header(&quot;MyResponseHeader&quot;, &quot;MyValue&quot;).body(&quot;Hello World&quot;); &#125; 自定义http反馈码在设计优良的restful api中起到关键作用，http反馈码是业内统一、共识的，建议在尽量不要通过解析json来获得status判断操作结果。 完。 阅读原文","categories":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://www.lvhejin.cn/categories/SpringBoot/"}],"tags":[{"name":"http返回状态码","slug":"http返回状态码","permalink":"http://www.lvhejin.cn/tags/http%E8%BF%94%E5%9B%9E%E7%8A%B6%E6%80%81%E7%A0%81/"}]},{"title":"SpringBoot快速接入Prometheus监控方法","slug":"SpringBoot/SpringBoot快速接入Prometheus监控方法","date":"2022-10-11T14:08:14.000Z","updated":"2024-01-05T17:32:17.643Z","comments":true,"path":"2022/10/11/SpringBoot/SpringBoot快速接入Prometheus监控方法/index.html","link":"","permalink":"http://www.lvhejin.cn/2022/10/11/SpringBoot/SpringBoot%E5%BF%AB%E9%80%9F%E6%8E%A5%E5%85%A5Prometheus%E7%9B%91%E6%8E%A7%E6%96%B9%E6%B3%95/index.html","excerpt":"","text":"步骤一：引入Spring Boot Actuator依赖，进行初始配置12345678910&lt;!-- spring-boot-actuator依赖 --&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;&lt;/dependency&gt;&lt;!-- prometheus依赖 --&gt;&lt;dependency&gt; &lt;groupId&gt;io.micrometer&lt;/groupId&gt; &lt;artifactId&gt;micrometer-registry-prometheus&lt;/artifactId&gt;&lt;/dependency&gt; 步骤二：在bootstrap-环境标示.yml中添加相关配置暴露监测数据端口。例如，端口为19098。 提示：监控端口根据自身服务设置，例如：微服务端口是：9098，监控端口设置为：19098，方便识别管理 123456789101112131415161718#prometheus监控平台配置management: server: port: 19098 # 直接访问这个端口即可显示相关监控接口 endpoints: jmx: exposure: include: &quot;*&quot; web: exposure: include: &quot;*&quot; exclude: configprops endpoint: health: show-details: ALWAYS metrics: tags: application: $&#123;spring.application.name&#125; 步骤三：启动服务，访问 http://localhost:19098/metrics接口返回： 123456789101112131415161718192021222324252627282930313233343536373839404142434445# HELP hikaricp_connections_timeout_total Connection timeout total count# TYPE hikaricp_connections_timeout_total counterhikaricp_connections_timeout_total&#123;application=&quot;picgen&quot;,pool=&quot;UserHikariCP&quot;,&#125; 0.0# HELP system_load_average_1m The sum of the number of runnable entities queued to available processors and the number of runnable entities running on the available processors averaged over a period of time# TYPE system_load_average_1m gaugesystem_load_average_1m&#123;application=&quot;picgen&quot;,&#125; 10.0771484375# HELP executor_pool_core_threads The core number of threads for the pool# TYPE executor_pool_core_threads gaugeexecutor_pool_core_threads&#123;application=&quot;picgen&quot;,name=&quot;applicationTaskExecutor&quot;,&#125; 8.0# HELP application_started_time_seconds Time taken (ms) to start the application# TYPE application_started_time_seconds gaugeapplication_started_time_seconds&#123;application=&quot;picgen&quot;,main_application_class=&quot;io.soundsright.picgen.SoundsrightPicgenApplication&quot;,&#125; 11.188# HELP tomcat_sessions_alive_max_seconds # TYPE tomcat_sessions_alive_max_seconds gaugetomcat_sessions_alive_max_seconds&#123;application=&quot;picgen&quot;,&#125; 0.0# HELP hikaricp_connections Total connections# TYPE hikaricp_connections gaugehikaricp_connections&#123;application=&quot;picgen&quot;,pool=&quot;UserHikariCP&quot;,&#125; 5.0# HELP app_requests_method_count_total # TYPE app_requests_method_count_total counterapp_requests_method_count_total&#123;application=&quot;picgen&quot;,method=&quot;PrometheusController.core&quot;,&#125; 0.0app_requests_method_count_total&#123;application=&quot;picgen&quot;,method=&quot;PrometheusController.index&quot;,&#125; 0.0# HELP jvm_classes_loaded_classes The number of classes that are currently loaded in the Java virtual machine# TYPE jvm_classes_loaded_classes gaugejvm_classes_loaded_classes&#123;application=&quot;picgen&quot;,&#125; 16322.0# HELP jvm_buffer_total_capacity_bytes An estimate of the total capacity of the buffers in this pool# TYPE jvm_buffer_total_capacity_bytes gaugejvm_buffer_total_capacity_bytes&#123;application=&quot;picgen&quot;,id=&quot;mapped&quot;,&#125; 0.0jvm_buffer_total_capacity_bytes&#123;application=&quot;picgen&quot;,id=&quot;direct&quot;,&#125; 2263623.0# HELP hikaricp_connections_creation_seconds_max Connection creation time# TYPE hikaricp_connections_creation_seconds_max gaugehikaricp_connections_creation_seconds_max&#123;application=&quot;picgen&quot;,pool=&quot;UserHikariCP&quot;,&#125; 0.0# HELP hikaricp_connections_creation_seconds Connection creation time# TYPE hikaricp_connections_creation_seconds summaryhikaricp_connections_creation_seconds_count&#123;application=&quot;picgen&quot;,pool=&quot;UserHikariCP&quot;,&#125; 13.0hikaricp_connections_creation_seconds_sum&#123;application=&quot;picgen&quot;,pool=&quot;UserHikariCP&quot;,&#125; 10.01# HELP hikaricp_connections_usage_seconds Connection usage time# TYPE hikaricp_connections_usage_seconds summaryhikaricp_connections_usage_seconds_count&#123;application=&quot;picgen&quot;,pool=&quot;UserHikariCP&quot;,&#125; 298.0hikaricp_connections_usage_seconds_sum&#123;application=&quot;picgen&quot;,pool=&quot;UserHikariCP&quot;,&#125; 45.876# HELP hikaricp_connections_usage_seconds_max Connection usage time# TYPE hikaricp_connections_usage_seconds_max gauge下面省略一千多行…… 参考： https://blog.csdn.net/nandao158/article/details/120306729 https://blog.51cto.com/u_15102934/2632151 https://cloud.tencent.com/developer/article/1553781 https://help.aliyun.com/document_detail/423850.html 使用docker部署spring boot并接入skywalking的方法：https://www.jb51.net/article/210119.htm","categories":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://www.lvhejin.cn/categories/SpringBoot/"},{"name":"Prometheus","slug":"SpringBoot/Prometheus","permalink":"http://www.lvhejin.cn/categories/SpringBoot/Prometheus/"}],"tags":[{"name":"监控","slug":"监控","permalink":"http://www.lvhejin.cn/tags/%E7%9B%91%E6%8E%A7/"},{"name":"GC","slug":"GC","permalink":"http://www.lvhejin.cn/tags/GC/"}]},{"title":"使用vsCode配置Go开发环境","slug":"VsCode/使用vsCode配置Go开发环境","date":"2022-10-10T15:17:06.000Z","updated":"2024-01-05T17:32:17.647Z","comments":true,"path":"2022/10/10/VsCode/使用vsCode配置Go开发环境/index.html","link":"","permalink":"http://www.lvhejin.cn/2022/10/10/VsCode/%E4%BD%BF%E7%94%A8vsCode%E9%85%8D%E7%BD%AEGo%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/index.html","excerpt":"","text":"Go安装配置 下载安装文件因为国内网络的原因可以选择到 Go中文网 下载，选择自己操作系统对应的版本下载。 下载后进行安装，可以一直默认，也可以根据自己放到想要的路径。安装完成后在命令行中执行以下go version，打印出正常的版本信息go version go1.17.2 darwin/amd64。 配置Go mod镜像123456go env -w GO111MODULE=ongo env -w GOPROXY=https://goproxy.cn,direct# 清空缓存 go clean --modcache# 查看环境信息go env ) 如果设置了mod模式，则需要初始化mod文件，TERMINAL，输入命令go mod init 项目名，执行后会在文件夹中生成一个go.mod文件，里面包含了所有的依赖信息 VsCode Go的正确安装方式从扩展管理中安装Go插件 VsCode Go插件依赖的工具 安装Go插件所依赖的go tools按ctrl+shift+p 调出命令面板，输入go install tools 选Go: Install/Update Tools 或者新建一个Go文件， VSCode会激活Go插件，提示的工具全部安装就行了。安装成功 理可顿悟，事须渐修 参考： https://blog.51cto.com/u_15127649/4541075 https://learn.microsoft.com/zh-cn/azure/developer/go/configure-visual-studio-code https://blog.csdn.net/mall_lucy/article/details/112920410 https://sysin.org/blog/go-vs-code/#Go-1-16-%E5%8F%91%E5%B8%83","categories":[{"name":"VsCode","slug":"VsCode","permalink":"http://www.lvhejin.cn/categories/VsCode/"}],"tags":[{"name":"Go","slug":"Go","permalink":"http://www.lvhejin.cn/tags/Go/"},{"name":"Golang","slug":"Golang","permalink":"http://www.lvhejin.cn/tags/Golang/"},{"name":"VsCode","slug":"VsCode","permalink":"http://www.lvhejin.cn/tags/VsCode/"}]},{"title":"Hexo博客技巧：添加自定义html页面","slug":"Hexo/Hexo博客技巧：添加自定义html页面","date":"2022-10-08T15:55:42.000Z","updated":"2024-01-05T17:32:17.619Z","comments":true,"path":"2022/10/08/Hexo/Hexo博客技巧：添加自定义html页面/index.html","link":"","permalink":"http://www.lvhejin.cn/2022/10/08/Hexo/Hexo%E5%8D%9A%E5%AE%A2%E6%8A%80%E5%B7%A7%EF%BC%9A%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89html%E9%A1%B5%E9%9D%A2/index.html","excerpt":"","text":"前言以前收集了很多有趣的html特效文件，自己也写过不少，但是这些文件都有一个缺点：只能本地浏览。 很早以前就有一个想法，就是将这些文件部署到网站上供人们随时随地浏览，只是一直没能实现。现在有了自己的博客，正好实现完成这个想法。 具体过程1.首先在博客根目录的source文件夹下，新建一个文件夹用于存放要部署的HTML文件： 我这里建了一个叫HTML的文件夹，里面的子文件夹可以存放各个HTML文件，当然也可以只创建一个主文件夹，直接在里面放HTML文件。 2.然后在博客根目录的配置文件_config.yml文件里，设置跳过渲染： 单个文件，就写： 123# 跳过渲染skip_render: - &quot;xxxx.html&quot; 如果只创建了一个文件夹，要跳过它目录下所有文件的渲染，就写： 123# 跳过文件夹下所有文件skip_render: - &quot;文件夹名/*&quot; 如果父文件夹下还有子文件夹，就写： 123# 跳过子文件夹skip_render: - &quot;文件夹名/子文件夹名/*&quot; 或更简单粗暴的方式： 123# 跳过文件夹下所有子文件夹和文件skip_render: - &quot;文件夹名/**&quot; 3.最后处理css、js文件 因为hexo部署的是静态文件，所有文章的md文件会被渲染成html文件，hexo会帮我们把所有css、js文件都加到文章里，我们之前跳过了渲染，所以就需要手动把css、js整合到html文件里 一般我们的代码就是这种结构： 下面处理分两部分： css：找到index.html文件里的语句,如： 1&lt;link rel=&quot;stylesheet&quot; href=&quot;css/xxx.css&quot;&gt; ​ 然后在css文件夹中找到对应的文件xxx.css，复制文件内容，把上面的代码改为： 1&lt;style&gt; css代码内容 &lt;/style&gt; js：找到index.html文件里的语句，如： 1&lt;script src=&quot;js/xxx.js&quot;&gt;&lt;/script&gt; ​ 然后在js文件夹中找到对应的文件xxx.js，复制文件内容，把上面的代码改为： 1&lt;script&gt; js代码内容 &lt;/script&gt; 4.检验成果 123hexo cleanhexo ghexo d 部署后来到https://xxxxx.github.io/存放html文件的文件夹/xxx.html 即可查看到你的自定义html页面了！ 建议在部署前先试试在本地能否打开，如果不行再按上文修改一次。 其他的优化如果想将这些html的界面放到导航菜单栏上，修改主题配置文件_config.butterfly.yml对应的导航菜单栏代码即可，这里将我的代码放出： 1234567891011121314151617181920menu: 主页: / || fas fa-home 时间轴: /archives/ || fas fa-archive 标签: /tags/ || fas fa-tags 分类: /categories/ || fas fa-folder-open Demo||fas fa-file-code: - all html demo || /Demo/ || far fa-file-code - 圈小猫 || /HTML/圈小猫.html || fas fa-code - 撕渔网 || /HTML/撕渔网.html || fas fa-code - 纸飞机 || /HTML/纸飞机.html || fas fa-code - 彩虹雨 || /HTML/彩虹雨.html || fas fa-code - 方块穿梭 || /HTML/方块穿梭.html || fas fa-code - 碰撞小球 || /HTML/碰撞小球.html || fas fa-code - 烟花效果 || /HTML/烟花效果.html || fas fa-code - 骇客帝国 || /HTML/骇客帝国.html || fas fa-code 娱乐||fas fa-list: - 音乐 || /music/ || fas fa-music - 电影 || /movies/ || fas fa-video 友链: /link/ || fas fa-link 关于: /about/ || fas fa-heart 我的Demo可在导航菜单Demo栏查看我部署在网站上的html。 顺便也做个表格练练手吧： html文件名 对应链接地址 圈小猫 圈小猫.html 撕渔网 撕渔网.html 纸飞机 纸飞机.html 彩虹雨 彩虹雨.html 方块穿梭 方块穿梭.html 碰撞小球 碰撞小球.html 烟花效果 烟花效果.html 骇客帝国 骇客帝国.html ————————————————原文链接：https://blog.csdn.net/weixin_58068682/article/details/116611715","categories":[{"name":"建站","slug":"建站","permalink":"http://www.lvhejin.cn/categories/%E5%BB%BA%E7%AB%99/"},{"name":"Hexo使用攻略","slug":"建站/Hexo使用攻略","permalink":"http://www.lvhejin.cn/categories/%E5%BB%BA%E7%AB%99/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5/"},{"name":"Github","slug":"建站/Hexo使用攻略/Github","permalink":"http://www.lvhejin.cn/categories/%E5%BB%BA%E7%AB%99/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5/Github/"}],"tags":[{"name":"测试","slug":"测试","permalink":"http://www.lvhejin.cn/tags/%E6%B5%8B%E8%AF%95/"},{"name":"开始","slug":"开始","permalink":"http://www.lvhejin.cn/tags/%E5%BC%80%E5%A7%8B/"}]},{"title":"使用MySQL从20万条数据中通过筛选随机取出1条数据的方法","slug":"MySQL/使用MySQL从20万条数据中通过筛选随机取出1条数据的方法","date":"2022-10-08T14:05:28.000Z","updated":"2024-01-05T17:32:17.643Z","comments":true,"path":"2022/10/08/MySQL/使用MySQL从20万条数据中通过筛选随机取出1条数据的方法/index.html","link":"","permalink":"http://www.lvhejin.cn/2022/10/08/MySQL/%E4%BD%BF%E7%94%A8MySQL%E4%BB%8E20%E4%B8%87%E6%9D%A1%E6%95%B0%E6%8D%AE%E4%B8%AD%E9%80%9A%E8%BF%87%E7%AD%9B%E9%80%89%E9%9A%8F%E6%9C%BA%E5%8F%96%E5%87%BA1%E6%9D%A1%E6%95%B0%E6%8D%AE%E7%9A%84%E6%96%B9%E6%B3%95/index.html","excerpt":"","text":"因为业务需要，要求在一个where筛选完的数据集中随机取出1条数据。 经典的方法 1SELECT * FROM table where 条件 ORDER BY RAND() limit 1; 适用入门级应用，怎么这样说呢? 因为数据量小时，倒没多大问题，由于会进行全表扫描，当数据量渐渐巨型时，查询时间会相当变态。 本地环境运行需时在0.276s左右。 百度出来别人验证过，性能高效的方法是 1234SELECT *FROM `table` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `table`)-(SELECT MIN(id) FROM `table`))+(SELECT MIN(id) FROM `table`)) AS id) AS t2WHERE t1.id &gt;= t2.idORDER BY t1.id LIMIT 1; 加上我们需要的条件 1234SELECT *FROM `table` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `table`)-(SELECT MIN(id) FROM `table`))+(SELECT MIN(id) FROM `table`)) AS id) AS t2WHERE t1.id &gt;= t2.id and 条件1 and 条件2 and 条件3ORDER BY t1.id LIMIT 1; 我们下面就来测试一下生产虚拟数据先生成20万条虚拟数据，要随机生成，保证数据的均匀分布。 跑一下平均只用0.006s左右 统计符合条件的数目 1SELECT COUNT(*) FROM `table` WHERE 条件1 and 条件2 and 条件3; 符合条件的数据有8340条，占比0.0417。 数据校验运行8000次校验通过：0.999875, 检验不通过：0.000125计算了一下，是1条。 运行了两次程序，结果依旧，原因暂未查明。 数据重复性测试 运行 出现1次 2次 3次 4次 5次 6次 7次 8次 9次 10次 11次 12次 13次 14次 1000 0.7970 0.1760 0.0270 0 0 0 0 0 0 0 0 0 0 0 2000 0.6355 0.265 0.0825 0.014 0.0025 0 0 0 0 0 0 0 0 0 3000 0.5367 0.2853 0.1290 0.0307 0.0100 0.0080 0 0 0 0 0 0 0 0 4000 0.4603 0.2900 0.1388 0.0590 0.0313 0.0150 0.0035 0.0020 0 0 0 0 0 0 5000 0.3844 0.3000 0.1632 0.0872 0.042 0.0132 0.0084 0.0016 0 0 0 0 0 0 6000 0.3405 0.2833 0.1965 0.0967 0.0500 0.0160 0.0070 0.0067 0.0030 0 0 0 0 0 7000 0.2990 0.2700 0.1701 0.1000 0.0729 0.0497 0.0230 0.0069 0.0039 0.0043 0 0 0 0 8000 0.266 0.2593 0.1935 0.1095 0.0719 0.0465 0.0263 0.014 0.0034 0.0025 0.0028 0.0045 0 0 由此来看，随机性还是挺不错的，多数数据是出现在前段，这个方法可以使用。 注意：在max,min里面的语句不能再加入where，加入后发现查询明显减慢，经EXPLAIN分析是会导致一条或多条select_type为SUBQUERY进行全表扫描。 美化SQL： 123456789101112SELECT * FROM `T_UserDefaultProfile` AS t1 JOIN ( SELECT ROUND( RAND() * ( (SELECT MAX(F_UdpID) FROM `T_UserDefaultProfile`)-(SELECT MIN(F_UdpID) FROM `T_UserDefaultProfile`) ) + (SELECT MIN(F_UdpID) FROM `T_UserDefaultProfile`) ) AS F_UdpID ) AS t2WHERE t1.F_UdpID &gt;= t2.F_UdpID and 1=1 and 2=2 and 3=3ORDER BY t1.F_UdpID LIMIT 1;SELECT ROUND(1,10) ————————————————原文链接：https://blog.csdn.net/Wai_Leung/article/details/88318905","categories":[{"name":"MySQL","slug":"MySQL","permalink":"http://www.lvhejin.cn/categories/MySQL/"}],"tags":[{"name":"随机","slug":"随机","permalink":"http://www.lvhejin.cn/tags/%E9%9A%8F%E6%9C%BA/"}]},{"title":"ControlCenter.app 在 Monterey OS 上侦听端口 7000/tcp。这正常吗？为什么这样做？怎么关闭？","slug":"Mac/controlcenter-app-listens-to-port-5000-tcp-on-monterey-os","date":"2022-09-26T19:25:43.000Z","updated":"2024-01-05T17:32:17.639Z","comments":true,"path":"2022/09/26/Mac/controlcenter-app-listens-to-port-5000-tcp-on-monterey-os/index.html","link":"","permalink":"http://www.lvhejin.cn/2022/09/26/Mac/controlcenter-app-listens-to-port-5000-tcp-on-monterey-os/index.html","excerpt":"","text":"使用lsof -i:5000和ps -ef|grep PID命令获取了下面的数据。1234567a@deMBP src % lsof -i tcp:7000COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAMEControlCe 2331 a 19u IPv4 0xcb75b4e73aa81dfb 0t0 TCP *:afs3-fileserver (LISTEN)ControlCe 2331 a 20u IPv6 0xcb75b4e73aaadd4b 0t0 TCP *:afs3-fileserver (LISTEN)a@deMBP src % ps -ef|grep 2331 501 2331 1 0 7 922 ?? 15:56.77 /System/Library/CoreServices/ControlCenter.app/Contents/MacOS/ControlCenter 501 75750 68773 0 7:28下午 ttys007 0:00.00 grep 2331 解决方案：端口 5000 现在用于 Airplay 以及 macOS Monterey 中的端口 7000，您可以通过在列表底部的“系统偏好设置”&gt;“共享”中取消选中“隔空播放接收器”来关闭它。 所以是的，这很正常！Apple 意识到从操作系统的角度来看并没有使用这些端口，即使许多开发人员默认使用这些端口。 转载：stackexchange","categories":[{"name":"Mac","slug":"Mac","permalink":"http://www.lvhejin.cn/categories/Mac/"},{"name":"Hexo使用攻略","slug":"Mac/Hexo使用攻略","permalink":"http://www.lvhejin.cn/categories/Mac/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5/"},{"name":"Github","slug":"Mac/Hexo使用攻略/Github","permalink":"http://www.lvhejin.cn/categories/Mac/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5/Github/"}],"tags":[{"name":"Mac","slug":"Mac","permalink":"http://www.lvhejin.cn/tags/Mac/"},{"name":"Network","slug":"Network","permalink":"http://www.lvhejin.cn/tags/Network/"},{"name":"Monterey","slug":"Monterey","permalink":"http://www.lvhejin.cn/tags/Monterey/"}]},{"title":"一次性搞定MacOS安装NodeJs","slug":"NodeJS/一次性搞定MacOS安装NodeJs","date":"2022-09-26T11:10:34.000Z","updated":"2024-01-05T17:32:17.643Z","comments":true,"path":"2022/09/26/NodeJS/一次性搞定MacOS安装NodeJs/index.html","link":"","permalink":"http://www.lvhejin.cn/2022/09/26/NodeJS/%E4%B8%80%E6%AC%A1%E6%80%A7%E6%90%9E%E5%AE%9AMacOS%E5%AE%89%E8%A3%85NodeJs/index.html","excerpt":"","text":"一、要在 Mac OS 上安装 Node.js，需要先安装 brew，然后下载 Node.js。1brew install node 下载完成之后验证安装版本，验证成功就表示 Node 安装成功。 12node -vnpm -v 因为墙的原因，需要再下载安装淘宝镜像，其目的就是为了加速下载过程。 1npm install -g cnpm --registry=https://registry.npm.taobao.org 权限不够的话，加上 sudo，输入自己本机的密码。 1sudo npm install -g cnpm --registry=https://registry.npm.taobao.org 等待软件下载完成，到此就已经安装完成了。 二、mac安装node.js的方法：1、访问nodejs官网；2、下载对应的“.pkg”文件；3、双击“.pkg”文件并按照默认步骤安装即可。下载地址：https://nodejs.org/zh-cn/ 扩展： 12345brew link nodebrew uninstall nodebrew install nodecnpm -vhttps://nodejs.org/dist/ 转载：https://yvesyu.com/installing-node-js-on-mac-os-in-one-go/","categories":[{"name":"NodeJS","slug":"NodeJS","permalink":"http://www.lvhejin.cn/categories/NodeJS/"}],"tags":[{"name":"NodeJS","slug":"NodeJS","permalink":"http://www.lvhejin.cn/tags/NodeJS/"},{"name":"Homebrew","slug":"Homebrew","permalink":"http://www.lvhejin.cn/tags/Homebrew/"},{"name":"Brew","slug":"Brew","permalink":"http://www.lvhejin.cn/tags/Brew/"}]},{"title":"在MacOS上安装Go语言开发环境","slug":"Go/在MacOS上安装Go语言开发环境","date":"2022-09-21T16:14:11.000Z","updated":"2024-01-05T17:32:17.619Z","comments":true,"path":"2022/09/21/Go/在MacOS上安装Go语言开发环境/index.html","link":"","permalink":"http://www.lvhejin.cn/2022/09/21/Go/%E5%9C%A8MacOS%E4%B8%8A%E5%AE%89%E8%A3%85Go%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/index.html","excerpt":"","text":"安装包下载地址为：https://golang.org/dl/ https://go.dev/doc/install 如果打不开可以使用这个地址：https://golang.google.cn/dl/。","categories":[{"name":"Go","slug":"Go","permalink":"http://www.lvhejin.cn/categories/Go/"}],"tags":[{"name":"Go","slug":"Go","permalink":"http://www.lvhejin.cn/tags/Go/"},{"name":"Golang","slug":"Golang","permalink":"http://www.lvhejin.cn/tags/Golang/"}]},{"title":"Hexo搭建个人博客并部署到Github","slug":"Hexo/Hexo搭建个人博客并部署到Github","date":"2022-09-20T17:12:32.000Z","updated":"2024-01-05T17:32:17.619Z","comments":true,"path":"2022/09/20/Hexo/Hexo搭建个人博客并部署到Github/index.html","link":"","permalink":"http://www.lvhejin.cn/2022/09/20/Hexo/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0Github/index.html","excerpt":"","text":"准备你需要准备好以下软件：Node.js环境和Git Hexo安装npm install hexo -g 升级更新hexo到最新版npm update hexo -g Hexo 增加PDF插件 npm install --save hexo-pdf 插入链接：&#123;% pdf 相对链接 or 绝对链接 %&#125; pdf.js https://www.cnblogs.com/lifeislife/p/17207229.html初始化hexo init如果指定，便会在目前的资料夹建立一个名为的新文件夹；否则会在目前资料夹初始化。 生成网站hexo g 启动本地服务hexo s启动服务后，就可以访问：http://localhost:4000/（port 预设为 4000，可在 _config.yml 设定） RSS订阅命令行切换到hexo博客根目录，安装hexo-generator-feed$ npm install hexo-generator-feed --save在博客目录的_config.yml中添加如下代码 1234567## feed feed: type: atom path: atom.xml limit: 20 hub: content: sitemap站点地图命令行切换到hexo博客根目录，分别用下面两个命令来安装针对谷歌和百度的sitemap插件 12npm install hexo-generator-sitemap --savenpm install hexo-generator-baidu-sitemap --save 在博客目录的_config.yml中添加如下代码 sitemap1234sitemap: path: sitemap.xmlbaidusitemap: path: baidusitemap.xml 部署步骤每次部署的步骤，可按以下三步来进行。 123hexo cleanhexo generatehexo deploy 一些常用命令： 12345678hexo new &quot;postName&quot; #新建文章hexo new page &quot;pageName&quot; #新建页面hexo new -p &quot;Hexo/二级路径/Hexo搭建个人博客并部署到Github&quot; &quot;文章标题&quot;hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，&#x27;ctrl + c&#x27;关闭server）hexo deploy #将.deploy目录部署到GitHubhexo help # 查看帮助hexo version #查看Hexo的版本 参考文章：https://blog.cofess.com/2017/04/09/hexo-builds-a-personal-blog-and-deploys-to-github.html","categories":[{"name":"建站","slug":"建站","permalink":"http://www.lvhejin.cn/categories/%E5%BB%BA%E7%AB%99/"},{"name":"Hexo使用攻略","slug":"建站/Hexo使用攻略","permalink":"http://www.lvhejin.cn/categories/%E5%BB%BA%E7%AB%99/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5/"},{"name":"Github","slug":"建站/Hexo使用攻略/Github","permalink":"http://www.lvhejin.cn/categories/%E5%BB%BA%E7%AB%99/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5/Github/"}],"tags":[{"name":"测试","slug":"测试","permalink":"http://www.lvhejin.cn/tags/%E6%B5%8B%E8%AF%95/"},{"name":"开始","slug":"开始","permalink":"http://www.lvhejin.cn/tags/%E5%BC%80%E5%A7%8B/"}]},{"title":"使用jsonP实现百度关键词下拉提示","slug":"JavaScript/使用jsonP实现百度关键词下拉提示","date":"2022-09-20T16:49:41.000Z","updated":"2024-01-05T17:32:17.635Z","comments":true,"path":"2022/09/20/JavaScript/使用jsonP实现百度关键词下拉提示/index.html","link":"","permalink":"http://www.lvhejin.cn/2022/09/20/JavaScript/%E4%BD%BF%E7%94%A8jsonP%E5%AE%9E%E7%8E%B0%E7%99%BE%E5%BA%A6%E5%85%B3%E9%94%AE%E8%AF%8D%E4%B8%8B%E6%8B%89%E6%8F%90%E7%A4%BA/index.html","excerpt":"","text":"使用到的百度jsonP接口地址：http://suggestion.baidu.com/su?wd=关键词(aa)&amp;cb=回调函数名(callback) 使用这个格式请求时，会得到一个回调函数（这里使用的关键词是aa，回调函数名是callback）： 12345callback(&#123; q: &quot;java&quot;, p: false, s: [&quot;java&quot;, &quot;java是什么意思&quot;, &quot;java培训&quot;, &quot;javascript&quot;, &quot;java自行车&quot;, &quot;java基础知识点&quot;, &quot;javaguide&quot;, &quot;java环境变量配置&quot;, &quot;java面试题&quot;, &quot;java游戏&quot;]&#125;); html代码： 12345&lt;p&gt;使用jsonP实现百度关键词下拉提示&lt;/p&gt;&lt;input type=&quot;text&quot; name=&quot;&quot; id=&quot;wd&quot; autofocus&gt;&lt;ul id=&quot;ul1&quot;&gt;下拉框，用于存放返回的关键词&lt;/ul&gt; CSS代码： 12345678910111213141516171819202122232425262728293031323334353637383940&lt;style&gt; p&#123; color: #bf6900; font-size: 24px; &#125; #wd&#123; border: none; padding-left: 5px; line-height: 40px; font-size: 24px; border: 1px solid #aaaaaa; border-color: #bf6900; width: 394px; height: 40px; outline: none; &#125; #ul1&#123; padding: 0; margin: 0; width: 400px; border: 1px solid #bf6900; display: none; &#125; #ul1 li a&#123; font-size: 24px; padding: 5px 0; text-decoration: none; display: block; color: #bf6900; padding-left: 5px; &#125; #ul1 li a:hover&#123; color: white; background-color: #bf6900; &#125; &lt;/style&gt; javascript代码： 123456789101112131415161718192021222324252627282930313233343536&lt;script&gt; //回调函数，需定义为全局函数 function callback(data)&#123; var oUl1 = document.getElementById(&#x27;ul1&#x27;); var html = &#x27;&#x27;; if (data.s.length!=&#x27;&#x27;)&#123; //将返回的数据插入下拉框中 oUl1.style.display = &#x27;block&#x27;; for(var i=0;i&lt;data.s.length;i++)&#123; html +=&#x27;&lt;li&gt;&lt;a target=&quot;#data&quot; href=&quot;http://www.baidu.com/s?wd=&#x27;+data.s[i]+&#x27;&quot;&gt;&#x27;+ data.s[i] +&#x27;&lt;/a&gt;&lt;/li&gt;&#x27;; &#125; oUl1.innerHTML = html; &#125;else&#123; //没有匹配的关键词时，隐藏下拉框 oUl1.style.display = &#x27;none&#x27;; &#125; &#125; window.onload = function () &#123; var ul1 = document.getElementById(&#x27;ul1&#x27;); var wd = document.getElementById(&#x27;wd&#x27;); //按键弹起触发jsonP请求 wd.onkeyup = function () &#123; if (this.value!=&#x27;&#x27;)&#123; var oScript = document.createElement(&#x27;script&#x27;); oScript.src = &#x27;http://suggestion.baidu.com/su?wd=&#x27;+this.value+&#x27;&amp;cb=callback&#x27;; document.body.appendChild(oScript); &#125;else &#123; ul1.style.display = &quot;none&quot;; &#125; &#125; &#125; &lt;/script&gt; 效果如下：转载：https://www.jianshu.com/p/edefb0676606","categories":[{"name":"建站","slug":"建站","permalink":"http://www.lvhejin.cn/categories/%E5%BB%BA%E7%AB%99/"}],"tags":[{"name":"ajax","slug":"ajax","permalink":"http://www.lvhejin.cn/tags/ajax/"},{"name":"json","slug":"json","permalink":"http://www.lvhejin.cn/tags/json/"}]},{"title":"MAC上Git安装与GitHub基本使用","slug":"GitHub/MAC上Git安装与GitHub基本使用","date":"2022-09-19T18:48:42.000Z","updated":"2024-01-05T17:32:17.599Z","comments":true,"path":"2022/09/19/GitHub/MAC上Git安装与GitHub基本使用/index.html","link":"","permalink":"http://www.lvhejin.cn/2022/09/19/GitHub/MAC%E4%B8%8AGit%E5%AE%89%E8%A3%85%E4%B8%8EGitHub%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/index.html","excerpt":"","text":"TryGit 目录 安装git 创建ssh key、配置git 提交本地项目到GitHub 一、安装Git MAC 上安装Git主要有两种方式 首先查看电脑是否安装Git，终端输入： git 安装过则会输出： 12345678910111213141516171819202122232425262728293031323334353637383940414243WMBdeMacBook-Pro:~ WENBO$ gitusage: git [--version] [--help] [-C &lt;path&gt;] [-c name=value] [--exec-path[=&lt;path&gt;]] [--html-path] [--man-path] [--info-path] [-p | --paginate | --no-pager] [--no-replace-objects] [--bare] [--git-dir=&lt;path&gt;] [--work-tree=&lt;path&gt;] [--namespace=&lt;name&gt;] &lt;command&gt; [&lt;args&gt;]These are common Git commands used in various situations:start a working area (see also: git help tutorial) clone Clone a repository into a new directory init Create an empty Git repository or reinitialize an existing onework on the current change (see also: git help everyday) add Add file contents to the index mv Move or rename a file, a directory, or a symlink reset Reset current HEAD to the specified state rm Remove files from the working tree and from the indexexamine the history and state (see also: git help revisions) bisect Use binary search to find the commit that introduced a bug grep Print lines matching a pattern log Show commit logs show Show various types of objects status Show the working tree statusgrow, mark and tweak your common history branch List, create, or delete branches checkout Switch branches or restore working tree files commit Record changes to the repository diff Show changes between commits, commit and working tree, etc merge Join two or more development histories together rebase Reapply commits on top of another base tip tag Create, list, delete or verify a tag object signed with GPGcollaborate (see also: git help workflows) fetch Download objects and refs from another repository pull Fetch from and integrate with another repository or a local branch push Update remote refs along with associated objects&#x27;git help -a&#x27; and &#x27;git help -g&#x27; list available subcommands and someconcept guides. See &#x27;git help &lt;command&gt;&#x27; or &#x27;git help &lt;concept&gt;&#x27;to read about a specific subcommand or concept. 1、通过homebrew安装Git 1、未安装homebrew，需安装homebrew1/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot; 2、安装git1brew install git 2、通过Xcode安装 直接从AppStore安装Xcode，Xcode集成了Git，不过默认没有安装，你需要运行Xcode，选择菜单“Xcode”-&gt;“Preferences”，在弹出窗口中找到“Downloads”，选择“Command Line Tools”，点“Install”就可以完成安装了。 二、创建ssh key、配置git 1、设置username和email（github每次commit都会记录他们） 12git config --global user.name &quot;wenbo&quot;git config --global user.email &quot;1050794513@qq.com&quot; 2、通过终端命令创建ssh key 1ssh-keygen -t rsa -C &quot;105***513@qq.com&quot; 1050***13@qq.com是我的邮件名，回车会有以下输出 1234567Last login: Sat Jan 6 14:12:16 on ttys000WMBdeMacBook-Pro:~ WENBO$ ssh-keygen -t rsa -C &quot;1050794513@qq.com&quot;Generating public/private rsa key pair.Enter file in which to save the key (/Users/WENBO/.ssh/id_rsa): /Users/WENBO/.ssh/id_rsa already exists.Overwrite (y/n)? nWMBdeMacBook-Pro:~ WENBO$ 由于这里我原来已经创建过，这里我选n，没有创建过的，会要求确认路径和输入密码，我们这使用默认的一路回车就行。成功的话会在~/下生成.ssh文件夹，进去，打开id_rsa.pub，复制里面的key。 终端查看.ssh/id_rsa.pub文件 1open .ssh/id_rsa.pub 回车后，就会新弹出一个终端，然后复制里面的key。 或者用cat命令查看 1cat .ssh/id_rsa.pub 3、登录GitHub（默认你已经注册了GitHub账号），添加ssh key，点击Settings，如图 点击New SSH key，如图 添加key，如图 4、链接验证 1ssh -T git@github.com 终端输出结果 1234Last login: Sat Jan 6 14:42:55 on ttys000WMBdeMacBook-Pro:~ WENBO$ ssh -T git@github.com Hi wenmobo! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.WMBdeMacBook-Pro:~ WENBO$ 说明已经链接成功。 三、提交本地项目到GitHub 1、在GitHub上新创建一个 repository或者Start a Project，如图： 2、填写项目信息，如下图所示： 点击Create repository,就创好一个工程了。 3、Clone工程到本地，首先复制ssh 地址 打开终端，这里只是测试，我想把工程克隆在桌面，首先在终端中切换路径到桌面，输入以下命令： 1cd /Users/WENBO/Desktop/ 然后克隆项目,终端输入 1git clone git@github.com:wenmobo/LearnGit.git git@github.com:wenmobo/LearnGit.git是刚刚复制的ssh路径。 终端完整输出如下： 12345678Last login: Sat Jan 6 15:17:17 on ttys000WMBdeMacBook-Pro:~ WENBO$ cd /Users/WENBO/Desktop/WMBdeMacBook-Pro:Desktop WENBO$ git clone git@github.com:wenmobo/LearnGit.gitCloning into &#x27;LearnGit&#x27;...remote: Counting objects: 5, done.remote: Compressing objects: 100% (4/4), done.remote: Total 5 (delta 0), reused 0 (delta 0), pack-reused 0Receiving objects: 100% (5/5), 5.2 这时，工程已经被克隆到桌面了，如下图： 4、在Xcode中新创建一个工程，保存的路径为刚刚克隆下来的LearnGit文件夹下，如下图所示： 5、提交修改，首先切换到LearnGit文件路径： 1cd /Users/WENBO/Desktop/LearnGit 然后输入： 123456//文件添加到仓库（.代表提交所有文件）git add .//把文件提交到仓库git commit -m &quot;First Commit&quot;//上传到githubgit push 终端完整输出如下： 12345678910111213141516171819202122232425262728Last login: Sat Jan 6 15:49:54 on ttys000WMBdeMacBook-Pro:~ WENBO$ cd /Users/WENBO/Desktop/LearnGit WMBdeMacBook-Pro:LearnGit WENBO$ git add .WMBdeMacBook-Pro:LearnGit WENBO$ git commit -m &quot;First Commit&quot;[master ae3bbe9] First Commit11 files changed, 649 insertions(+)create mode 100644 LearnGitDemo/LearnGitDemo.xcodeproj/project.pbxprojcreate mode 100644 LearnGitDemo/LearnGitDemo.xcodeproj/project.xcworkspace/contents.xcworkspacedatacreate mode 100644 LearnGitDemo/LearnGitDemo/AppDelegate.hcreate mode 100644 LearnGitDemo/LearnGitDemo/AppDelegate.mcreate mode 100644 LearnGitDemo/LearnGitDemo/Assets.xcassets/AppIcon.appiconset/Contents.jsoncreate mode 100644 LearnGitDemo/LearnGitDemo/Base.lproj/LaunchScreen.storyboardcreate mode 100644 LearnGitDemo/LearnGitDemo/Base.lproj/Main.storyboardcreate mode 100644 LearnGitDemo/LearnGitDemo/Info.plistcreate mode 100644 LearnGitDemo/LearnGitDemo/ViewController.hcreate mode 100644 LearnGitDemo/LearnGitDemo/ViewController.mcreate mode 100644 LearnGitDemo/LearnGitDemo/main.mWMBdeMacBook-Pro:LearnGit WENBO$ git pushWarning: Permanently added the RSA host key for IP address &#x27;192.30.255.112&#x27; to the list of known hosts.Counting objects: 20, done.Delta compression using up to 4 threads.Compressing objects: 100% (18/18), done.Writing objects: 100% (20/20), 6.80 KiB | 0 bytes/s, done.Total 20 (delta 2), reused 0 (delta 0)remote: Resolving deltas: 100% (2/2), done.To github.com:wenmobo/LearnGit.git 1000218..ae3bbe9 master -&gt; masterWMBdeMacBook-Pro:LearnGit WENBO$ 查看GitHub上的项目，LearnGit已经上传成功啦，如下图所示： 总结 自己现在公司项目都是用SVN托管的，没有用Git托管。用到Git的地方就是用码云托管自己写的小Demo，我也是通过这篇文章了解下上传项目到GitHub的基本流程，和码云上传其实也没多大的区别，码云上传我没有用终端，而是用的SourceTree，Git图形化工具还是挺多的，可以自己去了解与使用吧。文章中所写的也是一些最基本的使用，还是多多了解下吧，万一以后的公司要用呢，哈哈。 参考文章 1、Git教程 2、【Github教程】史上最全github使用方法：github入门到精通 3、GotGitHub 转载：https://www.jianshu.com/p/7edb6b838a2e","categories":[{"name":"Github","slug":"Github","permalink":"http://www.lvhejin.cn/categories/Github/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://www.lvhejin.cn/tags/Git/"},{"name":"Mac","slug":"Mac","permalink":"http://www.lvhejin.cn/tags/Mac/"},{"name":"Github","slug":"Github","permalink":"http://www.lvhejin.cn/tags/Github/"}]},{"title":"Hexo使用攻略-添加分类及标签","slug":"Hexo/Hexo使用攻略-添加分类及标签","date":"2022-09-19T16:53:01.000Z","updated":"2024-01-05T17:32:17.619Z","comments":true,"path":"2022/09/19/Hexo/Hexo使用攻略-添加分类及标签/index.html","link":"","permalink":"http://www.lvhejin.cn/2022/09/19/Hexo/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5-%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE/index.html","excerpt":"","text":"本教程针对的是Mac环境下，nexT主题的文章分类和标签设置，其他主题也应该是类似的。添加成功后会在侧边栏或导航栏生成“分类”和“标签”这两个选项，看下图： 文章分类、标签 点击“分类”后的页面： 文章分类页 点击“标签”后的页面： 标签 ok，大概效果就是这样的，下面进入教程 1、创建“分类”选项1.1 生成“分类”页并添加tpye属性打开命令行，进入博客所在文件夹。执行命令 1$ hexo new page categories 成功后会提示： INFO Created: ~/Documents/blog/source/categories/index.md根据上面的路径，找到index.md这个文件，打开后默认内容是这样的： 1234---title: 文章分类date: 2017-05-27 13:47:40--- 添加type: “categories”到内容中，添加后是这样的： 12345---title: 文章分类date: 2017-05-27 13:47:40type: &quot;categories&quot;--- 保存并关闭文件。 1.2 给文章添加“categories”属性打开需要添加分类的文章，为其添加categories属性。下方的categories: web前端表示添加这篇文章到“web前端”这个分类。注意：hexo一篇文章只能属于一个分类，也就是说如果在“- web前端”下方添加“-xxx”，hexo不会产生两个分类，而是把分类嵌套（即该文章属于 “- web前端”下的 “-xxx ”分类）。 123456---title: jQuery对表单的操作及更多应用date: 2017-05-26 12:12:57categories: - web前端--- 至此，成功给文章添加分类，点击首页的“分类”可以看到该分类下的所有文章。当然，只有添加了categories: xxx的文章才会被收录到首页的“分类”中。 2、创建“标签”选项2.1 生成“标签”页并添加tpye属性打开命令行，进入博客所在文件夹。执行命令 1$ hexo new page tags 成功后会提示： 1INFO Created: ~/Documents/blog/source/tags/index.md 根据上面的路径，找到index.md这个文件，打开后默认内容是这样的： 1234---title: 标签date: 2017-05-27 14:22:08--- 添加type: “tags”到内容中，添加后是这样的： 12345---title: 文章分类date: 2017-05-27 13:47:40type: &quot;tags&quot;--- 保存并关闭文件。 2.2 给文章添加“tags”属性打开需要添加标签的文章，为其添加tags属性。下方的tags:下方的- jQuery - 表格 表单验证就是这篇文章的标签了12345678910---title: jQuery对表单的操作及更多应用date: 2017-05-26 12:12:57categories: - web前端tags:- jQuery- 表格- 表单验证--- 至此，成功给文章添加分类，点击首页的“标签”可以看到该标签下的所有文章。当然，只有添加了tags: xxx的文章才会被收录到首页的“标签”中。 细心的朋友可能已经发现，这两个的设置几乎一模一样！是的，没错，思路都是一样的。所以我们可以打开scaffolds/post.md文件，在tages:上面加入categories:,保存后，之后执行hexo new 文章名命令生成的文件，页面里就有categories:项了。 scaffolds目录下，是新建页面的模板，执行新建命令时，是根据这里的模板页来完成的，所以可以在这里根据你自己的需求添加一些默认值。 教程结束，赶紧去设置吧！ 作者：seporga链接：https://www.jianshu.com/p/e17711e44e00来源：简书著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。","categories":[{"name":"建站","slug":"建站","permalink":"http://www.lvhejin.cn/categories/%E5%BB%BA%E7%AB%99/"},{"name":"Hexo使用攻略","slug":"建站/Hexo使用攻略","permalink":"http://www.lvhejin.cn/categories/%E5%BB%BA%E7%AB%99/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5/"},{"name":"Github","slug":"建站/Hexo使用攻略/Github","permalink":"http://www.lvhejin.cn/categories/%E5%BB%BA%E7%AB%99/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5/Github/"}],"tags":[{"name":"测试","slug":"测试","permalink":"http://www.lvhejin.cn/tags/%E6%B5%8B%E8%AF%95/"},{"name":"开始","slug":"开始","permalink":"http://www.lvhejin.cn/tags/%E5%BC%80%E5%A7%8B/"}]},{"title":"Hello World","slug":"hello-world","date":"2022-01-26T17:30:26.000Z","updated":"2024-01-05T17:32:17.651Z","comments":true,"path":"2022/01/26/hello-world/index.html","link":"","permalink":"http://www.lvhejin.cn/2022/01/26/hello-world/index.html","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"第一篇文章","slug":"Hexo/FirstArticle","date":"2022-01-26T17:30:26.000Z","updated":"2024-01-05T17:32:17.619Z","comments":true,"path":"2022/01/26/Hexo/FirstArticle/index.html","link":"","permalink":"http://www.lvhejin.cn/2022/01/26/Hexo/FirstArticle/index.html","excerpt":"","text":"测试002 服务调用关系： 名称 mc tkt ent mbr oc agg 备注 mc ✔️ 消息中心：短信、邮件、钉钉机器人、微信机器人、极光推送等消息 tkt ✔️ ✔️ 出票，卡；Oracle ent ✔️ ✔️ ✔️ 企业相关的微服务，工作流、用户管理等等，Oracle mbr ✔️ ✔️ ✔️ ✔️ 会员微服务，券 oc ✔️ ✔️ ✔️ ✔️ ✔️ 影核相关、小程序第三方管理、自有渠道 agg ✔️ ✔️ ✔️ ✔️ ✔️ ✔️ 聚合接口微服务 八卦图","categories":[{"name":"建站","slug":"建站","permalink":"http://www.lvhejin.cn/categories/%E5%BB%BA%E7%AB%99/"},{"name":"Hexo使用攻略","slug":"建站/Hexo使用攻略","permalink":"http://www.lvhejin.cn/categories/%E5%BB%BA%E7%AB%99/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5/"},{"name":"Github","slug":"建站/Hexo使用攻略/Github","permalink":"http://www.lvhejin.cn/categories/%E5%BB%BA%E7%AB%99/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5/Github/"}],"tags":[{"name":"测试","slug":"测试","permalink":"http://www.lvhejin.cn/tags/%E6%B5%8B%E8%AF%95/"},{"name":"开始","slug":"开始","permalink":"http://www.lvhejin.cn/tags/%E5%BC%80%E5%A7%8B/"}]}],"categories":[{"name":"NodeJS","slug":"NodeJS","permalink":"http://www.lvhejin.cn/categories/NodeJS/"},{"name":"NPM","slug":"NodeJS/NPM","permalink":"http://www.lvhejin.cn/categories/NodeJS/NPM/"},{"name":"互联网","slug":"互联网","permalink":"http://www.lvhejin.cn/categories/%E4%BA%92%E8%81%94%E7%BD%91/"},{"name":"管理","slug":"互联网/管理","permalink":"http://www.lvhejin.cn/categories/%E4%BA%92%E8%81%94%E7%BD%91/%E7%AE%A1%E7%90%86/"},{"name":"Windows","slug":"Windows","permalink":"http://www.lvhejin.cn/categories/Windows/"},{"name":"Go","slug":"Go","permalink":"http://www.lvhejin.cn/categories/Go/"},{"name":"桌面机器人","slug":"Go/桌面机器人","permalink":"http://www.lvhejin.cn/categories/Go/%E6%A1%8C%E9%9D%A2%E6%9C%BA%E5%99%A8%E4%BA%BA/"},{"name":"学习笔记","slug":"Go/学习笔记","permalink":"http://www.lvhejin.cn/categories/Go/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"PHP","slug":"PHP","permalink":"http://www.lvhejin.cn/categories/PHP/"},{"name":"教育","slug":"教育","permalink":"http://www.lvhejin.cn/categories/%E6%95%99%E8%82%B2/"},{"name":"人生感悟","slug":"教育/人生感悟","permalink":"http://www.lvhejin.cn/categories/%E6%95%99%E8%82%B2/%E4%BA%BA%E7%94%9F%E6%84%9F%E6%82%9F/"},{"name":"Hexo","slug":"Hexo","permalink":"http://www.lvhejin.cn/categories/Hexo/"},{"name":"常见问题","slug":"Hexo/常见问题","permalink":"http://www.lvhejin.cn/categories/Hexo/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"},{"name":"基本功","slug":"互联网/基本功","permalink":"http://www.lvhejin.cn/categories/%E4%BA%92%E8%81%94%E7%BD%91/%E5%9F%BA%E6%9C%AC%E5%8A%9F/"},{"name":"VsCode","slug":"VsCode","permalink":"http://www.lvhejin.cn/categories/VsCode/"},{"name":"go环境配置","slug":"Go/go环境配置","permalink":"http://www.lvhejin.cn/categories/Go/go%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"},{"name":"建站","slug":"建站","permalink":"http://www.lvhejin.cn/categories/%E5%BB%BA%E7%AB%99/"},{"name":"Hexo使用攻略","slug":"建站/Hexo使用攻略","permalink":"http://www.lvhejin.cn/categories/%E5%BB%BA%E7%AB%99/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5/"},{"name":"Github","slug":"建站/Hexo使用攻略/Github","permalink":"http://www.lvhejin.cn/categories/%E5%BB%BA%E7%AB%99/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5/Github/"},{"name":"语文","slug":"教育/语文","permalink":"http://www.lvhejin.cn/categories/%E6%95%99%E8%82%B2/%E8%AF%AD%E6%96%87/"},{"name":"Java","slug":"Java","permalink":"http://www.lvhejin.cn/categories/Java/"},{"name":"Git","slug":"Git","permalink":"http://www.lvhejin.cn/categories/Git/"},{"name":"网络安全","slug":"网络安全","permalink":"http://www.lvhejin.cn/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"},{"name":"安全测试","slug":"网络安全/安全测试","permalink":"http://www.lvhejin.cn/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95/"},{"name":"搜索引擎","slug":"搜索引擎","permalink":"http://www.lvhejin.cn/categories/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"},{"name":"Google","slug":"搜索引擎/Google","permalink":"http://www.lvhejin.cn/categories/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/Google/"},{"name":"Shodan","slug":"网络安全/Shodan","permalink":"http://www.lvhejin.cn/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/Shodan/"},{"name":"Baidu","slug":"搜索引擎/Baidu","permalink":"http://www.lvhejin.cn/categories/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/Baidu/"},{"name":"Nrm","slug":"NodeJS/Nrm","permalink":"http://www.lvhejin.cn/categories/NodeJS/Nrm/"},{"name":"Go-admin-ui","slug":"Go/Go-admin-ui","permalink":"http://www.lvhejin.cn/categories/Go/Go-admin-ui/"},{"name":"Go-Admin","slug":"Go/Go-Admin","permalink":"http://www.lvhejin.cn/categories/Go/Go-Admin/"},{"name":"Linux","slug":"Linux","permalink":"http://www.lvhejin.cn/categories/Linux/"},{"name":"Supervisor","slug":"Supervisor","permalink":"http://www.lvhejin.cn/categories/Supervisor/"},{"name":"IDEA","slug":"IDEA","permalink":"http://www.lvhejin.cn/categories/IDEA/"},{"name":"MAT","slug":"MAT","permalink":"http://www.lvhejin.cn/categories/MAT/"},{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://www.lvhejin.cn/categories/SpringBoot/"},{"name":"Mac","slug":"Mac","permalink":"http://www.lvhejin.cn/categories/Mac/"},{"name":"Prometheus","slug":"SpringBoot/Prometheus","permalink":"http://www.lvhejin.cn/categories/SpringBoot/Prometheus/"},{"name":"MySQL","slug":"MySQL","permalink":"http://www.lvhejin.cn/categories/MySQL/"},{"name":"Hexo使用攻略","slug":"Mac/Hexo使用攻略","permalink":"http://www.lvhejin.cn/categories/Mac/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5/"},{"name":"Github","slug":"Mac/Hexo使用攻略/Github","permalink":"http://www.lvhejin.cn/categories/Mac/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5/Github/"},{"name":"Github","slug":"Github","permalink":"http://www.lvhejin.cn/categories/Github/"}],"tags":[{"name":"NodeJS","slug":"NodeJS","permalink":"http://www.lvhejin.cn/tags/NodeJS/"},{"name":"NPM","slug":"NPM","permalink":"http://www.lvhejin.cn/tags/NPM/"},{"name":"管理","slug":"管理","permalink":"http://www.lvhejin.cn/tags/%E7%AE%A1%E7%90%86/"},{"name":"快捷键","slug":"快捷键","permalink":"http://www.lvhejin.cn/tags/%E5%BF%AB%E6%8D%B7%E9%94%AE/"},{"name":"Windows","slug":"Windows","permalink":"http://www.lvhejin.cn/tags/Windows/"},{"name":"软件推荐","slug":"软件推荐","permalink":"http://www.lvhejin.cn/tags/%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90/"},{"name":"机器人","slug":"机器人","permalink":"http://www.lvhejin.cn/tags/%E6%9C%BA%E5%99%A8%E4%BA%BA/"},{"name":"正则表达式","slug":"正则表达式","permalink":"http://www.lvhejin.cn/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"},{"name":"常见问题","slug":"常见问题","permalink":"http://www.lvhejin.cn/tags/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"},{"name":"实例代码","slug":"实例代码","permalink":"http://www.lvhejin.cn/tags/%E5%AE%9E%E4%BE%8B%E4%BB%A3%E7%A0%81/"},{"name":"统计目录大小","slug":"统计目录大小","permalink":"http://www.lvhejin.cn/tags/%E7%BB%9F%E8%AE%A1%E7%9B%AE%E5%BD%95%E5%A4%A7%E5%B0%8F/"},{"name":"人生感悟","slug":"人生感悟","permalink":"http://www.lvhejin.cn/tags/%E4%BA%BA%E7%94%9F%E6%84%9F%E6%82%9F/"},{"name":"Hexo","slug":"Hexo","permalink":"http://www.lvhejin.cn/tags/Hexo/"},{"name":"开心一刻","slug":"开心一刻","permalink":"http://www.lvhejin.cn/tags/%E5%BC%80%E5%BF%83%E4%B8%80%E5%88%BB/"},{"name":"VsCode","slug":"VsCode","permalink":"http://www.lvhejin.cn/tags/VsCode/"},{"name":"GO","slug":"GO","permalink":"http://www.lvhejin.cn/tags/GO/"},{"name":"go环境配置","slug":"go环境配置","permalink":"http://www.lvhejin.cn/tags/go%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"},{"name":"SEO","slug":"SEO","permalink":"http://www.lvhejin.cn/tags/SEO/"},{"name":"keywords","slug":"keywords","permalink":"http://www.lvhejin.cn/tags/keywords/"},{"name":"sitemap","slug":"sitemap","permalink":"http://www.lvhejin.cn/tags/sitemap/"},{"name":"儿童识字","slug":"儿童识字","permalink":"http://www.lvhejin.cn/tags/%E5%84%BF%E7%AB%A5%E8%AF%86%E5%AD%97/"},{"name":"常用汉字","slug":"常用汉字","permalink":"http://www.lvhejin.cn/tags/%E5%B8%B8%E7%94%A8%E6%B1%89%E5%AD%97/"},{"name":"import","slug":"import","permalink":"http://www.lvhejin.cn/tags/import/"},{"name":"Go","slug":"Go","permalink":"http://www.lvhejin.cn/tags/Go/"},{"name":"MySQL","slug":"MySQL","permalink":"http://www.lvhejin.cn/tags/MySQL/"},{"name":"开发异常","slug":"开发异常","permalink":"http://www.lvhejin.cn/tags/%E5%BC%80%E5%8F%91%E5%BC%82%E5%B8%B8/"},{"name":"IP","slug":"IP","permalink":"http://www.lvhejin.cn/tags/IP/"},{"name":"mv","slug":"mv","permalink":"http://www.lvhejin.cn/tags/mv/"},{"name":"大小写","slug":"大小写","permalink":"http://www.lvhejin.cn/tags/%E5%A4%A7%E5%B0%8F%E5%86%99/"},{"name":"Git","slug":"Git","permalink":"http://www.lvhejin.cn/tags/Git/"},{"name":"测试","slug":"测试","permalink":"http://www.lvhejin.cn/tags/%E6%B5%8B%E8%AF%95/"},{"name":"开始","slug":"开始","permalink":"http://www.lvhejin.cn/tags/%E5%BC%80%E5%A7%8B/"},{"name":"REDTEAM","slug":"REDTEAM","permalink":"http://www.lvhejin.cn/tags/REDTEAM/"},{"name":"渗透测试","slug":"渗透测试","permalink":"http://www.lvhejin.cn/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"},{"name":"外部打点","slug":"外部打点","permalink":"http://www.lvhejin.cn/tags/%E5%A4%96%E9%83%A8%E6%89%93%E7%82%B9/"},{"name":"搜索引擎","slug":"搜索引擎","permalink":"http://www.lvhejin.cn/tags/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"},{"name":"搜索语法","slug":"搜索语法","permalink":"http://www.lvhejin.cn/tags/%E6%90%9C%E7%B4%A2%E8%AF%AD%E6%B3%95/"},{"name":"Google","slug":"Google","permalink":"http://www.lvhejin.cn/tags/Google/"},{"name":"漏洞","slug":"漏洞","permalink":"http://www.lvhejin.cn/tags/%E6%BC%8F%E6%B4%9E/"},{"name":"工具","slug":"工具","permalink":"http://www.lvhejin.cn/tags/%E5%B7%A5%E5%85%B7/"},{"name":"网络安全","slug":"网络安全","permalink":"http://www.lvhejin.cn/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"},{"name":"Shodan","slug":"Shodan","permalink":"http://www.lvhejin.cn/tags/Shodan/"},{"name":"Baidu","slug":"Baidu","permalink":"http://www.lvhejin.cn/tags/Baidu/"},{"name":"Mac","slug":"Mac","permalink":"http://www.lvhejin.cn/tags/Mac/"},{"name":"Nrm","slug":"Nrm","permalink":"http://www.lvhejin.cn/tags/Nrm/"},{"name":"Go-admin-ui","slug":"Go-admin-ui","permalink":"http://www.lvhejin.cn/tags/Go-admin-ui/"},{"name":"Go-Admin","slug":"Go-Admin","permalink":"http://www.lvhejin.cn/tags/Go-Admin/"},{"name":"kill","slug":"kill","permalink":"http://www.lvhejin.cn/tags/kill/"},{"name":"Supervisor","slug":"Supervisor","permalink":"http://www.lvhejin.cn/tags/Supervisor/"},{"name":"Beanstalkd","slug":"Beanstalkd","permalink":"http://www.lvhejin.cn/tags/Beanstalkd/"},{"name":"IDEA","slug":"IDEA","permalink":"http://www.lvhejin.cn/tags/IDEA/"},{"name":"Java","slug":"Java","permalink":"http://www.lvhejin.cn/tags/Java/"},{"name":"Nc","slug":"Nc","permalink":"http://www.lvhejin.cn/tags/Nc/"},{"name":"端口探测","slug":"端口探测","permalink":"http://www.lvhejin.cn/tags/%E7%AB%AF%E5%8F%A3%E6%8E%A2%E6%B5%8B/"},{"name":"端口检测","slug":"端口检测","permalink":"http://www.lvhejin.cn/tags/%E7%AB%AF%E5%8F%A3%E6%A3%80%E6%B5%8B/"},{"name":"Eclipse","slug":"Eclipse","permalink":"http://www.lvhejin.cn/tags/Eclipse/"},{"name":"自动配置","slug":"自动配置","permalink":"http://www.lvhejin.cn/tags/%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE/"},{"name":"生效条件","slug":"生效条件","permalink":"http://www.lvhejin.cn/tags/%E7%94%9F%E6%95%88%E6%9D%A1%E4%BB%B6/"},{"name":"不生效","slug":"不生效","permalink":"http://www.lvhejin.cn/tags/%E4%B8%8D%E7%94%9F%E6%95%88/"},{"name":"Mac快捷键","slug":"Mac快捷键","permalink":"http://www.lvhejin.cn/tags/Mac%E5%BF%AB%E6%8D%B7%E9%94%AE/"},{"name":"多选","slug":"多选","permalink":"http://www.lvhejin.cn/tags/%E5%A4%9A%E9%80%89/"},{"name":"点选","slug":"点选","permalink":"http://www.lvhejin.cn/tags/%E7%82%B9%E9%80%89/"},{"name":"启动","slug":"启动","permalink":"http://www.lvhejin.cn/tags/%E5%90%AF%E5%8A%A8/"},{"name":"Linux","slug":"Linux","permalink":"http://www.lvhejin.cn/tags/Linux/"},{"name":"Win","slug":"Win","permalink":"http://www.lvhejin.cn/tags/Win/"},{"name":"jps","slug":"jps","permalink":"http://www.lvhejin.cn/tags/jps/"},{"name":"IO","slug":"IO","permalink":"http://www.lvhejin.cn/tags/IO/"},{"name":"流","slug":"流","permalink":"http://www.lvhejin.cn/tags/%E6%B5%81/"},{"name":"base64","slug":"base64","permalink":"http://www.lvhejin.cn/tags/base64/"},{"name":"http返回状态码","slug":"http返回状态码","permalink":"http://www.lvhejin.cn/tags/http%E8%BF%94%E5%9B%9E%E7%8A%B6%E6%80%81%E7%A0%81/"},{"name":"监控","slug":"监控","permalink":"http://www.lvhejin.cn/tags/%E7%9B%91%E6%8E%A7/"},{"name":"GC","slug":"GC","permalink":"http://www.lvhejin.cn/tags/GC/"},{"name":"Golang","slug":"Golang","permalink":"http://www.lvhejin.cn/tags/Golang/"},{"name":"随机","slug":"随机","permalink":"http://www.lvhejin.cn/tags/%E9%9A%8F%E6%9C%BA/"},{"name":"Network","slug":"Network","permalink":"http://www.lvhejin.cn/tags/Network/"},{"name":"Monterey","slug":"Monterey","permalink":"http://www.lvhejin.cn/tags/Monterey/"},{"name":"Homebrew","slug":"Homebrew","permalink":"http://www.lvhejin.cn/tags/Homebrew/"},{"name":"Brew","slug":"Brew","permalink":"http://www.lvhejin.cn/tags/Brew/"},{"name":"ajax","slug":"ajax","permalink":"http://www.lvhejin.cn/tags/ajax/"},{"name":"json","slug":"json","permalink":"http://www.lvhejin.cn/tags/json/"},{"name":"Github","slug":"Github","permalink":"http://www.lvhejin.cn/tags/Github/"}]}